#! /usr/bin/env python
#  -*- coding: utf-8 -*-

"""  Copyright (c) 2021 by Author. All right reserved.
#
#  avr-ibus@gmx.net
#
#  Don"t share without agreement of the author.
#
#  This is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License, or (at your option) any later version.
#
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public
#  License along with this library; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

#  If you read this, Greeting to Rolf, Andre, Adrian and the whole IBus Team. ;)

###### Somme Example Code #######
# splash
# https://stackoverflow.com/questions/38676617/tkinter-show-splash-screen-and-hide-main-screen-until-init-has-finished
# https://www.geeksforgeeks.org/how-to-create-a-splash-screen-using-tkinter/

# ini file
# https://www.kite.com/python/answers/how-to-read-and-write-ini-files-in-python
# https://stackoverflow.com/questions/8884188/how-to-read-and-write-ini-file-with-python3

# encoding
# str = str.decode("unicode_escape").encode("utf-8")

# bind events
# https://www.python-course.eu/tkinter_events_binds.php

# Dialogs
# https://runestone.academy/runestone/books/published/thinkcspy/GUIandEventDrivenProgramming/02_standard_dialog_boxes.html

# http://www.stefan-rosewig.de/Programs/ToolTip.pdf
# from ToolTip import ToolTip

# TreeView
# https://riptutorial.com/tkinter/example/31880/treeview--basic-example
"""

__author__ = "harryberlin"
__version__ = "0.1.0"

VERSION = __version__

print("AVR-IBus-Settings is starting up...")

import sys
from time import sleep, time, ctime

PY2 = sys.version_info[0] == 2

try:
    import pip
except ImportError:
    print("Package does not exist, do install python-pip/python3-pip")
    sys.exit(1)


def install_package(package):
    import subprocess
    # subprocess.call(["pip" if PY2 else "pip3", "install", package])
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])
    sleep(1)


import os
import base64
import io
import platform
import json

import logging
import struct

try:
    import intelhex
except ImportError:
    install_package("intelhex")
    import intelhex

#try:
#    import numpy
#except ImportError:
#    install_package("numpy")
#    import numpy


from functools import partial

from threading import Thread

try:
    import serial
except ImportError:
    install_package("pyserial")
    import serial

from serial.tools import list_ports
from serial import Serial, PARITY_ODD, serialutil

try:
    from ttkthemes import THEMES
    from ttkthemes import ThemedStyle
except ImportError:
    install_package("ttkthemes")
    from ttkthemes import THEMES
    from ttkthemes import ThemedStyle

if PY2:
    import ConfigParser

    try:
        import Tkinter as tk
    except ImportError:
        install_package("tk")
        import Tkinter as tk

    import ttk
    import tkFileDialog as filedialog
    import tkSimpleDialog as simpledialog
    import tkMessageBox as messagebox
    import Dialog as dialog
    #import tkinter.dialog as dialog

    from PIL import ImageTk, Image
    import tkFont as font
    from Queue import PriorityQueue, Empty, Queue
    from datetime import datetime

    #from tkintermapview import TkinterMapView

else:
    import configparser as ConfigParser

    try:
        import tkinter as tk
    except ImportError:
        install_package("tk")
        import tkinter as tk

    import tkinter.ttk as ttk
    from tkinter import filedialog
    from tkinter import simpledialog
    from tkinter import messagebox
    from tkinter import dialog

    # os.popen("python3 -m pip install --user Pillow")

    try:
        from PIL import ImageTk, Image
    except ImportError:
        install_package("Pillow")
        from PIL import ImageTk, Image

    from queue import PriorityQueue, Empty, Queue

    from tkinter import font

    from datetime import datetime

    try:
        from tkintermapview import TkinterMapView
    except ImportError:
        install_package("tkintermapview")
        from tkintermapview import TkinterMapView


try:  # Python-2
    import tkFont
except ImportError:  # Python-3
    from tkinter import font as tkFont




APP_TITLE = "AVR-IBus-Settings"

if getattr(sys, "frozen", False):
    APP_PATH = os.path.dirname(sys.executable)
elif __file__:
    APP_PATH = os.path.dirname(__file__)
# APP_PATH = os.path.split(__file__)[0]
APP_INI_FILE = os.path.join(APP_PATH, "AVR-IBus-Settings.ini")

APP_ICON_BW = """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"""
APP_ICON_COLOR_OLD = """"""
APP_ICON_COLOR = """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"""
APP_ICON_WB = """"""
APP_ICON_BL = """"""
APP_ICON_WW = """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"""

""" Firmware Upload"""
STK_LOAD_ADDRESS = 0x55
STK_PROG_PAGE = 0x64
STK_READ_PAGE = 0x74
STK_READ_SIGN = 0x75
STK_LEAVE_PROGMODE = 0x51
STK_LEAVE_UPDMODE = 0x58  # ord("X")
STK_GET_PARAMETER = 0x41

# get parameter
STK_SW_MAJOR = 0x81
STK_SW_MINOR = 0x82

STK_GET_SYNC = 0x30

Sync_CRC_EOP = 0x20
Resp_STK_INSYNC = 0x14
Resp_STK_OK = 0x10

MEM_PARTS_UNKNOWN = {
    "eeprom": {
        "mode": 0x41,
        "delay": 20,
        # "size": 4,
        "indx": 0,
        "paged": False,
        "size": 1024,
        "pagesize": 4,
        "pagecount": 0,
        "minw": 3600,
        "maxw": 3600,
        "readback1": 0xff,
        "readback2": 0xff
    },
    "flash": {
        "mode": 0x41,
        "delay": 6,
        # "size": 128,
        "indx": 0,
        "paged": True,
        "size": 32768,
        "pagesize": 128,
        "pagecount": 256,
        "minw": 4500,
        "maxw": 4500,
        "readback1": 0xff,
        "readback2": 0xff
    },
    "lfuse": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 1,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 4500,
        "maxw": 4500,
        "readback1": 0x00,
        "readback2": 0x00
    },
    "hfuse": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 1,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 4500,
        "maxw": 4500,
        "readback1": 0x00,
        "readback2": 0x00
    },
    "efuse": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 1,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 4500,
        "maxw": 4500,
        "readback1": 0x00,
        "readback2": 0x00
    },
    "lock": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 1,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 4500,
        "maxw": 4500,
        "readback1": 0x00,
        "readback2": 0x00
    },
    "calibration": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 1,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 0,
        "maxw": 0,
        "readback1": 0x00,
        "readback2": 0x00
    },
    "signature": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 3,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 0,
        "maxw": 0,
        "readback1": 0x00,
        "readback2": 0x00,
        "value": 0x00,
        "avr-ibus": "Unknown"
    }
}

MEM_PARTS_328P = {
    "eeprom": {
        "mode": 0x41,
        "delay": 20,
        # "size": 4,
        "indx": 0,
        "paged": False,
        "size": 1024,
        "pagesize": 4,
        "pagecount": 0,
        "minw": 3600,
        "maxw": 3600,
        "readback1": 0xff,
        "readback2": 0xff
    },
    "flash": {
        "mode": 0x41,
        "delay": 6,
        # "size": 128,
        "indx": 0,
        "paged": True,
        "size": 32256,   #32768
        "pagesize": 128,
        "pagecount": 252,  #256
        "minw": 4500,
        "maxw": 4500,
        "readback1": 0xff,
        "readback2": 0xff
    },
    "lfuse": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 1,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 4500,
        "maxw": 4500,
        "readback1": 0x00,
        "readback2": 0x00
    },
    "hfuse": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 1,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 4500,
        "maxw": 4500,
        "readback1": 0x00,
        "readback2": 0x00
    },
    "efuse": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 1,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 4500,
        "maxw": 4500,
        "readback1": 0x00,
        "readback2": 0x00
    },
    "lock": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 1,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 4500,
        "maxw": 4500,
        "readback1": 0x00,
        "readback2": 0x00
    },
    "calibration": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 1,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 0,
        "maxw": 0,
        "readback1": 0x00,
        "readback2": 0x00
    },
    "signature": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 3,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 0,
        "maxw": 0,
        "readback1": 0x00,
        "readback2": 0x00,
        "value": 0x1e950F,
        "avr-ibus": "V1.x"
    }
}

MEM_PARTS_328PB = {
    "eeprom": {
        "mode": 0x41,
        "delay": 20,
        # "size": 4,
        "indx": 0,
        "paged": False,
        "size": 1024,
        "pagesize": 4,
        "pagecount": 0,
        "minw": 3600,
        "maxw": 3600,
        "readback1": 0xff,
        "readback2": 0xff
    },
    "flash": {
        "mode": 0x41,
        "delay": 6,
        # "size": 128,
        "indx": 0,
        "paged": True,
        "size": 32256,   #32768
        "pagesize": 128,
        "pagecount": 252,  #256
        "minw": 4500,
        "maxw": 4500,
        "readback1": 0xff,
        "readback2": 0xff
    },
    "lfuse": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 1,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 4500,
        "maxw": 4500,
        "readback1": 0x00,
        "readback2": 0x00
    },
    "hfuse": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 1,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 4500,
        "maxw": 4500,
        "readback1": 0x00,
        "readback2": 0x00
    },
    "efuse": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 1,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 4500,
        "maxw": 4500,
        "readback1": 0x00,
        "readback2": 0x00
    },
    "lock": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 1,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 4500,
        "maxw": 4500,
        "readback1": 0x00,
        "readback2": 0x00
    },
    "calibration": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 1,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 0,
        "maxw": 0,
        "readback1": 0x00,
        "readback2": 0x00
    },
    "signature": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 3,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 0,
        "maxw": 0,
        "readback1": 0x00,
        "readback2": 0x00,
        "value": 0x1e9516,
        "avr-ibus": "V1.x"
    }
}

MEM_PARTS_2560 = {
    "eeprom": {
        "mode": 65,
        "delay": 20,
        # "size": 4,
        "indx": 0,
        "paged": False,
        "size": 4096,
        "pagesize": 8,
        "pagecount": 0,
        "minw": 3600,
        "maxw": 3600,
        "readback1": 0xff,
        "readback2": 0xff
    },
    "flash": {
        "mode": 0x41,
        "delay": 10,
        "indx": 0,
        "paged": True,
        "size": 261120,  # 262144, no Bootloader
        "pagesize": 256,
        "pagecount": 1020,  # 1024 no Bootloader
        "minw": 4500,
        "maxw": 4500,
        "readback1": 0x00,
        "readback2": 0x00
    },
    "lfuse": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 1,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 9000,
        "maxw": 9000,
        "readback1": 0x00,
        "readback2": 0x00
    },
    "hfuse": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 1,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 9000,
        "maxw": 9000,
        "readback1": 0x00,
        "readback2": 0x00
    },
    "efuse": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 1,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 9000,
        "maxw": 9000,
        "readback1": 0x00,
        "readback2": 0x00
    },
    "lock": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 1,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 9000,
        "maxw": 9000,
        "readback1": 0x00,
        "readback2": 0x00
    },
    "calibration": {
        "mode": 0,
        "delay": 0,
        # "size": 0,
        "indx": 0,
        "paged": False,
        "size": 1,
        "pagesize": 0,
        "pagecount": 0,
        "minw": 0,
        "maxw": 0,
        "readback1": 0x00,
        "readback2": 0x00
    },
    "signature": {
            "mode": 0,
            "delay": 0,
            # "size": 0,
            "indx": 0,
            "paged": False,
            "size": 3,
            "pagesize": 0,
            "pagecount": 0,
            "minw": 0,
            "maxw": 0,
            "readback1": 0x00,
            "readback2": 0x00,
            "value": 0x1e9801,
            "avr-ibus": "V2.x"
    }
}


DEBUG = False
try:
    with open(os.path.join(APP_PATH, "DEBUG")) as f:
        DEBUG = True
except IOError:
    pass



def debug_print(message):
    if DEBUG:
        print(message)
        debug_logfile.log(message)


class Logger(object):
    def __init__(self, filefullpath):
        logger_name = "%s" % time()

        self.logger = logging.getLogger(logger_name)

        directoryname, filename = os.path.split(filefullpath)

        if not os.path.exists(directoryname):
            os.makedirs(directoryname)

        # Write UTF-8 BOM
        with open(filefullpath, "wb") as f:
            f.write(bytearray([0xEF, 0xBB, 0xBF]))

        self.logger = logging.getLogger(logger_name)
        fileHandler = logging.FileHandler(filefullpath, mode="a", encoding="utf-8")
        formatter = logging.Formatter("%(asctime)-15s: %(message)s")
        fileHandler.setFormatter(formatter)

        self.logger.setLevel(logging.INFO)
        self.logger.addHandler(fileHandler)


    def log(self, string):
        if PY2:
            try:
                string = string.decode("unicode_escape")
                string = string.encode('unicode_escape')
            except:
                pass
        self.logger.info(string)


class ToolTip(object):
    """
        ####################################################################################################
        ###
        ###     ToolTip
        ###
        ###     This class allows to add a ToolTip to a Tkinter widget.
        ###
        ###     Autor:  Stefan Rosewig
        ###
        ###     V 1.0       first stable release
        ###     V 1.0.1     minor fix on display
        ###     V 1.0.2     version info function added
        ###     V 1.1.0     improvements exception handling

        VERSION     = (1,1,0)
        VERSION_s   = "%s.%s.%s" %VERSION

        Class creating a tooltip on a widget
        Usage: ToolTip(<widget>, <text>, <time>, <font>, <fg>, <bg>)
        <widget>  = TkInter widget to create TooTip on, i.e. tk.Button
        <text>    = The text to be shown as ToolTip
        <time>    = Time in milliseconds until fase out of the ToolTip, 2000ms.
                    If <time> is less than 1000ms, the Tooltip is displayed
                    until the mouse has left the widget.
        <font>    = font to be used, by default ("arial","8","normal")
        <fg>      = foreground color (text), default "black"
        <bg>      = background color, default "lightyellow"
    """
    VERSION = (1, 1, 0)
    VERSION_s = "%s.%s.%s" % VERSION

    text = ""
    time = 2000

    def __init__(self, widget, text="", time=2000, font=("arial", "8", "normal"), fg="black", bg="lightyellow"):
        """ ToolTip initialisation, widget is mandatory """
        widget.focus_displayof()  # Identify tkinter widget
        self.widget = widget  # The widget the tooltip is for
        if type(text) != str:  # String expected
            raise TypeError("<text> must be a string")
        self.text = text  # Tooltip text
        if type(time) != int:  # Integer expected
            raise TypeError("<time> must be an integer")
        self.time = time  # Display time for ToolTip
        if type(font) != tuple:  # tuple (font) expected
            raise TypeError("<font> must be a font tuple")
        self.font = font  # Font to be used
        self.fg = fg  # foreground color (textcolor)
        self.bg = bg  # background color
        self.widget.bind("<Enter>", self.__enter)  # If mouse enters widget area
        self.widget.bind("<Leave>", self.__leave)  # If mouse leaves widget area
        return

    def version_info(self):
        """ return version info Major, Minor, Subversion """
        return self.VERSION_s

    def config(self, text=None, time=None, font=None, fg=None, bg=None):
        """ configuration of ToolTip """
        if text is not None:
            if type(text) != str:  # String expected
                raise TypeError("<text> must be a string")
            self.text = text  # Tooltip text
        if time is not None:
            if type(time) != int:  # Integer expected
                raise TypeError("<time> must be an integer")
            self.time = time  # Display time for ToolTip
        if font is not None:
            if type(font) != tuple:  # tuple (font) expected
                raise TypeError("<font> must be a font tuple")
            self.font = font  # Font to be used
        if fg != None:
            self.fg = fg  # foreground color (textcolor)
        if bg != None:
            self.bg = bg  # background color
        return

    def __enter(self, event=None):
        """ MousePointer has entered widget so display the Tooltip """
        self.tw = tk.Toplevel(self.widget)  # Create a toplevel widget
        self.tw.overrideredirect(True)  # No frame for the widget
        scr_w = self.widget.winfo_screenwidth()  # Get screen resolution width
        scr_h = self.widget.winfo_screenheight()  # Get screen resolution height
        x = self.tw.winfo_pointerx()  # Pointer X-position
        y = self.tw.winfo_pointery()  # Pointer Y-position
        try:
            tk.Label(self.tw,  # Label in the widget
                     text=self.text,  # Text to show
                     foreground=self.fg,  # define foregroundcolor
                     background=self.bg,  # define backgroundcolor
                     relief="ridge",  # Display Style
                     borderwidth=1,  # 1 Pixel Border
                     font=self.font).pack(ipadx=5)  # Define Font
        except tk.TclError:
            import traceback
            traceback.print_exc(limit=2, file=sys.stdout)  # print Traceback
            self.tw.destroy()  # close tooltip
        else:
            self.tw.update_idletasks()  # Display ToolTip
            try:
                w_posy = self.widget.winfo_rooty()  # Get widget Y Position (Top)
                w_posx = self.widget.winfo_rootx()  # Get widget X Position (left)
                w_height = self.widget.winfo_height()  # Get widget height
                w_width = self.widget.winfo_width()  # Get widget width
                t_height = self.tw.winfo_height()  # Get ToolTip heigth
                t_width = self.tw.winfo_width()  # Get ToolTip width
                if t_height + self.widget.winfo_rooty() + 50 > scr_h:  # Check if ToolTip is out of screen bottom
                    y = w_posy - t_height  # Position it above widget
                else:
                    y = w_posy + w_height  # Position it below widget
                if t_width + self.widget.winfo_rootx() + w_width + 5 > scr_w:  # Check if ToolTip is out of screen rigth
                    x = w_posx - t_width - 5  # Position it on the left
                else:
                    x = w_posx + w_width + 5  # Position it on the right
                self.tw.wm_geometry("+%d+%d" % (x, y))  # Set ToolTip Position
            except:
                pass  # if bad window path nothing happens
            if self.time > 0:
                self.tw.after(self.time, self.__leave)  # Start timer
        return

    def __leave(self, event=None):
        """ Mousepointer has left the widget so remove the displayed ToolTip """
        try:
            self.tw.destroy()  # Destroy ToolTip
        except:
            pass
        return


class About(tk.Toplevel):
    def __init__(self, parent):
        tk.Toplevel.__init__(self, parent)
        splash_width = 370
        splash_height = 130
        width = self.winfo_screenwidth()
        height = self.winfo_screenheight()
        self.geometry("%dx%d+%d+%d" % (splash_width, splash_height, (width * 0.5) - (splash_width * 0.5), (height * 0.5) - (splash_height * 0.5)))
        self.grab_set()  # modal
        # self.attributes("-alpha", 0.5)
        # self.wm_attributes("-transparentcolor", "#FF00FF")
        # self.wm_attributes("-transparent", True)

        self.frame = tk.Frame(self, highlightbackground="black", highlightthickness=1, background="#d9d9d9").place(x=0, y=0, width=splash_width, height=splash_height)

        self.LOGO_IMG = decode_img(APP_ICON_COLOR, (70, 70))
        self.LOGO_IMG = ImageTk.PhotoImage(self.LOGO_IMG)

        self.logo = tk.Label(self, background="#d9d9d9")
        self.logo.place(x=5, y=10, width=80, height=80)
        self.logo.configure(image=self.LOGO_IMG)

        tk.Label(self, background="#d9d9d9", text="AVR-IBus by harryberlin© Version: %s" % VERSION).place(x=85, y=10, height=24)

        lblUrl = tk.Label(self, background="#d9d9d9", text="www.github.com/harryberlin/AVR-IBus.public", fg="blue", cursor="hand2")
        lblUrl.place(x=85, y=40, height=24)
        lblUrl.bind("<Button-1>", lambda e: self.callback("www.github.com/harryberlin/AVR-IBus.public"))

        lblMail = tk.Label(self, background="#d9d9d9", text="avr-ibus@gmx.net", fg="blue", cursor="hand2")
        lblMail.place(x=85, y=70, height=24)
        lblMail.bind("<Button-1>", lambda e: self.callback("mailto:avr-ibus@gmx.net"))

        tk.Button(self, text="OK", command=self.btn_close_clicked).place(x=5, y=100, width=splash_width - 10, height=24)
        # self.logo.config(bg="#FF00FF")

        # self.title("About")
        self.overrideredirect(True)
        ## required to make window show before the program gets to the mainloop
        # self.update()

    def callback(self, url):
        import webbrowser
        webbrowser.open_new(url)

    def btn_close_clicked(self):
        self.destroy()
'''
class MapPickerNEW(tk.Toplevel):

    APP_NAME = "TkinterMapView with CustomTkinter"
    WIDTH = 800
    HEIGHT = 500

    def __init__(self, parent):
        tk.Toplevel.__init__(self, parent)

        self.title(self.APP_NAME)
        self.geometry(str(self.WIDTH) + "x" + str(self.HEIGHT))
        self.minsize(self.WIDTH, self.HEIGHT)

        self.protocol("WM_DELETE_WINDOW", self.on_closing)
        self.bind("<Command-q>", self.on_closing)
        self.bind("<Command-w>", self.on_closing)
        #self.createcommand('tk::mac::Quit', self.on_closing)

        self.marker_list = []

        # ============ create two CTkFrames ============

        self.grid_columnconfigure(0, weight=0)
        self.grid_columnconfigure(1, weight=1)
        self.grid_rowconfigure(0, weight=1)

        #self.frame_left = customtkinter.CTkFrame(master=self, width=150, corner_radius=0, fg_color=None)
        self.frame_left = tk.Frame(self, highlightbackground="black", highlightthickness=1, background="#d9d9ff").place(x=0, y=0, width=15)
        self.frame_left.grid(row=0, column=0, padx=0, pady=0, sticky="nsew")

        self.frame_right = tk.Frame(self, highlightbackground="black", highlightthickness=1).place(x=0, y=0, width=15)
        self.frame_right.grid(row=0, column=1, rowspan=1, pady=0, padx=0, sticky="nsew")

        # ============ frame_left ============

        self.frame_left.grid_rowconfigure(2, weight=1)

        #self.button_1 = customtkinter.CTkButton(master=self.frame_left, text="Set Marker", command=self.set_marker_event)
        #self.button_1.grid(pady=(20, 0), padx=(20, 20), row=0, column=0)

        #self.button_2 = customtkinter.CTkButton(master=self.frame_left, text="Clear Markers", command=self.clear_marker_event)
        #self.button_2.grid(pady=(20, 0), padx=(20, 20), row=1, column=0)

        #self.map_label = customtkinter.CTkLabel(self.frame_left, text="Tile Server:", anchor="w")
        #self.map_label.grid(row=3, column=0, padx=(20, 20), pady=(20, 0))
        #self.map_option_menu = customtkinter.CTkOptionMenu(self.frame_left, values=["OpenStreetMap", "Google normal", "Google satellite"],command=self.change_map)
        #self.map_option_menu.grid(row=4, column=0, padx=(20, 20), pady=(10, 0))

        #self.appearance_mode_label = customtkinter.CTkLabel(self.frame_left, text="Appearance Mode:", anchor="w")
        #self.appearance_mode_label.grid(row=5, column=0, padx=(20, 20), pady=(20, 0))
        #self.appearance_mode_optionemenu = customtkinter.CTkOptionMenu(self.frame_left, values=["Light", "Dark", "System"],command=self.change_appearance_mode)
        #self.appearance_mode_optionemenu.grid(row=6, column=0, padx=(20, 20), pady=(10, 20))

        # ============ frame_right ============

        self.frame_right.grid_rowconfigure(1, weight=1)
        self.frame_right.grid_rowconfigure(0, weight=0)
        self.frame_right.grid_columnconfigure(0, weight=1)
        self.frame_right.grid_columnconfigure(1, weight=0)
        self.frame_right.grid_columnconfigure(2, weight=1)

        self.map_widget = TkinterMapView(self.frame_right, corner_radius=0)
        self.map_widget.grid(row=1, rowspan=1, column=0, columnspan=3, sticky="nswe", padx=(0, 0), pady=(0, 0))



        #self.entry = customtkinter.CTkEntry(master=self.frame_right, placeholder_text="type address")
        #self.entry.grid(row=0, column=0, sticky="we", padx=(12, 0), pady=12)
        #self.entry.bind("<Return>", self.search_event)

        #self.button_5 = customtkinter.CTkButton(master=self.frame_right, text="Search",width=90,command=self.search_event)
        #self.button_5.grid(row=0, column=1, sticky="w", padx=(12, 0), pady=12)

        # Set default values
        self.map_widget.set_address("Berlin")
        self.map_option_menu.set("OpenStreetMap")
        self.appearance_mode_optionemenu.set("Dark")

    def search_event(self, event=None):
        self.map_widget.set_address(self.entry.get())

    def set_marker_event(self):
        current_position = self.map_widget.get_position()
        self.marker_list.append(self.map_widget.set_marker(current_position[0], current_position[1]))

    def clear_marker_event(self):
        for marker in self.marker_list:
            marker.delete()

    def change_appearance_mode(self, new_appearance_mode: str):
        customtkinter.set_appearance_mode(new_appearance_mode)

    def change_map(self, new_map: str):
        if new_map == "OpenStreetMap":
            self.map_widget.set_tile_server("https://a.tile.openstreetmap.org/{z}/{x}/{y}.png")
        elif new_map == "Google normal":
            self.map_widget.set_tile_server("https://mt0.google.com/vt/lyrs=m&hl=en&x={x}&y={y}&z={z}&s=Ga", max_zoom=22)
        elif new_map == "Google satellite":
            self.map_widget.set_tile_server("https://mt0.google.com/vt/lyrs=s&hl=en&x={x}&y={y}&z={z}&s=Ga", max_zoom=22)

    def on_closing(self, event=0):
        self.destroy()

    def start(self):
        self.mainloop()
'''

class MapPicker(tk.Toplevel):
    #https://stackoverflow.com/questions/67491524/how-to-wait-for-result-from-tkinter-toplevel-window-before-continuing

    def __init__(self, parent):
        tk.Toplevel.__init__(self, parent)
        self.current_position = None
        window_width = 400
        window_height = 500
        width = self.winfo_screenwidth()
        height = self.winfo_screenheight()
        self.geometry("%dx%d+%d+%d" % (window_width, window_height, (width * 0.5) - (window_width * 0.5), (height * 0.5) - (window_height * 0.5)))
        self.grab_set()  # modal
        # self.attributes("-alpha", 0.5)
        # self.wm_attributes("-transparentcolor", "#FF00FF")
        # self.wm_attributes("-transparent", True)

        # create map widget
        self.map_widget = TkinterMapView(self, width=400, height=400, corner_radius=10)
        self.map_widget.set_tile_server("https://mt0.google.com/vt/lyrs=m&hl=en&x={x}&y={y}&z={z}&s=Ga", max_zoom=22)
        self.map_widget.pack(fill="both", expand=False)

        # set current position and zoom
        self.map_widget.set_position(52.516268, 13.377695, marker=False)  # Berlin, Germany
        self.map_widget.set_zoom(10)

        # load images in PhotoImage object
        #self.tor_image = ImageTk.PhotoImage(Image.open(os.path.join(os.path.dirname(os.path.abspath(__file__)), "images", "tor.jpg")).resize((300, 200)))
        #self.airport_image = ImageTk.PhotoImage(Image.open(os.path.join(os.path.dirname(os.path.abspath(__file__)), "images", "airport.jpg")).resize((300, 200)))


        # create marker through .set_address() with image, which is visible at zoom levels 14 to infinity
        #self.marker_1 = self.map_widget.set_address("Brandenburger Tor", marker=True, image_zoom_visibility=(14, float("inf")))

        # make image visible/invisible when marker is clicked

        # create marker through .set_marker() with image, which is visible at all zoom levels
        #self.marker_2 = self.map_widget.set_marker(52.47314336937092, 13.40380288606593, text="Old airport", image_zoom_visibility=(0, float("inf")), command=self.click_airport_marker_event)
        #self.marker_2.hide_image(True)  # hide image

        # create marker with custom colors and font
        #self.marker_3 = self.map_widget.set_marker(52.52084109254517, 13.409429827034389, text="Tower", text_color="green", marker_color_circle="black", marker_color_outside="gray40", font=("Helvetica Bold", 24))

        tk.Button(self, text="Positon", command=self.set_marker_event).place(x=5, y=420, width=400 - 10, height=50) #24

        self.h_line = tk.Frame(self, highlightbackground="black", highlightthickness=1, background="#ffffff").place(x=0, y=200, width=400, height=2)
        self.v_line = tk.Frame(self, highlightbackground="black", highlightthickness=1, background="#ffffff").place(x=200, y=0, width=2, height=400)

        self.title("MapPicker")

        #self.overrideredirect(True)


    def set_marker_event(self):
        self.current_position = self.map_widget.get_position()
        #self.marker_list.append(self.map_widget.set_marker(current_position[0], current_position[1]))
        debug_print("Lat:%s | Lon:%s" % (self.current_position[0], self.current_position[1]))
        self.destroy()

    def show(self):
        self.deiconify()
        self.wm_protocol("WM_DELETE_WINDOW", self.destroy)
        self.wait_window(self)
        return self.current_position



class Splash(tk.Toplevel):
    def __init__(self, parent):
        tk.Toplevel.__init__(self, parent)
        splash_width = 200
        splash_height = 200
        width = self.winfo_screenwidth()
        height = self.winfo_screenheight()
        self.geometry("%dx%d+%d+%d" % (splash_width, splash_height, (width * 0.5) - (splash_width * 0.5), (height * 0.5) - (splash_height * 0.5)))

        self.LOGO_IMG = decode_img(APP_ICON_COLOR, (150, 150))
        self.LOGO_IMG = ImageTk.PhotoImage(self.LOGO_IMG)

        self.logo = tk.Label(self)
        self.logo.place(x=5, y=5, width=splash_width - 10, height=splash_height - 10)
        self.logo.configure(image=self.LOGO_IMG)

        # self.attributes("-alpha", 0.5)
        # self.wm_attributes("-transparent", True)
        # self.wm_attributes("-transparentcolor", "#FF00FF")
        # self.logo.configure(background="#ff00ff")
        # self.config(bg="#FF00FF")

        # self.title("Splash")
        self.overrideredirect(True)
        ## required to make window show before the program gets to the mainloop
        self.update()


class App(tk.Tk):

    def __init__(self):
        tk.Tk.__init__(self)
        self.FONT_WEBDINGS = tkFont.Font(family='Webdings')  # ,size=24, weight=tkFont.BOLD

        self.ICON_CLEAR = img_from_base64("""iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACXklEQVR42mNkIA4w8vDwMH779u3/v3///qNIENLp7+/P3NPTw6qiosLy/fv3f0uXLv2dn5//B2QYQQOMjIyYTp48yfXjD4NM37kXmfsefzaPludf/vrY5sXVxRnvCBowY0Ivl4+Tfa7zFe7S2xwswgx//jL8f/+DgenFty98Dx4sY7m6vgenAZtLfUK9zDTaGJhYVd6zCzJMZtZimPJNkeH9+78MDB9/MAgzsTCwndsTj2HAnARruzhvgy4WLnbz/7//MTD8BnmVmYGB6T/D5/c/Gaa9lGeYzGLHoMDL9PHt/AppuAGttkraeZ467VzSAj4MHKyMDMxMDAx/gQb8BNr4C4h//Gb49/wNw9cXbxm8Bcre3Dm2Lerl8cW7wQbciTGtVZDkrGMQ4mJh5GRlYOBgYWBgBdr6/z9E89dfDD/uvGD48oOV4dlb5tPO57+Gvnt68SE4EIMN1PlXxLo9/f/mITfjjxfACGcDG8DIBnQBIyPDv08/Gd5dfsHwQ0iR4ent+/Pzzz7IOv31zw94OljrpJPmHR4wk4mJkYHxwVVgKN9jYOIEOoyVieHn+18ML57/Z/gnKPHr7JlzhRFX303DSGEzzRRdk83VNv1V1uD4zyPIwHzzAsO/t/cY3r39zPCeQ5rhz5dvz9dduhXa8PjLUaxJFETMMpa1STSQ3fhPWlboj7wWw6+juxhesAowfL5+7VjXleeha979eIYzjcMYNerCGrXGUtsY+XgVH7OK/b936vj0suvvC85/+vUbbyZB5sTI8Ij3agvNXH/n07qMux8WEconBJMyXQwAALva8926NIjnAAAAAElFTkSuQmCC""")
        self.ICON_LOGFILE = img_from_base64("""iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACz0lEQVR42n1TbUhTURh+7r3zzqk5V05bI0KT/qQ1yBIKzcmcfWp/NBECk8iQkvB7JpaaQqmBgv0wsh9FamWIpk1GphZqZSlZ/ulHQmYxDVd+oG53p3Pnx5yRL5zLufd973Pe53mfw2BdyAvbzcEqb6U3z2Fq3oaBMQs4hnHkxCfLMnDj6GJZSCVsELP2583XnpfUxIUUJGrU2ChMX8yQu7vh+N3+LhcAWX7L97nSk9vEvY2Q1VNXgqWdiO9RtX0o0u9CZutnlzyO1vWT9rNhmLUKIBSAYZxpcSdSoW2Dy2uFWu4OKcc6AZTFRi/tTt/pxqR9sCzYwFOePC1gaY4s16xo4ZnV2DdXmXjJpUPFlebQXN3ud7mRQfhNxUt9OoTG99+WkmRNHxRYJuXg4cbB3Y2bXAXwNjRlNqWEVxzY7kP5A1sK2tCbHQurzY4ItcRFxNc/BHjSKelrjM4OvHIe3elK15/z9+IhoaeoijvwIesYQu+NwnzeD6aXPY66aG0E/GrNGEwJgLbG5ATwNDR/nCmLCxmZmHagB5SZYEyLQfKzcQzFKzArLPPnCDSPp3A/Vo2Euk4ngLrEODVWEOMzYv7jAAi68QIPk3Uo7Z1ERjCPw1uXaHT/tOHWp0UUHlIitb4LjOp6B5ldFCAKvEPhAYGOTybhMDxuwe2kKDwYtmDBTrAgiFoSuFN6UjqaM3sUyGnqAUPdR35dPfKP23hDCyritegcnUFSoAQJGiX9akfD4ATqv9oRHbAJxa2vwPjmP3mbHaPZf3qvClaBONwm41kEUg2KTmkxPDmPqjApyisqkXY5A1IIyBiwQeMvQ3kbBfDWJev48ESTVbDD7rAvA+ofcdzIOxEJ85yAmwd5VFdV48LFdHDEirw3dvh7SVDZ1u0QUUpX8HoKKkNDGZHJ9eKdsBEWhHZGqBYMsYO6md5GBhIG0wz+H4GiQbFxCH8BVgLyxv6kko8AAAAASUVORK5CYII=""")
        self.ICON_LOGTIME = img_from_base64("""iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACk0lEQVR42qVTS0wTURQ9M+1MyycFDJhgJSRCgASIIBijSP0V0BjDToi6KAKJG02U0ApWoBSNC1j4aSQSWCEGhAQoQSomshAK4kL8xADRFQoWDMi3ZaYd32tIoWjYOJmTzH1z73n33Hceg/98mO0LIRW9jqRIVYSKl2HeKeLd1AJkDONLZlkGnIyAZaGQs7F+BLuqXpgtucnG/BT1jrv2TzoQouRwtnF4wI8goLz7++qdc3votyhJf7XIkk5ofPKJHabsONywfvaXcKZpWOotOITldTc8GwRbtcpI+4GcDOxNK9QqJXg5u0kQUd0XfCImfKn1Qhrm1tZB67cPiBYrSVGQ/vmYszav0K/DsFud6QZt4qjheCx+LDqxdf8mywMs/F4Bx3FEhoRZDz+n5sV9pkrjko9AVdZR0nE5szZtbyjm1wRfcf29Gmi1p6A5pkF7WyvO5+VjcHAINttLKHiFykcQrG9rGLiWXRQexGNVEL1rb7raER0dhYyMI+B4Dglx8ZiYnIToFjEyPII+26vXPoKgss4Py3dzkz86Fol+yavusckIy6P7cLlcUAQokRBPCMbHfd3pDeWbM1Cb++anjDmhn34uQtoYjsV0G6mpydAVF4EncUx8AljJA1EQYDZX4/3YFzCRNTZphRwbNVt0WCAEDynfYNB8s6L+YR2oIDlN2Ha010v0YIj7pF+Vp//puMrSK8i6eBVH05Oos/z+2ckMmptbRpnw8va3pTkpB/P2R0Jw+ydR39dVVeCSrgCHUxLR0NiI4sJC2O0jeNryDD3WrgOMSqvT8pn5/YLb43XfVgpqXGZ6AlnKWeyWluHVRl5RFEat3Z0lMzPTQ3RWCoKkHe4OzYmiB0XgJpggWCL4SuM/DMfrJO0RoeUAAAAASUVORK5CYII=""")
        self.ICON_AUTOSCROLL = img_from_base64("""iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACLElEQVR42o2S3UtTYRzHv885cxpUNiqM6IUugmgGQgT2RgjqUiPazLywmy66a07bZkW3XSjH+bL1JySUposwbSoML0TBi15sEhSI1kVSsnLB1nae5+l5jkqccaR9ORzO4Xuez/n+Xgg21RLsX8/m6C6dMoBzgACKvAkxiHdxgRDYVAX2IjU1oPl2S49sAZq9XfxpuAOFqLlVw2Ckg5gAnjsaH44E8PXLCkpsCjonlhFL/DA8l3Mf7tceRUZnOHT4CBpbuzESCZoBbq/GR8IB/Fpbxc5iFacfzaLz1kUk0zq0Z3OYf1iJ338oSveWwSMA0XyAx9vNh8N+3BuYw+TCd9hV4HbjBUwvrePzm/fIUKCmfD+6WipFgpBIELAGnPC/wM2mGthAkc3pWEszHCwtRo4reDI0iY+ha9aArRLAMnAGx1FdXwVV9F+KinlMjcWR0OrEaEqsS3CLJgoqWC4LpUiB0/8SrivVhhcbnUIidFV4THh2mRbRx9s0EZwa85ZbcNIfNbzFkNvYho39UK0TNLX18MHe9oL24EZ7L4b67poBDZHZJGNsD//PYSObovx85T3rMAHq+md4bfkBMBGTbHNYwhVR3sSHbxj3nTcnuNw3w+vPHEP8U9L4iFgclvCq4w6MzS/hdVsewCUSXL9UgYXVtGifteRQT5XtwPPpd4j5zuUl6InzlK6C6nSjVvLPlH/nm81RbSocNIXRBw1mgFCF9Asag9wt4K18+AuiFOIRhDlHnwAAAABJRU5ErkJggg==""")
        self.ICON_LOGSEND = img_from_base64("""iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACrUlEQVR42oVTXUgUURT+7p2Z3XVX15/0wTR60HpRSdhKKAQLWZVQIahEH9Q0KcIgS02zMn8i0LAIXyqlh+jHEizFvxXdimoxCRIFW6OyzGApVlr/d3emO7vr5hrkGe7MnTnn+86553xDsM4CL3ZbYsO1YVoFB+uSAyPTs+AIcfnkO6UEAscWpVDyNJqsBYdU99Q2Z8ZVZcVH4H9mmLQgUCXgQIvJ6EPgV/ns+0J9+mZ575Akb9ZVo6wS+X3/rTe4rN+Oks5xHz/SWk1Sd34C5lacED0EqyYHcqx8tcCBnutEhFYFBU//EoTV9Prviwq1PcrW4efiCmQ88YLZjlBoGFjJA+rSx++XGg8X+FQYfL5jZ3lyzNvypGjM/F6CtAbMcQpX40JUwLsfIpKannbaGg5m+BBoK9rPtB9NbNRFBsG66ABxnZddlIeKZU6tJ9BvA74t69E1UXLN1pR61ofAv6zttvGUvjBMo8CiUx6Vip0ZrqUUgIyrBHfyT6PN1ISXZmoYuiDqfQg0FR2jc1cy48Ysc+B5DVoMaTCO97HOsyBPVOuxalgXJmAYewjTRzzoK0O2lyCittc6XZUSNG6Zh0LQIPcGwf3i67DZ+5mXZ02VoKR6DE0WI35LHvpH78L0Ae0kvK5Pmmdjk7NsDVbDIVII/CYEWGNws+gkhqeavaMUJXc1TITQRRag8l4LCFOf9OtS6j9qS6whqCvag6nZ126wCDjtbh/HAV9ngBevMEhCK58Ml6bE7zqyIxx2p8QyUCYQP7QOpGPY3OXKKGti2QHkHnJX8WUaeG5E/1AdThBtcl6yIjHLYHeKHvURViLPpqBmE1AyAoHJOgAJQhRycgCzmYEHXeDjLPiz3EQlW7HYwDIbMLJ7LzDQjUEGLpTB6/+VjUzneVrZ+rT68Q9CG+GlT+jbowAAAABJRU5ErkJggg==""")
        self.logfile = None
        self._update_counter = time()

        self.withdraw()
        self.width_old = 0  # self.winfo_width()
        self.height_old = 0  # self.winfo_height()
        self.x_old = 0  # self.winfo_x()
        self.y_old = 0  # self.winfo_y()

        splash = Splash(self)

        ## setup stuff goes here

        # self.title("Main Window")

        self.tk.call("wm", "iconphoto", self._w, ImageTk.PhotoImage(decode_img(APP_ICON_COLOR)))

        self._setup()
        self.load_app_settings()

        if self.tgLog_value.get():
            self._log_enable()

        ## simulate a delay while loading
        #sleep(1)

        ## finished loading so destroy splash
        splash.destroy()

        ## show window again
        self.deiconify()
        # self.geometry("835x485+341+107")


        self.after_idle(self._window_center, 835, 485)
        self.after_idle(self.overrideredirect, False)
        self.focus_force()

        self.serial = None
        self.serial_reading_thread = None
        self.serial_run = False
        self.serial_device = None
        self.serial_rx_buffer = []

        self.avr_mode_selected = False

        self.firmware_mode = False
        self.firmware_seq = -1
        self.firmware_signature = 0
        self.firmware_mem_part = None
        self.firmware_file = ""

        self.dont_scroll = False

        self._update_counter = 0 # time()
        self.after_idle(self._update)


    def _setup(self):

        self.lbLog_queue = Queue()
        self.event_queue = Queue()

        """This class configures and populates the toplevel window.
           top is the toplevel containing window."""
        _bgcolor = "#d9d9d9"  # X11 color: "gray85"
        _fgcolor = "#000000"  # X11 color: "black"
        _compcolor = "#d9d9d9"  # X11 color: "gray85"
        _ana1color = "#d9d9d9"  # X11 color: "gray85"
        _ana2color = "#ececec"  # Closest X11 color: "gray92"
        self.style = ThemedStyle()  # ttk.Style()

        self.style.configure(".", background=_bgcolor)
        self.style.configure(".", foreground=_fgcolor)
        self.style.configure(".", font="TkDefaultFont")
        self.style.map(".", background=[("selected", _compcolor), ("active", _ana2color)])

        self._font_count = 0
        self._def_font_size_get()
        self.lbLog_font_size = 9

        if sys.platform == "win32":
            # https://wiki.tcl-lang.org/page/List+of+ttk+Themes

            # self.style.theme_use("xpnative")
            self.overrideredirect(True)

        elif "linux" in sys.platform:
            # self.style.theme_use("clam")
            # self.style.theme_use("classic")
            # self.style.theme_use("default")
            self._font_count = -2
            self._def_font_size_set()

        elif sys.platform == "darwin":
            # self.style.theme_use("aqua")
            self._font_count = -2
            self._def_font_size_set()

        self.style.theme_use("scidblue")
        # self.style.theme_use("clearlooks")

        # self.geometry("835x485+341+107")
        self.geometry("0x0+0+0")
        # self._window_center(0,0)
        # self.minsize(130, 1)
        # self.maxsize(1604, 861)
        # self.resizable(False,  False)
        self.resizable(True, True)
        if DEBUG:
            if PY2:
                self.title("%s - PY2" % APP_TITLE)
            else:
                self.title("%s - PY3" % APP_TITLE)
        else:
            self.title(APP_TITLE)
        self.configure(background="#d9d9d9")
        self.configure(highlightbackground="#d9d9d9")
        self.configure(highlightcolor="black")

        self.serialports = tk.StringVar()
        self.menuSelectedButton = tk.StringVar()
        self.mode = tk.StringVar()
        self.tgCdcEmu_value = tk.IntVar()
        self.tgF2P_value = tk.IntVar()
        self.tgBlink_value = tk.IntVar()
        self.tgFogTurn_value = tk.IntVar()
        self.tgDrl_value = tk.IntVar()
        self.tgObcDisp_value = tk.IntVar()
        self.tgHeatFFB_value = tk.IntVar()
        self.tgCVMFold_value = tk.IntVar()
        self.tgBFD_value = tk.IntVar()
        self.tgRCam_value = tk.IntVar()
        self.tgNavZoom_value = tk.IntVar()
        self.tgF2PLow_value = tk.IntVar()
        self.tgF2PFogFront_value = tk.IntVar()
        self.tgF2PSeq_value = tk.IntVar()
        self.tgDrlParkFront_value = tk.IntVar()
        self.tgDrlFogFront_value = tk.IntVar()
        self.tgDrlParkTail_value = tk.IntVar()
        self.tgObcDispCoolant_value = tk.IntVar()
        self.tgObcDispSpeed_value = tk.IntVar()
        self.tgObcDispOil_value = tk.IntVar()
        self.tgObcDispVolt_value = tk.IntVar()
        self.tgObcDispFive_value = tk.IntVar()
        self.tgObcDispSix_value = tk.IntVar()
        self.tgObcDispSeven_value = tk.IntVar()
        self.tgObcDispEight_value = tk.IntVar()
        self.tgRxTx_value = tk.IntVar()
        self.tgRxTxRx_value = tk.IntVar()
        self.tgRxTxTx_value = tk.IntVar()
        self.spnAVRClock_hour_value = tk.IntVar()
        self.spnAVRClock_min_value = tk.IntVar()
        self.spnAVRClock_sec_value = tk.IntVar()
        self.spnAVRClock_day_value = tk.IntVar()
        self.spnAVRClock_month_value = tk.IntVar()
        self.spnAVRClock_year_value = tk.IntVar()

        self.spnTimezone_value = tk.IntVar()
        self.tgTimeSummer_value = tk.IntVar()
        self.spnTimeTmrOffset_value = tk.IntVar()


        self.cbSunrise_value = tk.StringVar()
        self.spnSunriseOffset_value = tk.IntVar()

        self.txtPositionLat_value = tk.StringVar()
        self.txtPositionLon_value = tk.StringVar()

        ########################################

        self.tgWelMsg_value = tk.IntVar()
        self.tgWelLight_value = tk.IntVar()
        self.tgLevLight_value = tk.IntVar()
        self.tgSenVal_value = tk.IntVar()
        self.txtWelMsg_value = tk.StringVar()
        self.lblWelMsgLen_value = tk.StringVar()
        self.tgWelLightCancelIgn3_value = tk.IntVar()
        self.tgWelLightCancelKeyIn_value = tk.IntVar()
        self.tgWelLightCancelDoor_value = tk.IntVar()
        self.tgWelLightCancelIgn1_value = tk.IntVar()
        self.tgLightParkFront_value = tk.IntVar()
        self.tgLightParkBack_value = tk.IntVar()
        self.tgLightParkBackInside_value = tk.IntVar()
        self.tgLightBeamLow_value = tk.IntVar()
        self.tgLightBeamHigh_value = tk.IntVar()
        self.tgLightTurnFront_value = tk.IntVar()
        self.tgLightTurnBack_value = tk.IntVar()
        self.tgLightTurnSide_value = tk.IntVar()
        self.tgLightOtherFogFront_value = tk.IntVar()
        self.tgLightOtherLicence_value = tk.IntVar()
        self.tgLightOtherReverse_value = tk.IntVar()
        self.tgLightOtherBrake_value = tk.IntVar()
        self.tgLightOtherAmbient_value = tk.IntVar()
        self.tgLightOtherFogBack_value = tk.IntVar()

        self.tgMirFoldInLev_value = tk.IntVar() # 0
        self.tgMirFoldInIgn_value = tk.IntVar() # 2
        self.tgMirFoldOutWel_value = tk.IntVar() # 1
        self.tgMirFoldOutIgn_value = tk.IntVar() # 3

        self.tgMirFoldInFFBDouble_value = tk.IntVar()  # 4
        self.tgMirFoldInFFBHold_value = tk.IntVar()  # 6
        self.tgMirFoldOutFFBDouble_value = tk.IntVar()  # 5
        self.tgMirFoldOutDoor_value = tk.IntVar()  # 7
        self.tgMirFoldInKeyRemove_value = tk.IntVar()  # 8
        self.tgMirFoldOutKeyInsert_value = tk.IntVar()  # 9
        self.tgMirFoldOutEngineStart_value = tk.IntVar()  # 10


        self.tgLockSpeed_value = tk.IntVar()
        self.tgRelock_value = tk.IntVar()
        self.tgUnlockDoor_value = tk.IntVar()
        self.tgUnlockBrake_value = tk.IntVar()
        self.tgUnlockGearP_value = tk.IntVar()
        self.tgUnlockIgn1_value = tk.IntVar()
        self.avr_mode = tk.IntVar()
        self.tgLog_value = tk.IntVar()
        self.tgLogTime_value = tk.IntVar()
        self.tgLogSend_value = tk.IntVar()
        self.tgAutScroll_value = tk.IntVar()
        self.tgUpload_value = tk.IntVar()
        self.lbLog_list = tk.StringVar()
        self.txtHexSelected_value = tk.StringVar()
        self.lblAvrTyp_value = tk.StringVar()
        self.lblHexBuild_value = tk.StringVar()
        self.rdLayout_value = tk.StringVar()
        self.progressBar_value = tk.IntVar()
        self.spnBlink_value = tk.IntVar()
        self.spnFogTurnSpeed_value = tk.IntVar()
        self.spnFogTurnTime_value = tk.IntVar()
        self.spnBFDTime_value = tk.IntVar()
        self.spnRCamSpeed_value = tk.IntVar()
        self.spnRCamTime_value = tk.IntVar()
        self.spnRxTxTime_value = tk.IntVar()
        self.spnTimeOff_value = tk.IntVar()
        self.spnWelLightTime_value = tk.IntVar()
        self.spnNtwkMode_value = tk.IntVar()
        self.spnLevLightTime_value = tk.IntVar()
        self.spnSenVal_value = tk.IntVar()
        self.spnLockSpeed_value = tk.IntVar()
        self.spnRelockTime_value = tk.IntVar()
        self.spnBlink_value = tk.IntVar()
        self.tgPdcScr_value = tk.IntVar()
        self.tgPdcScrFrontBack_value = tk.IntVar()
        self.tgPdcScrBack_value = tk.IntVar()
        self.tgLightSeq_value = tk.IntVar()
        self.tgLightSeqWel_value = tk.IntVar()
        self.tgLightSeqLev_value = tk.IntVar()

        self.tgReqsGmState_value = tk.IntVar()
        self.tgReqsLcmDim_value = tk.IntVar()
        self.tgReqsGmState_value.set(1)
        self.tgReqsLcmDim_value.set(1)

        self.tgCustomCmd_value = tk.IntVar()

        self.lblWelMsgLen_value.set("(0)")
        self.tgAutScroll_value.set(True)
        self.avr_mode.set(0)
        self.rdLayout_value.set("0")
        self.spnRxTxTime_value.set(12)
        self.spnTimeOff_value.set(3)
        self.tgWelLightCancelIgn3_value.set(True)
        self.spnWelLightTime_value.set(45)
        self.spnLevLightTime_value.set(15)
        self.spnSenVal_value.set(40)
        self.spnBlink_value.set(3)
        self.spnFogTurnSpeed_value.set(5)
        self.spnFogTurnTime_value.set(1)
        self.spnLockSpeed_value.set(6)
        self.spnRelockTime_value.set(3)
        self.txtWelMsg_value.set("AVR~IBus")
        self.txtWelMsg_change()

        value = datetime.now()

        self.spnAVRClock_hour_value.set(value.hour)
        self.spnAVRClock_min_value.set(value.minute)
        self.spnAVRClock_sec_value.set(value.second)
        self.spnAVRClock_day_value.set(value.day)
        self.spnAVRClock_month_value.set(value.month)
        self.spnAVRClock_year_value.set(value.year)

        self.spnTimezone_value.set(0)
        self.spnTimeTmrOffset_value.set(0)
        self.spnSunriseOffset_value.set(5.0)

        self.txtPositionLat_value.set(0.0)
        self.txtPositionLon_value.set(0.0)



        # self.progressBar_maxvalue.set("100.0")

        ### MENU BAR ##

        self.menubar = tk.Menu(self, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        self.configure(menu=self.menubar)

        self.sub_menu_file = tk.Menu(self,
                                     activebackground="#ececec",
                                     activeborderwidth=1,
                                     activeforeground="#000000",
                                     background="#d9d9d9",
                                     borderwidth=1,
                                     disabledforeground="#a3a3a3",
                                     foreground="#000000",
                                     tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu_file, label="File")
        self.sub_menu_file.add_command(label="Close", command=self._window_close)


        self.sub_menu1 = tk.Menu(self,
                                 activebackground="#ececec",
                                 activeborderwidth=1,
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 borderwidth=1,
                                 disabledforeground="#a3a3a3",
                                 foreground="#000000",
                                 tearoff=0)
        #self.sub_menu_file.add_cascade(menu=self.sub_menu1, label="NewCascade")

        self.sub_menu1.add_radiobutton(
            value="1",
            variable=self.menuSelectedButton,
            label="NewRadio")
        self.sub_menu1.add_radiobutton(
            value="2",
            variable=self.menuSelectedButton,
            label="NewRadio")
        self.sub_menu1.add_radiobutton(
            value="3",
            variable=self.menuSelectedButton,
            label="NewRadio")
        """self.sub_menu_file_interface = tk.Menu(self,
                                  activebackground="#ececec",
                                  activeborderwidth=1,
                                  activeforeground="#000000",
                                  background="#d9d9d9",
                                  borderwidth=1,
                                  disabledforeground="#a3a3a3",
                                  foreground="#000000",
                                  tearoff=0)
        self.sub_menu.add_cascade(menu=self.sub_menu_file_interface,
                                  label="Interface Mode")
        self.sub_menu_file_interface.add_radiobutton(
            value="0",
            variable=self.avr_mode,
            label="AVR")
        self.sub_menu_file_interface.add_radiobutton(
            value="1",
            variable=self.avr_mode,
            label="IBus")
        """
        self.sub_menu_layout = tk.Menu(self,
                                       activebackground="#ececec",
                                       activeborderwidth=1,
                                       activeforeground="#000000",
                                       background="#d9d9d9",
                                       borderwidth=1,
                                       disabledforeground="#a3a3a3",
                                       foreground="#000000",
                                       tearoff=0)

        self.menubar.add_cascade(menu=self.sub_menu_layout,
                                 label="Layout")
        self.sub_menu_layout.add_radiobutton(
            value="0",
            variable=self.rdLayout_value,
            command=self.rdLayoutDefault_click,
            label="Default")

        self.sub_menu_layout.add_radiobutton(
            value="1",
            variable=self.rdLayout_value,
            command=self.rdLayoutTerminal_click,
            label="Terminal")
        self.sub_menu_layout.add_radiobutton(
            value="2",
            variable=self.rdLayout_value,
            command=self.rdLayoutSend_click,
            label="Send")

        self.sub_menu_configuration = tk.Menu(self, activebackground="#ececec", activeborderwidth=1, activeforeground="#000000", background="#d9d9d9", borderwidth=1, disabledforeground="#a3a3a3", foreground="#000000", tearoff=0)
        self.sub_menu_configuration.add_command(label="Download Settings", state="disabled", command=self.btnDownloadSettings_click)
        self.sub_menu_configuration.add_command(label="Import Settings", state="disabled", command=self.configuration_import)
        self.sub_menu_configuration.add_command(label="Export Settings", state="disabled", command=self.configuration_export)
        self.sub_menu_configuration.add_command(label="Reset Settings", state="disabled", command=self.btnResetSettings_click)
        self.menubar.add_cascade(menu=self.sub_menu_configuration, label="Configuration")

        self.sub_menu_about = tk.Menu(self,
                                      activebackground="#ececec",
                                      activeborderwidth=1,
                                      activeforeground="#000000",
                                      background="#d9d9d9",
                                      borderwidth=1,
                                      disabledforeground="#a3a3a3",
                                      foreground="#000000",
                                      tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu_about, label="Help")
        self.sub_menu_about.add_command(label="About", command=self.btnMenuAbout_click)
        if not PY2:
            self.sub_menu_about.add_command(label="Map", command=self.btnMenuMapPicker_click)

        ### widgets ###

        self.cbSerialPorts = ttk.Combobox(self)
        self.cbSerialPorts.place(x=85, y=10, height=24, width=330)
        self.port_list = ["Select Device...", ]
        self.cbSerialPorts.configure(values=self.port_list)
        self.cbSerialPorts.configure(textvariable=self.serialports)
        self.cbSerialPorts.configure(takefocus="")
        self.cbSerialPorts.configure(state="readonly")
        self.cbSerialPorts.bind("<<ComboboxSelected>>", lambda e: self.focus())
        self.cbSerialPorts.current(0)

        self.btnOpen = tk.Button(self)
        self.btnOpen.configure(activebackground="#ececec")
        self.btnOpen.configure(activeforeground="#000000")
        self.btnOpen.configure(background="#d9d9d9")
        self.btnOpen.configure(disabledforeground="#a3a3a3")
        self.btnOpen.configure(foreground="#000000")
        self.btnOpen.configure(highlightbackground="#d9d9d9")
        self.btnOpen.configure(highlightcolor="black")
        self.btnOpen.place(x=420, y=10, height=24, width=40)
        self.btnOpen.configure(command=self.btnOpen_click)
        self.btnOpen.configure(text="""Open""")

        self.btnClose = tk.Button(self)
        self.btnClose.configure(activebackground="#ececec")
        self.btnClose.configure(activeforeground="#000000")
        self.btnClose.configure(background="#d9d9d9")
        self.btnClose.configure(disabledforeground="#a3a3a3")
        self.btnClose.configure(foreground="#000000")
        self.btnClose.configure(highlightbackground="#d9d9d9")
        self.btnClose.configure(highlightcolor="black")
        self.btnClose.configure(state="disabled")
        self.btnClose.place(x=465, y=10, height=24, width=40)
        self.btnClose.configure(command=self.btnClose_click)
        self.btnClose.configure(text="""Close""")

        """self.btnCustom = tk.Button(self)
        self.btnCustom.place(x=510, y=10, height=24, width=50)
        self.btnCustom.configure(activebackground="#ececec")
        self.btnCustom.configure(activeforeground="#000000")
        self.btnCustom.configure(background="#d9d9d9")
        self.btnCustom.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnCustom_click))
        self.btnCustom.configure(disabledforeground="#a3a3a3")
        self.btnCustom.configure(foreground="#000000")
        self.btnCustom.configure(highlightbackground="#d9d9d9")
        self.btnCustom.configure(highlightcolor="black")
        self.btnCustom.configure(text="Custom")
        """


        self.style.configure("TNotebook.Tab", background=_bgcolor)
        self.style.configure("TNotebook.Tab", foreground=_fgcolor)
        self.style.map("TNotebook.Tab", background=
        [("selected", _compcolor), ("active", _ana2color)])
        self.Tabs = ttk.Notebook(self)
        self.Tabs.place(x=10, y=40, height=370, width=550)

        self.tabSettings = tk.Frame(self.Tabs)
        self.Tabs.add(self.tabSettings, padding=3)
        self.Tabs.tab(len(self.Tabs.tabs()) - 1, text="Settings", compound="none", underline="-1", )
        self.tabSettings.configure(background="#d9d9d9")
        self.tabSettings.configure(highlightbackground="#d9d9d9")
        self.tabSettings.configure(highlightcolor="black")

        self.tabMain = tk.Frame(self.Tabs)
        self.Tabs.add(self.tabMain, padding=3)
        self.Tabs.tab(len(self.Tabs.tabs()) - 1, text="Features", compound="none", underline="-1", )
        self.tabMain.configure(background="#d9d9d9")
        self.tabMain.configure(highlightbackground="#d9d9d9")
        self.tabMain.configure(highlightcolor="black")

        self.tabWelcomeLeaving = tk.Frame(self.Tabs)
        self.Tabs.add(self.tabWelcomeLeaving, padding=3)
        self.Tabs.tab(len(self.Tabs.tabs()) - 1, text="Welome/Leaving", compound="none", underline="-1", )
        self.tabWelcomeLeaving.configure(background="#d9d9d9")
        self.tabWelcomeLeaving.configure(highlightbackground="#d9d9d9")
        self.tabWelcomeLeaving.configure(highlightcolor="black")

        self.tabCentralLock = tk.Frame(self.Tabs)
        self.Tabs.add(self.tabCentralLock, padding=3)
        self.Tabs.tab(len(self.Tabs.tabs()) - 1, text="Central Lock", compound="none", underline="-1", )
        self.tabCentralLock.configure(background="#d9d9d9")
        self.tabCentralLock.configure(highlightbackground="#d9d9d9")
        self.tabCentralLock.configure(highlightcolor="black")

        self.tabCommands = tk.Frame(self.Tabs)
        self.Tabs.add(self.tabCommands, padding=3)
        self.Tabs.tab(len(self.Tabs.tabs()) - 1, text="Commands", compound="none", underline="-1", )
        self.tabCommands.configure(background="#d9d9d9")
        self.tabCommands.configure(highlightbackground="#d9d9d9")
        self.tabCommands.configure(highlightcolor="black")

        self.tabLogging = tk.Frame(self.Tabs)
        self.Tabs.add(self.tabLogging, padding=3)
        self.Tabs.tab(len(self.Tabs.tabs()) - 1, text="Testing", compound="none", underline="-1", )
        self.tabLogging.configure(background="#d9d9d9")
        self.tabLogging.configure(highlightbackground="#d9d9d9")
        self.tabLogging.configure(highlightcolor="black")

        self.tabFirmware = tk.Frame(self.Tabs)
        self.Tabs.add(self.tabFirmware, padding=3)
        self.Tabs.tab(len(self.Tabs.tabs()) - 1, text="Firmware", compound="none", underline="-1", )
        self.tabFirmware.configure(background="#d9d9d9")
        self.tabFirmware.configure(highlightbackground="#d9d9d9")
        self.tabFirmware.configure(highlightcolor="black")

        self.tabBluetooth = tk.Frame(self.Tabs)
        self.Tabs.add(self.tabBluetooth, padding=3)
        self.Tabs.tab(len(self.Tabs.tabs()) - 1, text="Bluetooth", compound="none", underline="-1", )
        self.tabBluetooth.configure(background="#d9d9d9")
        self.tabBluetooth.configure(highlightbackground="#d9d9d9")
        self.tabBluetooth.configure(highlightcolor="black")

        self.tgCdcEmu = tk.Checkbutton(self.tabMain)
        self.tgCdcEmu.place(x=10, y=10, height=24, width=25)
        self.tgCdcEmu.configure(activebackground="#d9d9d9")
        self.tgCdcEmu.configure(activeforeground="#000000")
        self.tgCdcEmu.configure(background="#d9d9d9")
        self.tgCdcEmu.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgCdcEmu_click))
        self.tgCdcEmu.configure(disabledforeground="#a3a3a3")
        self.tgCdcEmu.configure(foreground="#000000")
        self.tgCdcEmu.configure(highlightbackground="#d9d9d9")
        self.tgCdcEmu.configure(highlightcolor="black")
        self.tgCdcEmu.configure(indicatoron="0")
        self.tgCdcEmu.configure(justify="left")
        self.tgCdcEmu.configure(selectcolor="#d9d9d9")
        self.tgCdcEmu.configure(variable=self.tgCdcEmu_value)
        self.tgCdcEmu.configure(selectcolor="#8080ff")

        self.tgF2P = tk.Checkbutton(self.tabMain)
        self.tgF2P.place(x=10, y=40, height=24, width=25)
        self.tgF2P.configure(activebackground="#d9d9d9")
        self.tgF2P.configure(activeforeground="#000000")
        self.tgF2P.configure(background="#d9d9d9")
        self.tgF2P.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgF2P_click))
        self.tgF2P.configure(disabledforeground="#a3a3a3")
        self.tgF2P.configure(foreground="#000000")
        self.tgF2P.configure(highlightbackground="#d9d9d9")
        self.tgF2P.configure(highlightcolor="black")
        self.tgF2P.configure(indicatoron="0")
        self.tgF2P.configure(justify="left")
        self.tgF2P.configure(selectcolor="#d9d9d9")
        self.tgF2P.configure(variable=self.tgF2P_value)
        self.tgF2P.configure(selectcolor="#8080ff")

        self.tgBlink = tk.Checkbutton(self.tabMain)
        self.tgBlink.place(x=10, y=70, height=24, width=25)
        self.tgBlink.configure(activebackground="#d9d9d9")
        self.tgBlink.configure(activeforeground="#000000")
        self.tgBlink.configure(background="#d9d9d9")
        self.tgBlink.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgBlink_click))
        self.tgBlink.configure(disabledforeground="#a3a3a3")
        self.tgBlink.configure(foreground="#000000")
        self.tgBlink.configure(highlightbackground="#d9d9d9")
        self.tgBlink.configure(highlightcolor="black")
        self.tgBlink.configure(indicatoron="0")
        self.tgBlink.configure(justify="left")
        self.tgBlink.configure(selectcolor="#d9d9d9")
        self.tgBlink.configure(variable=self.tgBlink_value)
        self.tgBlink.configure(selectcolor="#8080ff")

        self.tgFogTurn = tk.Checkbutton(self.tabMain)
        self.tgFogTurn.place(x=10, y=100, height=24, width=25)
        self.tgFogTurn.configure(activebackground="#d9d9d9")
        self.tgFogTurn.configure(activeforeground="#000000")
        self.tgFogTurn.configure(background="#d9d9d9")
        self.tgFogTurn.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgFogTurn_click))
        self.tgFogTurn.configure(disabledforeground="#a3a3a3")
        self.tgFogTurn.configure(foreground="#000000")
        self.tgFogTurn.configure(highlightbackground="#d9d9d9")
        self.tgFogTurn.configure(highlightcolor="black")
        self.tgFogTurn.configure(indicatoron="0")
        self.tgFogTurn.configure(justify="left")
        self.tgFogTurn.configure(selectcolor="#d9d9d9")
        self.tgFogTurn.configure(variable=self.tgFogTurn_value)
        self.tgFogTurn.configure(selectcolor="#8080ff")



        self.tgBFD = tk.Checkbutton(self.tabMain)
        self.tgBFD.place(x=10, y=250, height=24, width=25)
        self.tgBFD.configure(activebackground="#d9d9d9")
        self.tgBFD.configure(activeforeground="#000000")
        self.tgBFD.configure(background="#d9d9d9")
        self.tgBFD.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgBFD_click))
        self.tgBFD.configure(disabledforeground="#a3a3a3")
        self.tgBFD.configure(foreground="#000000")
        self.tgBFD.configure(highlightbackground="#d9d9d9")
        self.tgBFD.configure(highlightcolor="black")
        self.tgBFD.configure(indicatoron="0")
        self.tgBFD.configure(justify="left")
        self.tgBFD.configure(selectcolor="#d9d9d9")
        self.tgBFD.configure(variable=self.tgBFD_value)
        self.tgBFD.configure(selectcolor="#8080ff")

        self.tgRCam = tk.Checkbutton(self.tabMain)
        self.tgRCam.place(x=10, y=220, height=24, width=25)
        self.tgRCam.configure(activebackground="#d9d9d9")
        self.tgRCam.configure(activeforeground="#000000")
        self.tgRCam.configure(background="#d9d9d9")
        self.tgRCam.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgRCam_click))
        self.tgRCam.configure(disabledforeground="#a3a3a3")
        self.tgRCam.configure(foreground="#000000")
        self.tgRCam.configure(highlightbackground="#d9d9d9")
        self.tgRCam.configure(highlightcolor="black")
        self.tgRCam.configure(indicatoron="0")
        self.tgRCam.configure(justify="left")
        self.tgRCam.configure(selectcolor="#d9d9d9")
        self.tgRCam.configure(variable=self.tgRCam_value)
        self.tgRCam.configure(selectcolor="#8080ff")



        self.Label1 = tk.Label(self.tabMain)
        self.Label1.place(x=40, y=10, height=24, width=75)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(relief="groove")
        self.Label1.configure(text="""CDC EMU""")

        self.Label1_1 = tk.Label(self.tabMain)
        self.Label1_1.place(x=40, y=40, height=24, width=75)
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(activeforeground="black")
        self.Label1_1.configure(background="#d9d9d9")
        self.Label1_1.configure(disabledforeground="#a3a3a3")
        self.Label1_1.configure(foreground="#000000")
        self.Label1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1.configure(highlightcolor="black")
        self.Label1_1.configure(relief="groove")
        self.Label1_1.configure(text="""F2P""")

        self.Label1_1_1 = tk.Label(self.tabMain)
        self.Label1_1_1.place(x=40, y=70, height=24, width=75)
        self.Label1_1_1.configure(activebackground="#f9f9f9")
        self.Label1_1_1.configure(activeforeground="black")
        self.Label1_1_1.configure(background="#d9d9d9")
        self.Label1_1_1.configure(disabledforeground="#a3a3a3")
        self.Label1_1_1.configure(foreground="#000000")
        self.Label1_1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1_1.configure(highlightcolor="black")
        self.Label1_1_1.configure(relief="groove")
        self.Label1_1_1.configure(text="""BLINK""")

        self.Label1_1_2 = tk.Label(self.tabMain)
        self.Label1_1_2.place(x=40, y=100, height=24, width=75)
        self.Label1_1_2.configure(activebackground="#f9f9f9")
        self.Label1_1_2.configure(activeforeground="black")
        self.Label1_1_2.configure(background="#d9d9d9")
        self.Label1_1_2.configure(disabledforeground="#a3a3a3")
        self.Label1_1_2.configure(foreground="#000000")
        self.Label1_1_2.configure(highlightbackground="#d9d9d9")
        self.Label1_1_2.configure(highlightcolor="black")
        self.Label1_1_2.configure(relief="groove")
        self.Label1_1_2.configure(text="""FOG TURN""")

        self.Label1_1_7 = tk.Label(self.tabMain)
        self.Label1_1_7.place(x=40, y=250, height=24, width=75)
        self.Label1_1_7.configure(activebackground="#f9f9f9")
        self.Label1_1_7.configure(activeforeground="black")
        self.Label1_1_7.configure(background="#d9d9d9")
        self.Label1_1_7.configure(disabledforeground="#a3a3a3")
        self.Label1_1_7.configure(foreground="#000000")
        self.Label1_1_7.configure(highlightbackground="#d9d9d9")
        self.Label1_1_7.configure(highlightcolor="black")
        self.Label1_1_7.configure(relief="groove")
        self.Label1_1_7.configure(text="""BFD""")

        self.Label1_1_8 = tk.Label(self.tabMain)
        self.Label1_1_8.place(x=40, y=220, height=24, width=75)
        self.Label1_1_8.configure(activebackground="#f9f9f9")
        self.Label1_1_8.configure(activeforeground="black")
        self.Label1_1_8.configure(background="#d9d9d9")
        self.Label1_1_8.configure(disabledforeground="#a3a3a3")
        self.Label1_1_8.configure(foreground="#000000")
        self.Label1_1_8.configure(highlightbackground="#d9d9d9")
        self.Label1_1_8.configure(highlightcolor="black")
        self.Label1_1_8.configure(relief="groove")
        self.Label1_1_8.configure(text="""RCAM""")



        self.btnCdcEmu = tk.Button(self.tabMain)
        self.btnCdcEmu.place(x=510, y=10, height=24, width=25)
        self.btnCdcEmu.configure(activebackground="#ececec")
        self.btnCdcEmu.configure(activeforeground="#000000")
        self.btnCdcEmu.configure(background="#d9d9d9")
        self.btnCdcEmu.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnCdcEmu_click))
        self.btnCdcEmu.configure(disabledforeground="#a3a3a3")
        self.btnCdcEmu.configure(font="-family {Tahoma} -size 8")
        self.btnCdcEmu.configure(foreground="#000000")
        self.btnCdcEmu.configure(highlightbackground="#d9d9d9")
        self.btnCdcEmu.configure(highlightcolor="black")
        self.btnCdcEmu.configure(text="""|>""")

        self.btnF2P = tk.Button(self.tabMain)
        self.btnF2P.place(x=510, y=40, height=24, width=25)
        self.btnF2P.configure(activebackground="#ececec")
        self.btnF2P.configure(activeforeground="#000000")
        self.btnF2P.configure(background="#d9d9d9")
        self.btnF2P.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnF2P_click))
        self.btnF2P.configure(disabledforeground="#a3a3a3")
        self.btnF2P.configure(font="-family {Tahoma} -size 8")
        self.btnF2P.configure(foreground="#000000")
        self.btnF2P.configure(highlightbackground="#d9d9d9")
        self.btnF2P.configure(highlightcolor="black")
        self.btnF2P.configure(text="""|>""")

        self.btnBlink = tk.Button(self.tabMain)
        self.btnBlink.place(x=510, y=70, height=24, width=25)
        self.btnBlink.configure(activebackground="#ececec")
        self.btnBlink.configure(activeforeground="#000000")
        self.btnBlink.configure(background="#d9d9d9")
        self.btnBlink.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnBlink_click))
        self.btnBlink.configure(disabledforeground="#a3a3a3")
        self.btnBlink.configure(font="-family {Tahoma} -size 8")
        self.btnBlink.configure(foreground="#000000")
        self.btnBlink.configure(highlightbackground="#d9d9d9")
        self.btnBlink.configure(highlightcolor="black")
        self.btnBlink.configure(text="""|>""")

        self.btnFogTurn = tk.Button(self.tabMain)
        self.btnFogTurn.place(x=510, y=100, height=24, width=25)
        self.btnFogTurn.configure(activebackground="#ececec")
        self.btnFogTurn.configure(activeforeground="#000000")
        self.btnFogTurn.configure(background="#d9d9d9")
        self.btnFogTurn.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnFogTurn_click))
        self.btnFogTurn.configure(disabledforeground="#a3a3a3")
        self.btnFogTurn.configure(font="-family {Tahoma} -size 8")
        self.btnFogTurn.configure(foreground="#000000")
        self.btnFogTurn.configure(highlightbackground="#d9d9d9")
        self.btnFogTurn.configure(highlightcolor="black")
        self.btnFogTurn.configure(text="""|>""")


        self.tgHeatFFB = tk.Checkbutton(self.tabMain)
        self.tgHeatFFB.place(x=10, y=190, height=24, width=25)
        self.tgHeatFFB.configure(activebackground="#d9d9d9")
        self.tgHeatFFB.configure(activeforeground="#000000")
        self.tgHeatFFB.configure(background="#d9d9d9")
        self.tgHeatFFB.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgHeatFFB_click))
        self.tgHeatFFB.configure(disabledforeground="#a3a3a3")
        self.tgHeatFFB.configure(foreground="#000000")
        self.tgHeatFFB.configure(highlightbackground="#d9d9d9")
        self.tgHeatFFB.configure(highlightcolor="black")
        self.tgHeatFFB.configure(indicatoron="0")
        self.tgHeatFFB.configure(justify="left")
        self.tgHeatFFB.configure(selectcolor="#d9d9d9")
        self.tgHeatFFB.configure(variable=self.tgHeatFFB_value)
        self.tgHeatFFB.configure(selectcolor="#8080ff")

        self.Label1_1_5 = tk.Label(self.tabMain)
        self.Label1_1_5.place(x=40, y=190, height=24, width=75)
        self.Label1_1_5.configure(activebackground="#f9f9f9")
        self.Label1_1_5.configure(activeforeground="black")
        self.Label1_1_5.configure(background="#d9d9d9")
        self.Label1_1_5.configure(disabledforeground="#a3a3a3")
        self.Label1_1_5.configure(foreground="#000000")
        self.Label1_1_5.configure(highlightbackground="#d9d9d9")
        self.Label1_1_5.configure(highlightcolor="black")
        self.Label1_1_5.configure(relief="groove")
        self.Label1_1_5.configure(text="""HEAT FFB""")

        self.btnHeatFFB = tk.Button(self.tabMain)
        self.btnHeatFFB.place(x=120, y=190, height=24, width=25)
        self.btnHeatFFB.configure(activebackground="#ececec")
        self.btnHeatFFB.configure(activeforeground="#000000")
        self.btnHeatFFB.configure(background="#d9d9d9")
        self.btnHeatFFB.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnHeatFFB_click))
        self.btnHeatFFB.configure(disabledforeground="#a3a3a3")
        self.btnHeatFFB.configure(font="-family {Tahoma} -size 8")
        self.btnHeatFFB.configure(foreground="#000000")
        self.btnHeatFFB.configure(highlightbackground="#d9d9d9")
        self.btnHeatFFB.configure(highlightcolor="black")
        self.btnHeatFFB.configure(text="""|>""")

        self.tgCVMFold = tk.Checkbutton(self.tabMain)
        self.tgCVMFold.place(x=195, y=190, height=24, width=25)
        self.tgCVMFold.configure(activebackground="#d9d9d9")
        self.tgCVMFold.configure(activeforeground="#000000")
        self.tgCVMFold.configure(background="#d9d9d9")
        self.tgCVMFold.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgCVMFold_click))
        self.tgCVMFold.configure(disabledforeground="#a3a3a3")
        self.tgCVMFold.configure(foreground="#000000")
        self.tgCVMFold.configure(highlightbackground="#d9d9d9")
        self.tgCVMFold.configure(highlightcolor="black")
        self.tgCVMFold.configure(indicatoron="0")
        self.tgCVMFold.configure(justify="left")
        self.tgCVMFold.configure(selectcolor="#d9d9d9")
        self.tgCVMFold.configure(variable=self.tgCVMFold_value)
        self.tgCVMFold.configure(selectcolor="#8080ff")

        self.Label1_1_6 = tk.Label(self.tabMain)
        self.Label1_1_6.place(x=225, y=190, height=24, width=75)
        self.Label1_1_6.configure(activebackground="#f9f9f9")
        self.Label1_1_6.configure(activeforeground="black")
        self.Label1_1_6.configure(background="#d9d9d9")
        self.Label1_1_6.configure(disabledforeground="#a3a3a3")
        self.Label1_1_6.configure(foreground="#000000")
        self.Label1_1_6.configure(highlightbackground="#d9d9d9")
        self.Label1_1_6.configure(highlightcolor="black")
        self.Label1_1_6.configure(relief="groove")
        self.Label1_1_6.configure(text="""CVM FOLD""")

        self.btnCVMFold = tk.Button(self.tabMain)
        self.btnCVMFold.place(x=305, y=190, height=24, width=25)
        self.btnCVMFold.configure(activebackground="#ececec")
        self.btnCVMFold.configure(activeforeground="#000000")
        self.btnCVMFold.configure(background="#d9d9d9")
        self.btnCVMFold.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnCVMFold_click))
        self.btnCVMFold.configure(disabledforeground="#a3a3a3")
        self.btnCVMFold.configure(font="-family {Tahoma} -size 8")
        self.btnCVMFold.configure(foreground="#000000")
        self.btnCVMFold.configure(highlightbackground="#d9d9d9")
        self.btnCVMFold.configure(highlightcolor="black")
        self.btnCVMFold.configure(text="""|>""")

        self.tgNavZoom = tk.Checkbutton(self.tabMain)
        self.tgNavZoom.place(x=400, y=190, height=24, width=25)
        self.tgNavZoom.configure(activebackground="#d9d9d9")
        self.tgNavZoom.configure(activeforeground="#000000")
        self.tgNavZoom.configure(background="#d9d9d9")
        self.tgNavZoom.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgNavZoom_click))
        self.tgNavZoom.configure(disabledforeground="#a3a3a3")
        self.tgNavZoom.configure(foreground="#000000")
        self.tgNavZoom.configure(highlightbackground="#d9d9d9")
        self.tgNavZoom.configure(highlightcolor="black")
        self.tgNavZoom.configure(indicatoron="0")
        self.tgNavZoom.configure(justify="left")
        self.tgNavZoom.configure(selectcolor="#d9d9d9")
        self.tgNavZoom.configure(variable=self.tgNavZoom_value)
        self.tgNavZoom.configure(selectcolor="#8080ff")

        self.Label1_1_9 = tk.Label(self.tabMain)
        self.Label1_1_9.place(x=430, y=190, height=24, width=75)
        self.Label1_1_9.configure(activebackground="#f9f9f9")
        self.Label1_1_9.configure(activeforeground="black")
        self.Label1_1_9.configure(background="#d9d9d9")
        self.Label1_1_9.configure(disabledforeground="#a3a3a3")
        self.Label1_1_9.configure(foreground="#000000")
        self.Label1_1_9.configure(highlightbackground="#d9d9d9")
        self.Label1_1_9.configure(highlightcolor="black")
        self.Label1_1_9.configure(relief="groove")
        self.Label1_1_9.configure(text="""NAV ZOOM""")

        self.btnNavZoom = tk.Button(self.tabMain)
        self.btnNavZoom.place(x=510, y=190, height=24, width=25)
        self.btnNavZoom.configure(activebackground="#ececec")
        self.btnNavZoom.configure(activeforeground="#000000")
        self.btnNavZoom.configure(background="#d9d9d9")
        self.btnNavZoom.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnNavZoom_click))
        self.btnNavZoom.configure(disabledforeground="#a3a3a3")
        self.btnNavZoom.configure(font="-family {Tahoma} -size 8")
        self.btnNavZoom.configure(foreground="#000000")
        self.btnNavZoom.configure(highlightbackground="#d9d9d9")
        self.btnNavZoom.configure(highlightcolor="black")
        self.btnNavZoom.configure(text="""|>""")

        self.btnBFD = tk.Button(self.tabMain)
        self.btnBFD.place(x=510, y=250, height=24, width=25)
        self.btnBFD.configure(activebackground="#ececec")
        self.btnBFD.configure(activeforeground="#000000")
        self.btnBFD.configure(background="#d9d9d9")
        self.btnBFD.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnBFD_click))
        self.btnBFD.configure(disabledforeground="#a3a3a3")
        self.btnBFD.configure(font="-family {Tahoma} -size 8")
        self.btnBFD.configure(foreground="#000000")
        self.btnBFD.configure(highlightbackground="#d9d9d9")
        self.btnBFD.configure(highlightcolor="black")
        self.btnBFD.configure(text="""|>""")

        self.btnRCam = tk.Button(self.tabMain)
        self.btnRCam.place(x=510, y=220, height=24, width=25)
        self.btnRCam.configure(activebackground="#ececec")
        self.btnRCam.configure(activeforeground="#000000")
        self.btnRCam.configure(background="#d9d9d9")
        self.btnRCam.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnRCam_click))
        self.btnRCam.configure(disabledforeground="#a3a3a3")
        self.btnRCam.configure(font="-family {Tahoma} -size 8")
        self.btnRCam.configure(foreground="#000000")
        self.btnRCam.configure(highlightbackground="#d9d9d9")
        self.btnRCam.configure(highlightcolor="black")
        self.btnRCam.configure(text="""|>""")



        self.tgF2PLow = tk.Checkbutton(self.tabMain)
        self.tgF2PLow.place(x=120, y=40, height=24, width=40)
        self.tgF2PLow.configure(activebackground="#d9d9d9")
        self.tgF2PLow.configure(activeforeground="#000000")
        self.tgF2PLow.configure(background="#d9d9d9")
        self.tgF2PLow.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgF2PLow_click))
        self.tgF2PLow.configure(disabledforeground="#a3a3a3")
        self.tgF2PLow.configure(foreground="#000000")
        self.tgF2PLow.configure(highlightbackground="#d9d9d9")
        self.tgF2PLow.configure(highlightcolor="black")
        self.tgF2PLow.configure(indicatoron="0")
        self.tgF2PLow.configure(justify="left")
        self.tgF2PLow.configure(selectcolor="#d9d9d9")
        self.tgF2PLow.configure(text="""Low""")
        self.tgF2PLow.configure(variable=self.tgF2PLow_value)

        self.tgF2PFogFront = tk.Checkbutton(self.tabMain)
        self.tgF2PFogFront.place(x=165, y=40, height=24, width=60)
        self.tgF2PFogFront.configure(activebackground="#d9d9d9")
        self.tgF2PFogFront.configure(activeforeground="#000000")
        self.tgF2PFogFront.configure(background="#d9d9d9")
        self.tgF2PFogFront.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgF2PFogFront_click))
        self.tgF2PFogFront.configure(disabledforeground="#a3a3a3")
        self.tgF2PFogFront.configure(foreground="#000000")
        self.tgF2PFogFront.configure(highlightbackground="#d9d9d9")
        self.tgF2PFogFront.configure(highlightcolor="black")
        self.tgF2PFogFront.configure(indicatoron="0")
        self.tgF2PFogFront.configure(justify="left")
        self.tgF2PFogFront.configure(selectcolor="#d9d9d9")
        self.tgF2PFogFront.configure(text="""Fog Front""")
        self.tgF2PFogFront.configure(variable=self.tgF2PFogFront_value)

        self.tgF2PSeq = tk.Checkbutton(self.tabMain)
        self.tgF2PSeq.place(x=230, y=40, height=24, width=40)
        self.tgF2PSeq.configure(activebackground="#d9d9d9")
        self.tgF2PSeq.configure(activeforeground="#000000")
        self.tgF2PSeq.configure(background="#d9d9d9")
        self.tgF2PSeq.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgF2PSeq_click))
        self.tgF2PSeq.configure(disabledforeground="#a3a3a3")
        self.tgF2PSeq.configure(foreground="#000000")
        self.tgF2PSeq.configure(highlightbackground="#d9d9d9")
        self.tgF2PSeq.configure(highlightcolor="black")
        self.tgF2PSeq.configure(indicatoron="0")
        self.tgF2PSeq.configure(justify="left")
        self.tgF2PSeq.configure(selectcolor="#d9d9d9")
        self.tgF2PSeq.configure(text="""Seq""")
        self.tgF2PSeq.configure(variable=self.tgF2PSeq_value)

        self.spnBlink = tk.Spinbox(self.tabMain, from_=2.0, to=7.0)
        self.spnBlink.place(x=120, y=70, height=24, width=45)
        self.spnBlink.configure(activebackground="#f9f9f9")
        self.spnBlink.configure(background="white")
        self.spnBlink.configure(borderwidth="2")
        self.spnBlink.configure(buttonbackground="#d9d9d9")
        self.spnBlink.bind("<ButtonRelease-1>", lambda e: self.after(1, self.spnBlink_click))
        self.spnBlink.configure(disabledforeground="#a3a3a3")
        self.spnBlink.configure(font="TkDefaultFont")
        self.spnBlink.configure(foreground="black")
        self.spnBlink.configure(highlightbackground="black")
        self.spnBlink.configure(highlightcolor="black")
        self.spnBlink.configure(insertbackground="black")
        self.spnBlink.configure(justify="right")
        self.spnBlink.configure(selectbackground="blue")
        self.spnBlink.configure(selectforeground="white")
        self.spnBlink.configure(validate="all")
        self.spnBlink.configure(textvariable=self.spnBlink_value)

        self.spnFogTurnSpeed = tk.Spinbox(self.tabMain, from_=5.0, to=255.0)
        self.spnFogTurnSpeed.place(x=120, y=100, height=24, width=45)
        self.spnFogTurnSpeed.configure(activebackground="#f9f9f9")
        self.spnFogTurnSpeed.configure(background="white")
        self.spnFogTurnSpeed.configure(borderwidth="2")
        self.spnFogTurnSpeed.configure(buttonbackground="#d9d9d9")
        self.spnFogTurnSpeed.bind("<ButtonRelease-1>", lambda e: self.after(1, self.spnFogTurnSpeed_click))
        self.spnFogTurnSpeed.configure(disabledforeground="#a3a3a3")
        self.spnFogTurnSpeed.configure(font="TkDefaultFont")
        self.spnFogTurnSpeed.configure(foreground="black")
        self.spnFogTurnSpeed.configure(highlightbackground="black")
        self.spnFogTurnSpeed.configure(highlightcolor="black")
        self.spnFogTurnSpeed.configure(increment="5.0")
        self.spnFogTurnSpeed.configure(insertbackground="black")
        self.spnFogTurnSpeed.configure(justify="right")
        self.spnFogTurnSpeed.configure(selectbackground="blue")
        self.spnFogTurnSpeed.configure(selectforeground="white")
        self.spnFogTurnSpeed.configure(textvariable=self.spnFogTurnSpeed_value)

        self.Label2 = tk.Label(self.tabMain)
        self.Label2.place(x=170, y=100, height=24, width=35)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text="""km/h""")

        self.spnFogTurnTime = tk.Spinbox(self.tabMain, from_=1.0, to=15.0)
        self.spnFogTurnTime.place(x=210, y=100, height=24, width=45)
        self.spnFogTurnTime.configure(activebackground="#f9f9f9")
        self.spnFogTurnTime.configure(background="white")
        self.spnFogTurnTime.configure(borderwidth="2")
        self.spnFogTurnTime.configure(buttonbackground="#d9d9d9")
        self.spnFogTurnTime.bind("<ButtonRelease-1>", lambda e: self.after(1, self.spnFogTurnTime_click))
        self.spnFogTurnTime.configure(disabledforeground="#a3a3a3")
        self.spnFogTurnTime.configure(font="TkDefaultFont")
        self.spnFogTurnTime.configure(foreground="black")
        self.spnFogTurnTime.configure(highlightbackground="black")
        self.spnFogTurnTime.configure(highlightcolor="black")
        self.spnFogTurnTime.configure(insertbackground="black")
        self.spnFogTurnTime.configure(justify="right")
        self.spnFogTurnTime.configure(selectbackground="blue")
        self.spnFogTurnTime.configure(selectforeground="white")
        self.spnFogTurnTime.configure(validate="all")
        self.spnFogTurnTime.configure(textvariable=self.spnFogTurnTime_value)

        self.Label2_1 = tk.Label(self.tabMain)
        self.Label2_1.place(x=255, y=100, height=24, width=15)
        self.Label2_1.configure(activebackground="#f9f9f9")
        self.Label2_1.configure(activeforeground="black")
        self.Label2_1.configure(background="#d9d9d9")
        self.Label2_1.configure(disabledforeground="#a3a3a3")
        self.Label2_1.configure(foreground="#000000")
        self.Label2_1.configure(highlightbackground="#d9d9d9")
        self.Label2_1.configure(highlightcolor="black")
        self.Label2_1.configure(text="""s""")



        self.tgDrl = tk.Checkbutton(self.tabMain)
        self.tgDrl.place(x=10, y=130, height=24, width=25)
        self.tgDrl.configure(activebackground="#d9d9d9")
        self.tgDrl.configure(activeforeground="#000000")
        self.tgDrl.configure(background="#d9d9d9")
        self.tgDrl.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgDrl_click))
        self.tgDrl.configure(disabledforeground="#a3a3a3")
        self.tgDrl.configure(foreground="#000000")
        self.tgDrl.configure(highlightbackground="#d9d9d9")
        self.tgDrl.configure(highlightcolor="black")
        self.tgDrl.configure(indicatoron="0")
        self.tgDrl.configure(justify="left")
        self.tgDrl.configure(selectcolor="#d9d9d9")
        self.tgDrl.configure(variable=self.tgDrl_value)
        self.tgDrl.configure(selectcolor="#8080ff")

        self.Label1_1_3 = tk.Label(self.tabMain)
        self.Label1_1_3.place(x=40, y=130, height=24, width=75)
        self.Label1_1_3.configure(activebackground="#f9f9f9")
        self.Label1_1_3.configure(activeforeground="black")
        self.Label1_1_3.configure(background="#d9d9d9")
        self.Label1_1_3.configure(disabledforeground="#a3a3a3")
        self.Label1_1_3.configure(foreground="#000000")
        self.Label1_1_3.configure(highlightbackground="#d9d9d9")
        self.Label1_1_3.configure(highlightcolor="black")
        self.Label1_1_3.configure(relief="groove")
        self.Label1_1_3.configure(text="""DRL""")

        self.tgDrlParkFront = tk.Checkbutton(self.tabMain)
        self.tgDrlParkFront.place(x=120, y=130, height=24, width=60)
        self.tgDrlParkFront.configure(activebackground="#d9d9d9")
        self.tgDrlParkFront.configure(activeforeground="#000000")
        self.tgDrlParkFront.configure(background="#d9d9d9")
        self.tgDrlParkFront.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgDrlParkFront_click))
        self.tgDrlParkFront.configure(disabledforeground="#a3a3a3")
        self.tgDrlParkFront.configure(foreground="#000000")
        self.tgDrlParkFront.configure(highlightbackground="#d9d9d9")
        self.tgDrlParkFront.configure(highlightcolor="black")
        self.tgDrlParkFront.configure(indicatoron="0")
        self.tgDrlParkFront.configure(justify="left")
        self.tgDrlParkFront.configure(selectcolor="#d9d9d9")
        self.tgDrlParkFront.configure(text="""Park Front""")
        self.tgDrlParkFront.configure(variable=self.tgDrlParkFront_value)

        self.tgDrlFogFront = tk.Checkbutton(self.tabMain)
        self.tgDrlFogFront.place(x=185, y=130, height=24, width=60)
        self.tgDrlFogFront.configure(activebackground="#d9d9d9")
        self.tgDrlFogFront.configure(activeforeground="#000000")
        self.tgDrlFogFront.configure(background="#d9d9d9")
        self.tgDrlFogFront.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgDrlFogFront_click))
        self.tgDrlFogFront.configure(disabledforeground="#a3a3a3")
        self.tgDrlFogFront.configure(foreground="#000000")
        self.tgDrlFogFront.configure(highlightbackground="#d9d9d9")
        self.tgDrlFogFront.configure(highlightcolor="black")
        self.tgDrlFogFront.configure(indicatoron="0")
        self.tgDrlFogFront.configure(justify="left")
        self.tgDrlFogFront.configure(selectcolor="#d9d9d9")
        self.tgDrlFogFront.configure(text="""Fog Front""")
        self.tgDrlFogFront.configure(variable=self.tgDrlFogFront_value)

        self.tgDrlParkTail = tk.Checkbutton(self.tabMain)
        self.tgDrlParkTail.place(x=250, y=130, height=24, width=60)
        self.tgDrlParkTail.configure(activebackground="#d9d9d9")
        self.tgDrlParkTail.configure(activeforeground="#000000")
        self.tgDrlParkTail.configure(background="#d9d9d9")
        self.tgDrlParkTail.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgDrlParkTail_click))
        self.tgDrlParkTail.configure(disabledforeground="#a3a3a3")
        self.tgDrlParkTail.configure(foreground="#000000")
        self.tgDrlParkTail.configure(highlightbackground="#d9d9d9")
        self.tgDrlParkTail.configure(highlightcolor="black")
        self.tgDrlParkTail.configure(indicatoron="0")
        self.tgDrlParkTail.configure(justify="left")
        self.tgDrlParkTail.configure(selectcolor="#d9d9d9")
        self.tgDrlParkTail.configure(text="""Park Tail""")
        self.tgDrlParkTail.configure(variable=self.tgDrlParkTail_value)

        self.btnDrl = tk.Button(self.tabMain)
        self.btnDrl.place(x=510, y=130, height=24, width=25)
        self.btnDrl.configure(activebackground="#ececec")
        self.btnDrl.configure(activeforeground="#000000")
        self.btnDrl.configure(background="#d9d9d9")
        self.btnDrl.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnDrl_click))
        self.btnDrl.configure(disabledforeground="#a3a3a3")
        self.btnDrl.configure(font="-family {Tahoma} -size 8")
        self.btnDrl.configure(foreground="#000000")
        self.btnDrl.configure(highlightbackground="#d9d9d9")
        self.btnDrl.configure(highlightcolor="black")
        self.btnDrl.configure(text="""|>""")

        self.tgObcDisp = tk.Checkbutton(self.tabMain)
        self.tgObcDisp.place(x=10, y=160, height=24, width=25)
        self.tgObcDisp.configure(activebackground="#d9d9d9")
        self.tgObcDisp.configure(activeforeground="#000000")
        self.tgObcDisp.configure(background="#d9d9d9")
        self.tgObcDisp.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgObcDisp_click))
        self.tgObcDisp.configure(disabledforeground="#a3a3a3")
        self.tgObcDisp.configure(foreground="#000000")
        self.tgObcDisp.configure(highlightbackground="#d9d9d9")
        self.tgObcDisp.configure(highlightcolor="black")
        self.tgObcDisp.configure(indicatoron="0")
        self.tgObcDisp.configure(justify="left")
        self.tgObcDisp.configure(selectcolor="#d9d9d9")
        self.tgObcDisp.configure(variable=self.tgObcDisp_value)
        self.tgObcDisp.configure(selectcolor="#8080ff")
        
        self.Label1_1_4 = tk.Label(self.tabMain)
        self.Label1_1_4.place(x=40, y=160, height=24, width=75)
        self.Label1_1_4.configure(activebackground="#f9f9f9")
        self.Label1_1_4.configure(activeforeground="black")
        self.Label1_1_4.configure(background="#d9d9d9")
        self.Label1_1_4.configure(disabledforeground="#a3a3a3")
        self.Label1_1_4.configure(foreground="#000000")
        self.Label1_1_4.configure(highlightbackground="#d9d9d9")
        self.Label1_1_4.configure(highlightcolor="black")
        self.Label1_1_4.configure(relief="groove")
        self.Label1_1_4.configure(text="""OBC DISP""")
        
        self.tgObcDispCoolant = tk.Checkbutton(self.tabMain)
        self.tgObcDispCoolant.place(x=120, y=160, height=24, width=50)
        self.tgObcDispCoolant.configure(activebackground="#d9d9d9")
        self.tgObcDispCoolant.configure(activeforeground="#000000")
        self.tgObcDispCoolant.configure(background="#d9d9d9")
        self.tgObcDispCoolant.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgObcDispCoolant_click))
        self.tgObcDispCoolant.configure(disabledforeground="#a3a3a3")
        self.tgObcDispCoolant.configure(foreground="#000000")
        self.tgObcDispCoolant.configure(highlightbackground="#d9d9d9")
        self.tgObcDispCoolant.configure(highlightcolor="black")
        self.tgObcDispCoolant.configure(indicatoron="0")
        self.tgObcDispCoolant.configure(justify="left")
        self.tgObcDispCoolant.configure(selectcolor="#d9d9d9")
        self.tgObcDispCoolant.configure(text="""Coolant""")
        self.tgObcDispCoolant.configure(variable=self.tgObcDispCoolant_value)

        self.tgObcDispSpeed = tk.Checkbutton(self.tabMain)
        self.tgObcDispSpeed.place(x=175, y=160, height=24, width=50)
        self.tgObcDispSpeed.configure(activebackground="#d9d9d9")
        self.tgObcDispSpeed.configure(activeforeground="#000000")
        self.tgObcDispSpeed.configure(background="#d9d9d9")
        self.tgObcDispSpeed.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgObcDispSpeed_click))
        self.tgObcDispSpeed.configure(disabledforeground="#a3a3a3")
        self.tgObcDispSpeed.configure(foreground="#000000")
        self.tgObcDispSpeed.configure(highlightbackground="#d9d9d9")
        self.tgObcDispSpeed.configure(highlightcolor="black")
        self.tgObcDispSpeed.configure(indicatoron="0")
        self.tgObcDispSpeed.configure(justify="left")
        self.tgObcDispSpeed.configure(selectcolor="#d9d9d9")
        self.tgObcDispSpeed.configure(text="""Speed""")
        self.tgObcDispSpeed.configure(variable=self.tgObcDispSpeed_value)

        self.tgObcDispOil = tk.Checkbutton(self.tabMain)
        self.tgObcDispOil.place(x=230, y=160, height=24, width=50)
        self.tgObcDispOil.configure(activebackground="#d9d9d9")
        self.tgObcDispOil.configure(activeforeground="#000000")
        self.tgObcDispOil.configure(background="#d9d9d9")
        self.tgObcDispOil.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgObcDispOil_click))
        self.tgObcDispOil.configure(disabledforeground="#a3a3a3")
        self.tgObcDispOil.configure(foreground="#000000")
        self.tgObcDispOil.configure(highlightbackground="#d9d9d9")
        self.tgObcDispOil.configure(highlightcolor="black")
        self.tgObcDispOil.configure(indicatoron="0")
        self.tgObcDispOil.configure(justify="left")
        self.tgObcDispOil.configure(selectcolor="#d9d9d9")
        self.tgObcDispOil.configure(text="""Oiltemp""")
        self.tgObcDispOil.configure(variable=self.tgObcDispOil_value)

        self.tgObcDispVolt = tk.Checkbutton(self.tabMain)
        self.tgObcDispVolt.place(x=285, y=160, height=24, width=50)
        self.tgObcDispVolt.configure(activebackground="#d9d9d9")
        self.tgObcDispVolt.configure(activeforeground="#000000")
        self.tgObcDispVolt.configure(background="#d9d9d9")
        self.tgObcDispVolt.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgObcDispVolt_click))
        self.tgObcDispVolt.configure(disabledforeground="#a3a3a3")
        self.tgObcDispVolt.configure(foreground="#000000")
        self.tgObcDispVolt.configure(highlightbackground="#d9d9d9")
        self.tgObcDispVolt.configure(highlightcolor="black")
        self.tgObcDispVolt.configure(indicatoron="0")
        self.tgObcDispVolt.configure(justify="left")
        self.tgObcDispVolt.configure(selectcolor="#d9d9d9")
        self.tgObcDispVolt.configure(text="""Volt""")
        self.tgObcDispVolt.configure(variable=self.tgObcDispVolt_value)

        self.tgObcDispFive = tk.Checkbutton(self.tabMain)
        self.tgObcDispFive.place(x=340, y=160, height=24, width=40)
        self.tgObcDispFive.configure(activebackground="#d9d9d9")
        self.tgObcDispFive.configure(activeforeground="#000000")
        self.tgObcDispFive.configure(background="#d9d9d9")
        self.tgObcDispFive.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgObcDispFive_click))
        self.tgObcDispFive.configure(disabledforeground="#a3a3a3")
        self.tgObcDispFive.configure(foreground="#000000")
        self.tgObcDispFive.configure(highlightbackground="#d9d9d9")
        self.tgObcDispFive.configure(highlightcolor="black")
        self.tgObcDispFive.configure(indicatoron="0")
        self.tgObcDispFive.configure(justify="left")
        self.tgObcDispFive.configure(selectcolor="#d9d9d9")
        self.tgObcDispFive.configure(text="""Five""")
        self.tgObcDispFive.configure(variable=self.tgObcDispFive_value)

        self.tgObcDispSix = tk.Checkbutton(self.tabMain)
        self.tgObcDispSix.place(x=385, y=160, height=24, width=35)
        self.tgObcDispSix.configure(activebackground="#d9d9d9")
        self.tgObcDispSix.configure(activeforeground="#000000")
        self.tgObcDispSix.configure(background="#d9d9d9")
        self.tgObcDispSix.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgObcDispSix_click))
        self.tgObcDispSix.configure(disabledforeground="#a3a3a3")
        self.tgObcDispSix.configure(foreground="#000000")
        self.tgObcDispSix.configure(highlightbackground="#d9d9d9")
        self.tgObcDispSix.configure(highlightcolor="black")
        self.tgObcDispSix.configure(indicatoron="0")
        self.tgObcDispSix.configure(justify="left")
        self.tgObcDispSix.configure(selectcolor="#d9d9d9")
        self.tgObcDispSix.configure(text="""Six""")
        self.tgObcDispSix.configure(variable=self.tgObcDispSix_value)

        self.tgObcDispSeven = tk.Checkbutton(self.tabMain)
        self.tgObcDispSeven.place(x=425, y=160, height=24, width=40)
        self.tgObcDispSeven.configure(activebackground="#d9d9d9")
        self.tgObcDispSeven.configure(activeforeground="#000000")
        self.tgObcDispSeven.configure(background="#d9d9d9")
        self.tgObcDispSeven.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgObcDispSeven_click))
        self.tgObcDispSeven.configure(disabledforeground="#a3a3a3")
        self.tgObcDispSeven.configure(foreground="#000000")
        self.tgObcDispSeven.configure(highlightbackground="#d9d9d9")
        self.tgObcDispSeven.configure(highlightcolor="black")
        self.tgObcDispSeven.configure(indicatoron="0")
        self.tgObcDispSeven.configure(justify="left")
        self.tgObcDispSeven.configure(selectcolor="#d9d9d9")
        self.tgObcDispSeven.configure(text="""Seven""")
        self.tgObcDispSeven.configure(variable=self.tgObcDispSeven_value)

        self.tgObcDispEight = tk.Checkbutton(self.tabMain)
        self.tgObcDispEight.place(x=470, y=160, height=24, width=35)
        self.tgObcDispEight.configure(activebackground="#d9d9d9")
        self.tgObcDispEight.configure(activeforeground="#000000")
        self.tgObcDispEight.configure(background="#d9d9d9")
        self.tgObcDispEight.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgObcDispEight_click))
        self.tgObcDispEight.configure(disabledforeground="#a3a3a3")
        self.tgObcDispEight.configure(foreground="#000000")
        self.tgObcDispEight.configure(highlightbackground="#d9d9d9")
        self.tgObcDispEight.configure(highlightcolor="black")
        self.tgObcDispEight.configure(indicatoron="0")
        self.tgObcDispEight.configure(justify="left")
        self.tgObcDispEight.configure(selectcolor="#d9d9d9")
        self.tgObcDispEight.configure(text="""Eight""")
        self.tgObcDispEight.configure(variable=self.tgObcDispEight_value)

        self.btnObcDisp = tk.Button(self.tabMain)
        self.btnObcDisp.place(x=510, y=160, height=24, width=25)
        self.btnObcDisp.configure(activebackground="#ececec")
        self.btnObcDisp.configure(activeforeground="#000000")
        self.btnObcDisp.configure(background="#d9d9d9")
        self.btnObcDisp.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnObcDisp_click))
        self.btnObcDisp.configure(disabledforeground="#a3a3a3")
        self.btnObcDisp.configure(font="-family {Tahoma} -size 8")
        self.btnObcDisp.configure(foreground="#000000")
        self.btnObcDisp.configure(highlightbackground="#d9d9d9")
        self.btnObcDisp.configure(highlightcolor="black")
        self.btnObcDisp.configure(text="""|>""")

        self.spnBFDTime = tk.Spinbox(self.tabMain, from_=1.0, to=7.0)
        self.spnBFDTime.place(x=120, y=250, height=24, width=45)
        self.spnBFDTime.configure(activebackground="#f9f9f9")
        self.spnBFDTime.configure(background="white")
        self.spnBFDTime.configure(borderwidth="2")
        self.spnBFDTime.configure(buttonbackground="#d9d9d9")
        self.spnBFDTime.bind("<ButtonRelease-1>", lambda e: self.after(1, self.spnBFDTime_click))
        self.spnBFDTime.configure(disabledforeground="#a3a3a3")
        self.spnBFDTime.configure(font="TkDefaultFont")
        self.spnBFDTime.configure(foreground="black")
        self.spnBFDTime.configure(highlightbackground="black")
        self.spnBFDTime.configure(highlightcolor="black")
        self.spnBFDTime.configure(insertbackground="black")
        self.spnBFDTime.configure(justify="right")
        self.spnBFDTime.configure(selectbackground="blue")
        self.spnBFDTime.configure(selectforeground="white")
        # self.spnBFDTime_change = self.spnBFDTime.register(self.spnBFDTime_change)
        self.spnBFDTime.configure(validatecommand=(self.spnBFDTime_change, "%V"))
        self.spnBFDTime.configure(textvariable=self.spnBFDTime_value)

        self.Label2_1_1 = tk.Label(self.tabMain)
        self.Label2_1_1.place(x=165, y=250, height=24, width=15)
        self.Label2_1_1.configure(activebackground="#f9f9f9")
        self.Label2_1_1.configure(activeforeground="black")
        self.Label2_1_1.configure(background="#d9d9d9")
        self.Label2_1_1.configure(disabledforeground="#a3a3a3")
        self.Label2_1_1.configure(foreground="#000000")
        self.Label2_1_1.configure(highlightbackground="#d9d9d9")
        self.Label2_1_1.configure(highlightcolor="black")
        self.Label2_1_1.configure(text="""s""")

        self.spnRCamSpeed = tk.Spinbox(self.tabMain, from_=1.0, to=255.0)
        self.spnRCamSpeed.place(x=120, y=220, height=24, width=45)
        self.spnRCamSpeed.configure(activebackground="#f9f9f9")
        self.spnRCamSpeed.configure(background="white")
        self.spnRCamSpeed.configure(borderwidth="2")
        self.spnRCamSpeed.configure(buttonbackground="#d9d9d9")
        self.spnRCamSpeed.configure(disabledforeground="#a3a3a3")
        self.spnRCamSpeed.configure(font="TkDefaultFont")
        self.spnRCamSpeed.configure(foreground="black")
        self.spnRCamSpeed.configure(highlightbackground="black")
        self.spnRCamSpeed.configure(highlightcolor="black")
        self.spnRCamSpeed.configure(insertbackground="black")
        self.spnRCamSpeed.configure(justify="right")
        self.spnRCamSpeed.configure(selectbackground="blue")
        self.spnRCamSpeed.configure(selectforeground="white")
        self.spnRCamSpeed.configure(validate="all")
        self.spnRCamSpeed.configure(textvariable=self.spnRCamSpeed_value)

        self.spnRCamTime = tk.Spinbox(self.tabMain, from_=1.0, to=255.0)
        self.spnRCamTime.place(x=205, y=220, height=24, width=45)
        self.spnRCamTime.configure(activebackground="#f9f9f9")
        self.spnRCamTime.configure(background="white")
        self.spnRCamTime.configure(borderwidth="2")
        self.spnRCamTime.configure(buttonbackground="#d9d9d9")
        self.spnRCamTime.bind("<ButtonRelease-1>", lambda e: self.after(1, self.spnRCamTime_click))
        self.spnRCamTime.configure(disabledforeground="#a3a3a3")
        self.spnRCamTime.configure(font="TkDefaultFont")
        self.spnRCamTime.configure(foreground="black")
        self.spnRCamTime.configure(highlightbackground="black")
        self.spnRCamTime.configure(highlightcolor="black")
        self.spnRCamTime.configure(insertbackground="black")
        self.spnRCamTime.configure(justify="right")
        self.spnRCamTime.configure(selectbackground="blue")
        self.spnRCamTime.configure(selectforeground="white")
        self.spnRCamTime.configure(textvariable=self.spnRCamTime_value)

        self.Label2_2 = tk.Label(self.tabMain)
        self.Label2_2.place(x=165, y=220, height=24, width=35)
        self.Label2_2.configure(activebackground="#f9f9f9")
        self.Label2_2.configure(activeforeground="black")
        self.Label2_2.configure(background="#d9d9d9")
        self.Label2_2.configure(disabledforeground="#a3a3a3")
        self.Label2_2.configure(foreground="#000000")
        self.Label2_2.configure(highlightbackground="#d9d9d9")
        self.Label2_2.configure(highlightcolor="black")
        self.Label2_2.configure(text="""km/h""")

        self.Label2_1_2 = tk.Label(self.tabMain)
        self.Label2_1_2.place(x=250, y=220, height=24, width=15)
        self.Label2_1_2.configure(activebackground="#f9f9f9")
        self.Label2_1_2.configure(activeforeground="black")
        self.Label2_1_2.configure(background="#d9d9d9")
        self.Label2_1_2.configure(disabledforeground="#a3a3a3")
        self.Label2_1_2.configure(foreground="#000000")
        self.Label2_1_2.configure(highlightbackground="#d9d9d9")
        self.Label2_1_2.configure(highlightcolor="black")
        self.Label2_1_2.configure(text="""s""")

        self.tgPdcScr = tk.Checkbutton(self.tabMain)
        self.tgPdcScr.place(x=10, y=280, height=24, width=25)
        self.tgPdcScr.configure(activebackground="#d9d9d9")
        self.tgPdcScr.configure(activeforeground="#000000")
        self.tgPdcScr.configure(background="#d9d9d9")
        self.tgPdcScr.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgPdcScr_click))
        self.tgPdcScr.configure(disabledforeground="#a3a3a3")
        self.tgPdcScr.configure(foreground="#000000")
        self.tgPdcScr.configure(highlightbackground="#d9d9d9")
        self.tgPdcScr.configure(highlightcolor="black")
        self.tgPdcScr.configure(indicatoron="0")
        self.tgPdcScr.configure(justify="left")
        self.tgPdcScr.configure(selectcolor="#d9d9d9")
        self.tgPdcScr.configure(variable=self.tgPdcScr_value)
        self.tgPdcScr.configure(selectcolor="#8080ff")

        self.lblPdcScr = tk.Label(self.tabMain)
        self.lblPdcScr.place(x=40, y=280, height=24, width=75)
        self.lblPdcScr.configure(activebackground="#f9f9f9")
        self.lblPdcScr.configure(activeforeground="black")
        self.lblPdcScr.configure(background="#d9d9d9")
        self.lblPdcScr.configure(disabledforeground="#a3a3a3")
        self.lblPdcScr.configure(foreground="#000000")
        self.lblPdcScr.configure(highlightbackground="#d9d9d9")
        self.lblPdcScr.configure(highlightcolor="black")
        self.lblPdcScr.configure(relief="groove")
        self.lblPdcScr.configure(text="""PDCSCR""")

        self.tgPdcScrFrontBack = tk.Checkbutton(self.tabMain)
        self.tgPdcScrFrontBack.place(x=120, y=280, height=24, width=60)
        self.tgPdcScrFrontBack.configure(activebackground="#d9d9d9")
        self.tgPdcScrFrontBack.configure(activeforeground="#000000")
        self.tgPdcScrFrontBack.configure(background="#d9d9d9")
        self.tgPdcScrFrontBack.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgPdcScrFrontBack_click))
        self.tgPdcScrFrontBack.configure(disabledforeground="#a3a3a3")
        self.tgPdcScrFrontBack.configure(foreground="#000000")
        self.tgPdcScrFrontBack.configure(highlightbackground="#d9d9d9")
        self.tgPdcScrFrontBack.configure(highlightcolor="black")
        self.tgPdcScrFrontBack.configure(indicatoron="0")
        self.tgPdcScrFrontBack.configure(justify="left")
        self.tgPdcScrFrontBack.configure(selectcolor="#d9d9d9")
        self.tgPdcScrFrontBack.configure(text="""Front+Back""")
        self.tgPdcScrFrontBack.configure(variable=self.tgPdcScrFrontBack_value)

        self.tgPdcScrBack = tk.Checkbutton(self.tabMain)
        self.tgPdcScrBack.place(x=185, y=280, height=24, width=60)
        self.tgPdcScrBack.configure(activebackground="#d9d9d9")
        self.tgPdcScrBack.configure(activeforeground="#000000")
        self.tgPdcScrBack.configure(background="#d9d9d9")
        self.tgPdcScrBack.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgPdcScrBack_click))
        self.tgPdcScrBack.configure(disabledforeground="#a3a3a3")
        self.tgPdcScrBack.configure(foreground="#000000")
        self.tgPdcScrBack.configure(highlightbackground="#d9d9d9")
        self.tgPdcScrBack.configure(highlightcolor="black")
        self.tgPdcScrBack.configure(indicatoron="0")
        self.tgPdcScrBack.configure(justify="left")
        self.tgPdcScrBack.configure(selectcolor="#d9d9d9")
        self.tgPdcScrBack.configure(text="""Back""")
        self.tgPdcScrBack.configure(variable=self.tgPdcScrBack_value)

        self.btnPdcScr = tk.Button(self.tabMain)
        self.btnPdcScr.place(x=510, y=280, height=24, width=25)
        self.btnPdcScr.configure(activebackground="#ececec")
        self.btnPdcScr.configure(activeforeground="#000000")
        self.btnPdcScr.configure(background="#d9d9d9")
        self.btnPdcScr.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnPdcScr_click))
        self.btnPdcScr.configure(disabledforeground="#a3a3a3")
        self.btnPdcScr.configure(font="-family {Tahoma} -size 8")
        self.btnPdcScr.configure(foreground="#000000")
        self.btnPdcScr.configure(highlightbackground="#d9d9d9")
        self.btnPdcScr.configure(highlightcolor="black")
        self.btnPdcScr.configure(text="""|>""")

        
        self.Label1_2 = tk.Label(self.tabSettings)
        self.Label1_2.place(x=40, y=10, height=24, width=75)
        self.Label1_2.configure(activebackground="#f9f9f9")
        self.Label1_2.configure(activeforeground="black")
        self.Label1_2.configure(background="#d9d9d9")
        self.Label1_2.configure(disabledforeground="#a3a3a3")
        self.Label1_2.configure(foreground="#000000")
        self.Label1_2.configure(highlightbackground="#d9d9d9")
        self.Label1_2.configure(highlightcolor="black")
        self.Label1_2.configure(relief="groove")
        self.Label1_2.configure(text="""EXT. RXTX""")



        """self.tgRxTx = tk.Checkbutton(self.tabSettings)
        self.tgRxTx.place(x=10, y=10, height=24, width=25)
        self.tgRxTx.configure(activebackground="#d9d9d9")
        self.tgRxTx.configure(activeforeground="#000000")
        self.tgRxTx.configure(background="#d9d9d9")
        self.tgRxTx.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgRxTx_click))
        self.tgRxTx.configure(disabledforeground="#a3a3a3")
        self.tgRxTx.configure(foreground="#000000")
        self.tgRxTx.configure(highlightbackground="#d9d9d9")
        self.tgRxTx.configure(highlightcolor="black")
        self.tgRxTx.configure(indicatoron="0")
        self.tgRxTx.configure(justify="left")
        self.tgRxTx.configure(selectcolor="#d9d9d9")
        self.tgRxTx.configure(variable=self.tgRxTx_value)
        self.tgRxTx.configure(selectcolor="#8080ff")
        """

        self.tgRxTxRx = tk.Checkbutton(self.tabSettings)
        self.tgRxTxRx.place(x=120, y=10, height=24, width=40)
        self.tgRxTxRx.configure(activebackground="#d9d9d9")
        self.tgRxTxRx.configure(activeforeground="#000000")
        self.tgRxTxRx.configure(background="#d9d9d9")
        self.tgRxTxRx.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgRxTxRx_click))
        self.tgRxTxRx.configure(disabledforeground="#a3a3a3")
        self.tgRxTxRx.configure(foreground="#000000")
        self.tgRxTxRx.configure(highlightbackground="#d9d9d9")
        self.tgRxTxRx.configure(highlightcolor="black")
        self.tgRxTxRx.configure(indicatoron="0")
        self.tgRxTxRx.configure(justify="left")
        self.tgRxTxRx.configure(selectcolor="#d9d9d9")
        self.tgRxTxRx.configure(text="""RX""")
        self.tgRxTxRx.configure(variable=self.tgRxTxRx_value)
        # self.tgRxTxRx.configure(selectcolor="#8080ff")

        self.tgRxTxTx = tk.Checkbutton(self.tabSettings)
        self.tgRxTxTx.place(x=165, y=10, height=24, width=40)
        self.tgRxTxTx.configure(activebackground="#d9d9d9")
        self.tgRxTxTx.configure(activeforeground="#000000")
        self.tgRxTxTx.configure(background="#d9d9d9")
        self.tgRxTxTx.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgRxTxTx_click))
        self.tgRxTxTx.configure(disabledforeground="#a3a3a3")
        self.tgRxTxTx.configure(foreground="#000000")
        self.tgRxTxTx.configure(highlightbackground="#d9d9d9")
        self.tgRxTxTx.configure(highlightcolor="black")
        self.tgRxTxTx.configure(indicatoron="0")
        self.tgRxTxTx.configure(justify="left")
        self.tgRxTxTx.configure(selectcolor="#d9d9d9")
        self.tgRxTxTx.configure(text="""TX""")
        self.tgRxTxTx.configure(variable=self.tgRxTxTx_value)
        # self.tgRxTxTx.configure(selectcolor="#8080ff")

        """
        self.spnRxTxTime = tk.Spinbox(self.tabSettings, from_=12.0, to=50.0)
        self.spnRxTxTime.place(x=210, y=10, height=24, width=45)
        self.spnRxTxTime.configure(activebackground="#f9f9f9")
        self.spnRxTxTime.configure(background="white")
        self.spnRxTxTime.configure(borderwidth="2")
        self.spnRxTxTime.configure(buttonbackground="#d9d9d9")
        self.spnRxTxTime.bind("<ButtonRelease-1>", lambda e: self.after(1, self.spnRxTxTime_click))
        self.spnRxTxTime.configure(disabledforeground="#a3a3a3")
        self.spnRxTxTime.configure(font="TkDefaultFont")
        self.spnRxTxTime.configure(foreground="black")
        self.spnRxTxTime.configure(highlightbackground="black")
        self.spnRxTxTime.configure(highlightcolor="black")
        self.spnRxTxTime.configure(insertbackground="black")
        self.spnRxTxTime.configure(justify="right")
        self.spnRxTxTime.configure(selectbackground="blue")
        self.spnRxTxTime.configure(selectforeground="white")
        self.spnRxTxTime.configure(validate="all")
        self.spnRxTxTime.configure(state="readonly")
        self.spnRxTxTime.configure(textvariable=self.spnRxTxTime_value)
        
        self.Label2_1_3 = tk.Label(self.tabSettings)
        self.Label2_1_3.place(x=255, y=10, height=24, width=20)
        self.Label2_1_3.configure(activebackground="#f9f9f9")
        self.Label2_1_3.configure(activeforeground="black")
        self.Label2_1_3.configure(background="#d9d9d9")
        self.Label2_1_3.configure(disabledforeground="#a3a3a3")
        self.Label2_1_3.configure(foreground="#000000")
        self.Label2_1_3.configure(highlightbackground="#d9d9d9")
        self.Label2_1_3.configure(highlightcolor="black")
        self.Label2_1_3.configure(text="ms")
        """

        self.btnRxTx = tk.Button(self.tabSettings)
        self.btnRxTx.place(x=510, y=10, height=24, width=25)
        self.btnRxTx.configure(activebackground="#ececec")
        self.btnRxTx.configure(activeforeground="#000000")
        self.btnRxTx.configure(background="#d9d9d9")
        self.btnRxTx.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnRxTx_click))
        self.btnRxTx.configure(disabledforeground="#a3a3a3")
        self.btnRxTx.configure(font="-family {Tahoma} -size 8")
        self.btnRxTx.configure(foreground="#000000")
        self.btnRxTx.configure(highlightbackground="#d9d9d9")
        self.btnRxTx.configure(highlightcolor="black")
        self.btnRxTx.configure(text="""|>""")


        self.Label1_2_1 = tk.Label(self.tabSettings)
        self.Label1_2_1.place(x=40, y=40, height=24, width=75)
        self.Label1_2_1.configure(activebackground="#f9f9f9")
        self.Label1_2_1.configure(activeforeground="black")
        self.Label1_2_1.configure(background="#d9d9d9")
        self.Label1_2_1.configure(disabledforeground="#a3a3a3")
        self.Label1_2_1.configure(foreground="#000000")
        self.Label1_2_1.configure(highlightbackground="#d9d9d9")
        self.Label1_2_1.configure(highlightcolor="black")
        self.Label1_2_1.configure(relief="groove")
        self.Label1_2_1.configure(text="""NTW MODE""")

        self.lblNtwkMode = tk.Label(self.tabSettings)
        self.lblNtwkMode.place(x=120, y=40, height=24, width=40)
        self.lblNtwkMode.configure(activebackground="#f9f9f9")
        self.lblNtwkMode.configure(activeforeground="black")
        self.lblNtwkMode.configure(background="#d9d9d9")
        self.lblNtwkMode.configure(disabledforeground="#a3a3a3")
        self.lblNtwkMode.configure(foreground="#000000")
        self.lblNtwkMode.configure(highlightbackground="#d9d9d9")
        self.lblNtwkMode.configure(highlightcolor="black")
        self.lblNtwkMode.configure(relief="groove")
        self.lblNtwkMode.configure(text="""GM/0""")

        self.spnNtwkMode = tk.Spinbox(self.tabSettings, from_=0.0, to=3.0)
        self.spnNtwkMode.place(x=165, y=40, height=24, width=45)
        self.spnNtwkMode.configure(activebackground="#f9f9f9")
        self.spnNtwkMode.configure(background="white")
        self.spnNtwkMode.configure(borderwidth="2")
        self.spnNtwkMode.configure(buttonbackground="#d9d9d9")
        self.spnNtwkMode.bind("<ButtonRelease-1>", lambda e: self.after(1, self.spnNtwkMode_click))
        self.spnNtwkMode.configure(disabledforeground="#a3a3a3")
        self.spnNtwkMode.configure(font="TkDefaultFont")
        self.spnNtwkMode.configure(foreground="black")
        self.spnNtwkMode.configure(highlightbackground="black")
        self.spnNtwkMode.configure(highlightcolor="black")
        self.spnNtwkMode.configure(insertbackground="black")
        self.spnNtwkMode.configure(justify="right")
        self.spnNtwkMode.configure(selectbackground="blue")
        self.spnNtwkMode.configure(selectforeground="white")
        self.spnNtwkMode.configure(validate="all")
        self.spnNtwkMode.configure(textvariable=self.spnNtwkMode_value)
        self.spnNtwkMode.delete(0, "end")
        self.spnNtwkMode.insert(0, 1)

        self.btnNtwkMode = tk.Button(self.tabSettings)
        self.btnNtwkMode.place(x=510, y=40, height=24, width=25)
        self.btnNtwkMode.configure(activebackground="#ececec")
        self.btnNtwkMode.configure(activeforeground="#000000")
        self.btnNtwkMode.configure(background="#d9d9d9")
        self.btnNtwkMode.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnNtwkMode_click))
        self.btnNtwkMode.configure(disabledforeground="#a3a3a3")
        self.btnNtwkMode.configure(font="-family {Tahoma} -size 8")
        self.btnNtwkMode.configure(foreground="#000000")
        self.btnNtwkMode.configure(highlightbackground="#d9d9d9")
        self.btnNtwkMode.configure(highlightcolor="black")
        self.btnNtwkMode.configure(text="""|>""")

        self.Label1_2_2 = tk.Label(self.tabSettings)
        self.Label1_2_2.place(x=40, y=70, height=24, width=75)
        self.Label1_2_2.configure(activebackground="#f9f9f9")
        self.Label1_2_2.configure(activeforeground="black")
        self.Label1_2_2.configure(background="#d9d9d9")
        self.Label1_2_2.configure(disabledforeground="#a3a3a3")
        self.Label1_2_2.configure(foreground="#000000")
        self.Label1_2_2.configure(highlightbackground="#d9d9d9")
        self.Label1_2_2.configure(highlightcolor="black")
        self.Label1_2_2.configure(relief="groove")
        self.Label1_2_2.configure(text="""TIME OFF""")

        self.spnTimeOff = tk.Spinbox(self.tabSettings, from_=2.0, to=15.0, increment=3.0)
        self.spnTimeOff.place(x=120, y=70, height=24, width=45)
        self.spnTimeOff.configure(activebackground="#f9f9f9")
        self.spnTimeOff.configure(background="white")
        self.spnTimeOff.configure(borderwidth="2")
        self.spnTimeOff.configure(buttonbackground="#d9d9d9")
        self.spnTimeOff.bind("<ButtonRelease-1>", lambda e: self.after(1, self.spnTimeOff_click))
        self.spnTimeOff.configure(disabledforeground="#a3a3a3")
        self.spnTimeOff.configure(font="TkDefaultFont")
        self.spnTimeOff.configure(foreground="black")
        self.spnTimeOff.configure(highlightbackground="black")
        self.spnTimeOff.configure(highlightcolor="black")
        self.spnTimeOff.configure(insertbackground="black")
        self.spnTimeOff.configure(justify="right")
        self.spnTimeOff.configure(selectbackground="blue")
        self.spnTimeOff.configure(selectforeground="white")
        self.spnTimeOff.configure(validate="all")
        self.spnTimeOff.configure(textvariable=self.spnTimeOff_value)

        self.Label2_1_3_1 = tk.Label(self.tabSettings)
        self.Label2_1_3_1.place(x=165, y=70, height=24, width=25)
        self.Label2_1_3_1.configure(activebackground="#f9f9f9")
        self.Label2_1_3_1.configure(activeforeground="black")
        self.Label2_1_3_1.configure(background="#d9d9d9")
        self.Label2_1_3_1.configure(disabledforeground="#a3a3a3")
        self.Label2_1_3_1.configure(foreground="#000000")
        self.Label2_1_3_1.configure(highlightbackground="#d9d9d9")
        self.Label2_1_3_1.configure(highlightcolor="black")
        self.Label2_1_3_1.configure(text="""min""")

        self.btnTimeOff = tk.Button(self.tabSettings)
        self.btnTimeOff.place(x=510, y=70, height=24, width=25)
        self.btnTimeOff.configure(activebackground="#ececec")
        self.btnTimeOff.configure(activeforeground="#000000")
        self.btnTimeOff.configure(background="#d9d9d9")
        self.btnTimeOff.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnTimeOff_click))
        self.btnTimeOff.configure(disabledforeground="#a3a3a3")
        self.btnTimeOff.configure(font="-family {Tahoma} -size 8")
        self.btnTimeOff.configure(foreground="#000000")
        self.btnTimeOff.configure(highlightbackground="#d9d9d9")
        self.btnTimeOff.configure(highlightcolor="black")
        self.btnTimeOff.configure(text="""|>""")


        self.lblReqs = tk.Label(self.tabSettings)
        self.lblReqs.place(x=40, y=100, height=24, width=75)
        self.lblReqs.configure(activebackground="#f9f9f9")
        self.lblReqs.configure(activeforeground="black")
        self.lblReqs.configure(background="#d9d9d9")
        self.lblReqs.configure(disabledforeground="#a3a3a3")
        self.lblReqs.configure(foreground="#000000")
        self.lblReqs.configure(highlightbackground="#d9d9d9")
        self.lblReqs.configure(highlightcolor="black")
        self.lblReqs.configure(relief="groove")
        self.lblReqs.configure(text="""REQUESTS""")

        self.tgReqsGmState = tk.Checkbutton(self.tabSettings)
        self.tgReqsGmState.place(x=120, y=100, height=24, width=50)
        self.tgReqsGmState.configure(activebackground="#d9d9d9")
        self.tgReqsGmState.configure(activeforeground="#000000")
        self.tgReqsGmState.configure(background="#d9d9d9")
        self.tgReqsGmState.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgReqsGmState_click))
        self.tgReqsGmState.configure(disabledforeground="#a3a3a3")
        self.tgReqsGmState.configure(foreground="#000000")
        self.tgReqsGmState.configure(highlightbackground="#d9d9d9")
        self.tgReqsGmState.configure(highlightcolor="black")
        self.tgReqsGmState.configure(indicatoron="0")
        self.tgReqsGmState.configure(justify="left")
        self.tgReqsGmState.configure(selectcolor="#d9d9d9")
        self.tgReqsGmState.configure(text="""GmState""")
        self.tgReqsGmState.configure(variable=self.tgReqsGmState_value)

        self.tgReqsLcmDim = tk.Checkbutton(self.tabSettings)
        self.tgReqsLcmDim.place(x=175, y=100, height=24, width=50)
        self.tgReqsLcmDim.configure(activebackground="#d9d9d9")
        self.tgReqsLcmDim.configure(activeforeground="#000000")
        self.tgReqsLcmDim.configure(background="#d9d9d9")
        self.tgReqsLcmDim.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgReqsLcmDim_click))
        self.tgReqsLcmDim.configure(disabledforeground="#a3a3a3")
        self.tgReqsLcmDim.configure(foreground="#000000")
        self.tgReqsLcmDim.configure(highlightbackground="#d9d9d9")
        self.tgReqsLcmDim.configure(highlightcolor="black")
        self.tgReqsLcmDim.configure(indicatoron="0")
        self.tgReqsLcmDim.configure(justify="left")
        self.tgReqsLcmDim.configure(selectcolor="#d9d9d9")
        self.tgReqsLcmDim.configure(text="""LcmDim""")
        self.tgReqsLcmDim.configure(variable=self.tgReqsLcmDim_value)

        self.btnReqs = tk.Button(self.tabSettings)
        self.btnReqs.place(x=510, y=100, height=24, width=25)
        self.btnReqs.configure(activebackground="#ececec")
        self.btnReqs.configure(activeforeground="#000000")
        self.btnReqs.configure(background="#d9d9d9")
        self.btnReqs.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnReqs_click))
        self.btnReqs.configure(disabledforeground="#a3a3a3")
        self.btnReqs.configure(font="-family {Tahoma} -size 8")
        self.btnReqs.configure(foreground="#000000")
        self.btnReqs.configure(highlightbackground="#d9d9d9")
        self.btnReqs.configure(highlightcolor="black")
        self.btnReqs.configure(text="""|>""")


        self.ttlAVRClock = tk.Label(self.tabSettings)
        self.ttlAVRClock.place(x=40, y=130, height=24, width=75)
        self.ttlAVRClock.configure(activebackground="#f9f9f9")
        self.ttlAVRClock.configure(activeforeground="black")
        self.ttlAVRClock.configure(background="#d9d9d9")
        self.ttlAVRClock.configure(disabledforeground="#a3a3a3")
        self.ttlAVRClock.configure(foreground="#000000")
        self.ttlAVRClock.configure(highlightbackground="#d9d9d9")
        self.ttlAVRClock.configure(highlightcolor="black")
        self.ttlAVRClock.configure(relief="groove")
        self.ttlAVRClock.configure(text="""CLOCK""")

        '''
        self.lblAVRClock = tk.Label(self.tabSettings)
        self.lblAVRClock.place(x=350, y=130, height=24, width=40)
        self.lblAVRClock.configure(activebackground="#f9f9f9")
        self.lblAVRClock.configure(activeforeground="black")
        self.lblAVRClock.configure(background="#d9d9d9")
        self.lblAVRClock.configure(disabledforeground="#a3a3a3")
        self.lblAVRClock.configure(foreground="#000000")
        self.lblAVRClock.configure(highlightbackground="#d9d9d9")
        self.lblAVRClock.configure(highlightcolor="black")
        self.lblAVRClock.configure(relief="groove")
        self.lblAVRClock.configure(text="""0""")
        '''

        self.btnAVRClockGet = tk.Button(self.tabSettings)
        self.btnAVRClockGet.place(x=120, y=130, height=24, width=55)
        self.btnAVRClockGet.configure(activebackground="#ececec")
        self.btnAVRClockGet.configure(activeforeground="#000000")
        self.btnAVRClockGet.configure(background="#d9d9d9")
        self.btnAVRClockGet.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnAVRClockGet_click))
        self.btnAVRClockGet.configure(disabledforeground="#a3a3a3")
        self.btnAVRClockGet.configure(font="-family {Tahoma} -size 8")
        self.btnAVRClockGet.configure(foreground="#000000")
        self.btnAVRClockGet.configure(highlightbackground="#d9d9d9")
        self.btnAVRClockGet.configure(highlightcolor="black")
        self.btnAVRClockGet.configure(text="""Get Time""")

        self.spnAVRClock_year = tk.Spinbox(self.tabSettings, from_=1970.0, to=2099.0)
        self.spnAVRClock_year.place(x=185, y=130, height=24, width=45)
        self.spnAVRClock_year.configure(activebackground="#f9f9f9")
        self.spnAVRClock_year.configure(background="white")
        self.spnAVRClock_year.configure(borderwidth="2")
        self.spnAVRClock_year.configure(buttonbackground="#d9d9d9")
        self.spnAVRClock_year.bind("<ButtonRelease-1>", lambda e: self.after(1, self.spnAVRClock_year_click))
        self.spnAVRClock_year.configure(disabledforeground="#a3a3a3")
        self.spnAVRClock_year.configure(font="TkDefaultFont")
        self.spnAVRClock_year.configure(foreground="black")
        self.spnAVRClock_year.configure(highlightbackground="black")
        self.spnAVRClock_year.configure(highlightcolor="black")
        self.spnAVRClock_year.configure(insertbackground="black")
        self.spnAVRClock_year.configure(justify="right")
        self.spnAVRClock_year.configure(selectbackground="blue")
        self.spnAVRClock_year.configure(selectforeground="white")
        self.spnAVRClock_year.configure(validate="all")
        self.spnAVRClock_year.configure(textvariable=self.spnAVRClock_year_value)

        self.spnAVRClock_month = tk.Spinbox(self.tabSettings, from_=1.0, to=12.0)
        self.spnAVRClock_month.place(x=230, y=130, height=24, width=35)
        self.spnAVRClock_month.configure(activebackground="#f9f9f9")
        self.spnAVRClock_month.configure(background="white")
        self.spnAVRClock_month.configure(borderwidth="2")
        self.spnAVRClock_month.configure(buttonbackground="#d9d9d9")
        self.spnAVRClock_month.bind("<ButtonRelease-1>", lambda e: self.after(1, self.spnAVRClock_month_click))
        self.spnAVRClock_month.configure(disabledforeground="#a3a3a3")
        self.spnAVRClock_month.configure(font="TkDefaultFont")
        self.spnAVRClock_month.configure(foreground="black")
        self.spnAVRClock_month.configure(highlightbackground="black")
        self.spnAVRClock_month.configure(highlightcolor="black")
        self.spnAVRClock_month.configure(insertbackground="black")
        self.spnAVRClock_month.configure(justify="right")
        self.spnAVRClock_month.configure(selectbackground="blue")
        self.spnAVRClock_month.configure(selectforeground="white")
        self.spnAVRClock_month.configure(validate="all")
        self.spnAVRClock_month.configure(textvariable=self.spnAVRClock_month_value)

        self.spnAVRClock_day = tk.Spinbox(self.tabSettings, from_=1.0, to=31.0)
        self.spnAVRClock_day.place(x=265, y=130, height=24, width=35)
        self.spnAVRClock_day.configure(activebackground="#f9f9f9")
        self.spnAVRClock_day.configure(background="white")
        self.spnAVRClock_day.configure(borderwidth="2")
        self.spnAVRClock_day.configure(buttonbackground="#d9d9d9")
        self.spnAVRClock_day.bind("<ButtonRelease-1>", lambda e: self.after(1, self.spnAVRClock_day_click))
        self.spnAVRClock_day.configure(disabledforeground="#a3a3a3")
        self.spnAVRClock_day.configure(font="TkDefaultFont")
        self.spnAVRClock_day.configure(foreground="black")
        self.spnAVRClock_day.configure(highlightbackground="black")
        self.spnAVRClock_day.configure(highlightcolor="black")
        self.spnAVRClock_day.configure(insertbackground="black")
        self.spnAVRClock_day.configure(justify="right")
        self.spnAVRClock_day.configure(selectbackground="blue")
        self.spnAVRClock_day.configure(selectforeground="white")
        self.spnAVRClock_day.configure(validate="all")
        self.spnAVRClock_day.configure(textvariable=self.spnAVRClock_day_value)

        self.spnAVRClock_hour = tk.Spinbox(self.tabSettings, from_=0.0, to=23.0)
        self.spnAVRClock_hour.place(x=305, y=130, height=24, width=35)
        self.spnAVRClock_hour.configure(activebackground="#f9f9f9")
        self.spnAVRClock_hour.configure(background="white")
        self.spnAVRClock_hour.configure(borderwidth="2")
        self.spnAVRClock_hour.configure(buttonbackground="#d9d9d9")
        self.spnAVRClock_hour.bind("<ButtonRelease-1>", lambda e: self.after(1, self.spnAVRClock_hour_click))
        self.spnAVRClock_hour.configure(disabledforeground="#a3a3a3")
        self.spnAVRClock_hour.configure(font="TkDefaultFont")
        self.spnAVRClock_hour.configure(foreground="black")
        self.spnAVRClock_hour.configure(highlightbackground="black")
        self.spnAVRClock_hour.configure(highlightcolor="black")
        self.spnAVRClock_hour.configure(insertbackground="black")
        self.spnAVRClock_hour.configure(justify="right")
        self.spnAVRClock_hour.configure(selectbackground="blue")
        self.spnAVRClock_hour.configure(selectforeground="white")
        self.spnAVRClock_hour.configure(validate="all")
        self.spnAVRClock_hour.configure(textvariable=self.spnAVRClock_hour_value)


        self.spnAVRClock_min = tk.Spinbox(self.tabSettings, from_=0.0, to=59.0)
        self.spnAVRClock_min.place(x=340, y=130, height=24, width=35)
        self.spnAVRClock_min.configure(activebackground="#f9f9f9")
        self.spnAVRClock_min.configure(background="white")
        self.spnAVRClock_min.configure(borderwidth="2")
        self.spnAVRClock_min.configure(buttonbackground="#d9d9d9")
        self.spnAVRClock_min.bind("<ButtonRelease-1>", lambda e: self.after(1, self.spnAVRClock_min_click))
        self.spnAVRClock_min.configure(disabledforeground="#a3a3a3")
        self.spnAVRClock_min.configure(font="TkDefaultFont")
        self.spnAVRClock_min.configure(foreground="black")
        self.spnAVRClock_min.configure(highlightbackground="black")
        self.spnAVRClock_min.configure(highlightcolor="black")
        self.spnAVRClock_min.configure(insertbackground="black")
        self.spnAVRClock_min.configure(justify="right")
        self.spnAVRClock_min.configure(selectbackground="blue")
        self.spnAVRClock_min.configure(selectforeground="white")
        self.spnAVRClock_min.configure(validate="all")
        self.spnAVRClock_min.configure(textvariable=self.spnAVRClock_min_value)

        self.spnAVRClock_sec = tk.Spinbox(self.tabSettings, from_=0.0, to=59.0)
        self.spnAVRClock_sec.place(x=375, y=130, height=24, width=35)
        self.spnAVRClock_sec.configure(activebackground="#f9f9f9")
        self.spnAVRClock_sec.configure(background="white")
        self.spnAVRClock_sec.configure(borderwidth="2")
        self.spnAVRClock_sec.configure(buttonbackground="#d9d9d9")
        self.spnAVRClock_sec.bind("<ButtonRelease-1>", lambda e: self.after(1, self.spnAVRClock_sec_click))
        self.spnAVRClock_sec.configure(disabledforeground="#a3a3a3")
        self.spnAVRClock_sec.configure(font="TkDefaultFont")
        self.spnAVRClock_sec.configure(foreground="black")
        self.spnAVRClock_sec.configure(highlightbackground="black")
        self.spnAVRClock_sec.configure(highlightcolor="black")
        self.spnAVRClock_sec.configure(insertbackground="black")
        self.spnAVRClock_sec.configure(justify="right")
        self.spnAVRClock_sec.configure(selectbackground="blue")
        self.spnAVRClock_sec.configure(selectforeground="white")
        self.spnAVRClock_sec.configure(validate="all")
        self.spnAVRClock_sec.configure(textvariable=self.spnAVRClock_sec_value)

        self.btnAVRClockNTP = tk.Button(self.tabSettings)
        self.btnAVRClockNTP.place(x=440, y=130, height=24, width=65)
        self.btnAVRClockNTP.configure(activebackground="#ececec")
        self.btnAVRClockNTP.configure(activeforeground="#000000")
        self.btnAVRClockNTP.configure(background="#d9d9d9")
        self.btnAVRClockNTP.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnAVRClockNTP_click))
        self.btnAVRClockNTP.configure(disabledforeground="#a3a3a3")
        self.btnAVRClockNTP.configure(font="-family {Tahoma} -size 8")
        self.btnAVRClockNTP.configure(foreground="#000000")
        self.btnAVRClockNTP.configure(highlightbackground="#d9d9d9")
        self.btnAVRClockNTP.configure(highlightcolor="black")
        self.btnAVRClockNTP.configure(text="""Sys.Time|>""")

        self.btnAVRClock = tk.Button(self.tabSettings)
        self.btnAVRClock.place(x=510, y=130, height=24, width=25)
        self.btnAVRClock.configure(activebackground="#ececec")
        self.btnAVRClock.configure(activeforeground="#000000")
        self.btnAVRClock.configure(background="#d9d9d9")
        self.btnAVRClock.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnAVRClock_click))
        self.btnAVRClock.configure(disabledforeground="#a3a3a3")
        self.btnAVRClock.configure(font="-family {Tahoma} -size 8")
        self.btnAVRClock.configure(foreground="#000000")
        self.btnAVRClock.configure(highlightbackground="#d9d9d9")
        self.btnAVRClock.configure(highlightcolor="black")
        self.btnAVRClock.configure(text="""|>""")

        self.lblTimezone = tk.Label(self.tabSettings)
        self.lblTimezone.place(x=40, y=160, height=24, width=75)
        self.lblTimezone.configure(activebackground="#f9f9f9")
        self.lblTimezone.configure(activeforeground="black")
        self.lblTimezone.configure(background="#d9d9d9")
        self.lblTimezone.configure(disabledforeground="#a3a3a3")
        self.lblTimezone.configure(foreground="#000000")
        self.lblTimezone.configure(highlightbackground="#d9d9d9")
        self.lblTimezone.configure(highlightcolor="black")
        self.lblTimezone.configure(relief="groove")
        self.lblTimezone.configure(text="""TimeZone""")

        self.spnTimezone = tk.Spinbox(self.tabSettings, from_=-12.0, to=14.0)
        self.spnTimezone.place(x=120, y=160, height=24, width=35)
        self.spnTimezone.configure(activebackground="#f9f9f9")
        self.spnTimezone.configure(background="white")
        self.spnTimezone.configure(borderwidth="2")
        self.spnTimezone.configure(buttonbackground="#d9d9d9")
        self.spnTimezone.bind("<ButtonRelease-1>", lambda e: self.after(1, self.spnTimezone_click))
        self.spnTimezone.configure(disabledforeground="#a3a3a3")
        self.spnTimezone.configure(font="TkDefaultFont")
        self.spnTimezone.configure(foreground="black")
        self.spnTimezone.configure(highlightbackground="black")
        self.spnTimezone.configure(highlightcolor="black")
        self.spnTimezone.configure(insertbackground="black")
        self.spnTimezone.configure(justify="right")
        self.spnTimezone.configure(selectbackground="blue")
        self.spnTimezone.configure(selectforeground="white")
        self.spnTimezone.configure(validate="all")
        self.spnTimezone.configure(textvariable=self.spnTimezone_value)

        self.btnTimezone = tk.Button(self.tabSettings)
        self.btnTimezone.place(x=160, y=160, height=24, width=25)
        self.btnTimezone.configure(activebackground="#ececec")
        self.btnTimezone.configure(activeforeground="#000000")
        self.btnTimezone.configure(background="#d9d9d9")
        self.btnTimezone.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnTimezone_click))
        self.btnTimezone.configure(disabledforeground="#a3a3a3")
        self.btnTimezone.configure(font="-family {Tahoma} -size 8")
        self.btnTimezone.configure(foreground="#000000")
        self.btnTimezone.configure(highlightbackground="#d9d9d9")
        self.btnTimezone.configure(highlightcolor="black")
        self.btnTimezone.configure(text="""|>""")

        self.lblTimeSummer = tk.Label(self.tabSettings)
        self.lblTimeSummer.place(x=195, y=160, height=24, width=75)
        self.lblTimeSummer.configure(activebackground="#f9f9f9")
        self.lblTimeSummer.configure(activeforeground="black")
        self.lblTimeSummer.configure(background="#d9d9d9")
        self.lblTimeSummer.configure(disabledforeground="#a3a3a3")
        self.lblTimeSummer.configure(foreground="#000000")
        self.lblTimeSummer.configure(highlightbackground="#d9d9d9")
        self.lblTimeSummer.configure(highlightcolor="black")
        self.lblTimeSummer.configure(relief="groove")
        self.lblTimeSummer.configure(text="""SummerTime""")

        self.tgTimeSummer = tk.Checkbutton(self.tabSettings)
        self.tgTimeSummer.place(x=275, y=160, height=24, width=25)
        self.tgTimeSummer.configure(activebackground="#d9d9d9")
        self.tgTimeSummer.configure(activeforeground="#000000")
        self.tgTimeSummer.configure(background="#d9d9d9")
        self.tgTimeSummer.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgTimeSummer_click))
        self.tgTimeSummer.configure(disabledforeground="#a3a3a3")
        self.tgTimeSummer.configure(foreground="#000000")
        self.tgTimeSummer.configure(highlightbackground="#d9d9d9")
        self.tgTimeSummer.configure(highlightcolor="black")
        self.tgTimeSummer.configure(indicatoron="0")
        self.tgTimeSummer.configure(justify="left")
        self.tgTimeSummer.configure(selectcolor="#d9d9d9")
        #self.tgTimeSummer.configure(text="""SET""")
        self.tgTimeSummer.configure(variable=self.tgTimeSummer_value)
        self.tgTimeSummer.configure(selectcolor="#8080ff")

        self.btnTimeSummer = tk.Button(self.tabSettings)
        self.btnTimeSummer.place(x=305, y=160, height=24, width=25)
        self.btnTimeSummer.configure(activebackground="#ececec")
        self.btnTimeSummer.configure(activeforeground="#000000")
        self.btnTimeSummer.configure(background="#d9d9d9")
        self.btnTimeSummer.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnTimeSummer_click))
        self.btnTimeSummer.configure(disabledforeground="#a3a3a3")
        self.btnTimeSummer.configure(font="-family {Tahoma} -size 8")
        self.btnTimeSummer.configure(foreground="#000000")
        self.btnTimeSummer.configure(highlightbackground="#d9d9d9")
        self.btnTimeSummer.configure(highlightcolor="black")
        self.btnTimeSummer.configure(text="""|>""")


        self.lblTimeTmrOffset = tk.Label(self.tabSettings)
        self.lblTimeTmrOffset.place(x=350, y=160, height=24, width=75)
        self.lblTimeTmrOffset.configure(activebackground="#f9f9f9")
        self.lblTimeTmrOffset.configure(activeforeground="black")
        self.lblTimeTmrOffset.configure(background="#d9d9d9")
        self.lblTimeTmrOffset.configure(disabledforeground="#a3a3a3")
        self.lblTimeTmrOffset.configure(foreground="#000000")
        self.lblTimeTmrOffset.configure(highlightbackground="#d9d9d9")
        self.lblTimeTmrOffset.configure(highlightcolor="black")
        self.lblTimeTmrOffset.configure(relief="groove")
        self.lblTimeTmrOffset.configure(text="""TmrOffset""")

        self.spnTimeTmrOffset = tk.Spinbox(self.tabSettings, from_=-128.0, to=128.0)
        self.spnTimeTmrOffset.place(x=430, y=160, height=24, width=45)
        self.spnTimeTmrOffset.configure(activebackground="#f9f9f9")
        self.spnTimeTmrOffset.configure(background="white")
        self.spnTimeTmrOffset.configure(borderwidth="2")
        self.spnTimeTmrOffset.configure(buttonbackground="#d9d9d9")
        self.spnTimeTmrOffset.bind("<ButtonRelease-1>", lambda e: self.after(1, self.spnTimeTmrOffset_click))
        self.spnTimeTmrOffset.configure(disabledforeground="#a3a3a3")
        self.spnTimeTmrOffset.configure(font="TkDefaultFont")
        self.spnTimeTmrOffset.configure(foreground="black")
        self.spnTimeTmrOffset.configure(highlightbackground="black")
        self.spnTimeTmrOffset.configure(highlightcolor="black")
        self.spnTimeTmrOffset.configure(insertbackground="black")
        self.spnTimeTmrOffset.configure(justify="right")
        self.spnTimeTmrOffset.configure(selectbackground="blue")
        self.spnTimeTmrOffset.configure(selectforeground="white")
        self.spnTimeTmrOffset.configure(validate="all")
        self.spnTimeTmrOffset.configure(textvariable=self.spnTimeTmrOffset_value)

        self.btnTimeTmrOffset = tk.Button(self.tabSettings)
        self.btnTimeTmrOffset.place(x=480, y=160, height=24, width=25)
        self.btnTimeTmrOffset.configure(activebackground="#ececec")
        self.btnTimeTmrOffset.configure(activeforeground="#000000")
        self.btnTimeTmrOffset.configure(background="#d9d9d9")
        self.btnTimeTmrOffset.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnTimeTmrOffset_click))
        self.btnTimeTmrOffset.configure(disabledforeground="#a3a3a3")
        self.btnTimeTmrOffset.configure(font="-family {Tahoma} -size 8")
        self.btnTimeTmrOffset.configure(foreground="#000000")
        self.btnTimeTmrOffset.configure(highlightbackground="#d9d9d9")
        self.btnTimeTmrOffset.configure(highlightcolor="black")
        self.btnTimeTmrOffset.configure(text="""|>""")


        self.lblPosition = tk.Label(self.tabSettings)
        self.lblPosition.place(x=40, y=310, height=24, width=75)
        self.lblPosition.configure(activebackground="#f9f9f9")
        self.lblPosition.configure(activeforeground="black")
        self.lblPosition.configure(background="#d9d9d9")
        self.lblPosition.configure(disabledforeground="#a3a3a3")
        self.lblPosition.configure(foreground="#000000")
        self.lblPosition.configure(highlightbackground="#d9d9d9")
        self.lblPosition.configure(highlightcolor="black")
        self.lblPosition.configure(relief="groove")
        self.lblPosition.configure(text="""POSITION""")

        self.txtPositionLat = tk.Entry(self.tabSettings)
        self.txtPositionLat.place(x=120, y=310, height=24, width=150)
        self.txtPositionLat.configure(background="white")
        self.txtPositionLat.configure(borderwidth="2")
        self.txtPositionLat.configure(disabledforeground="#a3a3a3")
        self.txtPositionLat.configure(font="TkFixedFont")
        self.txtPositionLat.configure(foreground="#000000")
        self.txtPositionLat.configure(highlightbackground="#d9d9d9")
        self.txtPositionLat.configure(highlightcolor="black")
        self.txtPositionLat.configure(insertbackground="black")
        self.txtPositionLat.configure(selectbackground="blue")
        self.txtPositionLat.configure(selectforeground="white")
        self.txtPositionLat.configure(textvariable=self.txtPositionLat_value)
        self.txtPositionLat.configure(validate="all")
        self.txtPositionLat.configure(justify="center")
        #self.txtPositionLat.configure(font="-family {Courier New}")
        self.txtPositionLat_value.trace_variable("w", self.txtPositionLat_change)

        self.txtPositionLon = tk.Entry(self.tabSettings)
        self.txtPositionLon.place(x=275, y=310, height=24, width=150)
        self.txtPositionLon.configure(background="white")
        self.txtPositionLon.configure(borderwidth="2")
        self.txtPositionLon.configure(disabledforeground="#a3a3a3")
        self.txtPositionLon.configure(font="TkFixedFont")
        self.txtPositionLon.configure(foreground="#000000")
        self.txtPositionLon.configure(highlightbackground="#d9d9d9")
        self.txtPositionLon.configure(highlightcolor="black")
        self.txtPositionLon.configure(insertbackground="black")
        self.txtPositionLon.configure(selectbackground="blue")
        self.txtPositionLon.configure(selectforeground="white")
        self.txtPositionLon.configure(textvariable=self.txtPositionLon_value)
        self.txtPositionLon.configure(validate="all")
        self.txtPositionLon.configure(justify="center")
        #self.txtPositionLon.configure(font="-family {Courier New}")
        self.txtPositionLon_value.trace_variable("w", self.txtPositionLon_change)

        self.btnPosition = tk.Button(self.tabSettings)
        self.btnPosition.place(x=430, y=310, height=24, width=25)
        self.btnPosition.configure(activebackground="#ececec")
        self.btnPosition.configure(activeforeground="#000000")
        self.btnPosition.configure(background="#d9d9d9")
        self.btnPosition.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnPosition_click))
        self.btnPosition.configure(disabledforeground="#a3a3a3")
        self.btnPosition.configure(font="-family {Tahoma} -size 8")
        self.btnPosition.configure(foreground="#000000")
        self.btnPosition.configure(highlightbackground="#d9d9d9")
        self.btnPosition.configure(highlightcolor="black")
        self.btnPosition.configure(text="""|>""")

        if not PY2:
            self.btnPickMap = tk.Button(self.tabSettings)
            self.btnPickMap.place(x=485, y=310, height=24, width=50)
            self.btnPickMap.configure(activebackground="#ececec")
            self.btnPickMap.configure(activeforeground="#000000")
            self.btnPickMap.configure(background="#d9d9d9")
            self.btnPickMap.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnPickMap_click))
            self.btnPickMap.configure(disabledforeground="#a3a3a3")
            self.btnPickMap.configure(font="-family {Tahoma} -size 8")
            self.btnPickMap.configure(foreground="#000000")
            self.btnPickMap.configure(highlightbackground="#d9d9d9")
            self.btnPickMap.configure(highlightcolor="black")
            self.btnPickMap.configure(text="""Map |>""")


        self.lblSunrise = tk.Label(self.tabSettings)
        self.lblSunrise.place(x=40, y=190, height=24, width=75)
        self.lblSunrise.configure(activebackground="#f9f9f9")
        self.lblSunrise.configure(activeforeground="black")
        self.lblSunrise.configure(background="#d9d9d9")
        self.lblSunrise.configure(disabledforeground="#a3a3a3")
        self.lblSunrise.configure(foreground="#000000")
        self.lblSunrise.configure(highlightbackground="#d9d9d9")
        self.lblSunrise.configure(highlightcolor="black")
        self.lblSunrise.configure(relief="groove")
        self.lblSunrise.configure(text="""Sunrise/-set""")

        self.cbSunrise = ttk.Combobox(self.tabSettings)
        self.cbSunrise.place(x=120, y=190, height=24, width=100)
        self.cbSunrise.configure(background="#d9d9d9")
        self.cbSunrise.configure(foreground="#000000")
        self.cbSunrise_list = ["OFFICIAL", "CIVIL", "NAUTICAL", "ASTRONOMICAL", "CUSTOM", ]
        self.cbSunrise.configure(values=self.cbSunrise_list)
        self.cbSunrise.configure(textvariable=self.cbSunrise_value)
        self.cbSunrise.configure(takefocus="")
        self.cbSunrise.configure(state="readonly")
        self.cbSunrise.bind("<<ComboboxSelected>>", lambda e: self.focus())
        self.cbSunrise.current(0)

        self.spnSunriseOffset = tk.Spinbox(self.tabSettings, from_=5.0, to=255.0, increment=5.0)
        self.spnSunriseOffset.place(x=225, y=190, height=24, width=45)
        self.spnSunriseOffset.configure(activebackground="#f9f9f9")
        self.spnSunriseOffset.configure(background="white")
        self.spnSunriseOffset.configure(borderwidth="2")
        self.spnSunriseOffset.configure(buttonbackground="#d9d9d9")
        self.spnSunriseOffset.bind("<ButtonRelease-1>", lambda e: self.after(1, self.spnSunriseOffset_click))
        self.spnSunriseOffset.configure(disabledforeground="#a3a3a3")
        self.spnSunriseOffset.configure(font="TkDefaultFont")
        self.spnSunriseOffset.configure(foreground="black")
        self.spnSunriseOffset.configure(highlightbackground="black")
        self.spnSunriseOffset.configure(highlightcolor="black")
        self.spnSunriseOffset.configure(insertbackground="black")
        self.spnSunriseOffset.configure(justify="right")
        self.spnSunriseOffset.configure(selectbackground="blue")
        self.spnSunriseOffset.configure(selectforeground="white")
        self.spnSunriseOffset.configure(validate="all")
        self.spnSunriseOffset.configure(textvariable=self.spnSunriseOffset_value)

        self.btnSunrise = tk.Button(self.tabSettings)
        self.btnSunrise.place(x=510, y=190, height=24, width=25)
        self.btnSunrise.configure(activebackground="#ececec")
        self.btnSunrise.configure(activeforeground="#000000")
        self.btnSunrise.configure(background="#d9d9d9")
        self.btnSunrise.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnSunrise_click))
        self.btnSunrise.configure(disabledforeground="#a3a3a3")
        self.btnSunrise.configure(font="-family {Tahoma} -size 8")
        self.btnSunrise.configure(foreground="#000000")
        self.btnSunrise.configure(highlightbackground="#d9d9d9")
        self.btnSunrise.configure(highlightcolor="black")
        self.btnSunrise.configure(text="""|>""")

        self.tgWelMsg = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgWelMsg.place(x=10, y=10, height=24, width=25)
        self.tgWelMsg.configure(activebackground="#d9d9d9")
        self.tgWelMsg.configure(activeforeground="#000000")
        self.tgWelMsg.configure(background="#d9d9d9")
        self.tgWelMsg.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgWelMsg_click))
        self.tgWelMsg.configure(disabledforeground="#a3a3a3")
        self.tgWelMsg.configure(foreground="#000000")
        self.tgWelMsg.configure(highlightbackground="#d9d9d9")
        self.tgWelMsg.configure(highlightcolor="black")
        self.tgWelMsg.configure(indicatoron="0")
        self.tgWelMsg.configure(justify="left")
        self.tgWelMsg.configure(selectcolor="#d9d9d9")
        self.tgWelMsg.configure(variable=self.tgWelMsg_value)
        self.tgWelMsg.configure(selectcolor="#8080ff")



        self.Label1_2_3 = tk.Label(self.tabWelcomeLeaving)
        self.Label1_2_3.place(x=40, y=10, height=24, width=75)
        self.Label1_2_3.configure(activebackground="#f9f9f9")
        self.Label1_2_3.configure(activeforeground="black")
        self.Label1_2_3.configure(background="#d9d9d9")
        self.Label1_2_3.configure(disabledforeground="#a3a3a3")
        self.Label1_2_3.configure(foreground="#000000")
        self.Label1_2_3.configure(highlightbackground="#d9d9d9")
        self.Label1_2_3.configure(highlightcolor="black")
        self.Label1_2_3.configure(relief="groove")
        self.Label1_2_3.configure(text="""WEL MSG""")


        self.Label1_2_7 = tk.Label(self.tabWelcomeLeaving)
        self.Label1_2_7.place(x=40, y=130, height=24, width=75)
        self.Label1_2_7.configure(activebackground="#f9f9f9")
        self.Label1_2_7.configure(activeforeground="black")
        self.Label1_2_7.configure(background="#d9d9d9")
        self.Label1_2_7.configure(disabledforeground="#a3a3a3")
        self.Label1_2_7.configure(foreground="#000000")
        self.Label1_2_7.configure(highlightbackground="#d9d9d9")
        self.Label1_2_7.configure(highlightcolor="black")
        self.Label1_2_7.configure(relief="groove")
        self.Label1_2_7.configure(text="""SENSOR""")

        self.Label1_2_8 = tk.Label(self.tabWelcomeLeaving)
        self.Label1_2_8.place(x=40, y=160, height=24, width=75)
        self.Label1_2_8.configure(activebackground="#f9f9f9")
        self.Label1_2_8.configure(activeforeground="black")
        self.Label1_2_8.configure(background="#d9d9d9")
        self.Label1_2_8.configure(disabledforeground="#a3a3a3")
        self.Label1_2_8.configure(foreground="#000000")
        self.Label1_2_8.configure(highlightbackground="#d9d9d9")
        self.Label1_2_8.configure(highlightcolor="black")
        self.Label1_2_8.configure(relief="groove")
        self.Label1_2_8.configure(text="""LIGHT PARK""")

        self.Label1_2_9 = tk.Label(self.tabWelcomeLeaving)
        self.Label1_2_9.place(x=40, y=190, height=24, width=75)
        self.Label1_2_9.configure(activebackground="#f9f9f9")
        self.Label1_2_9.configure(activeforeground="black")
        self.Label1_2_9.configure(background="#d9d9d9")
        self.Label1_2_9.configure(disabledforeground="#a3a3a3")
        self.Label1_2_9.configure(foreground="#000000")
        self.Label1_2_9.configure(highlightbackground="#d9d9d9")
        self.Label1_2_9.configure(highlightcolor="black")
        self.Label1_2_9.configure(relief="groove")
        self.Label1_2_9.configure(text="""LIGHT BEAM""")

        self.Label1_2_10 = tk.Label(self.tabWelcomeLeaving)
        self.Label1_2_10.place(x=40, y=220, height=24, width=75)
        self.Label1_2_10.configure(activebackground="#f9f9f9")
        self.Label1_2_10.configure(activeforeground="black")
        self.Label1_2_10.configure(background="#d9d9d9")
        self.Label1_2_10.configure(disabledforeground="#a3a3a3")
        self.Label1_2_10.configure(foreground="#000000")
        self.Label1_2_10.configure(highlightbackground="#d9d9d9")
        self.Label1_2_10.configure(highlightcolor="black")
        self.Label1_2_10.configure(relief="groove")
        self.Label1_2_10.configure(text="""LIGHT TURN""")

        self.Label1_2_11 = tk.Label(self.tabWelcomeLeaving)
        self.Label1_2_11.place(x=40, y=250, height=24, width=75)
        self.Label1_2_11.configure(activebackground="#f9f9f9")
        self.Label1_2_11.configure(activeforeground="black")
        self.Label1_2_11.configure(background="#d9d9d9")
        self.Label1_2_11.configure(disabledforeground="#a3a3a3")
        self.Label1_2_11.configure(foreground="#000000")
        self.Label1_2_11.configure(highlightbackground="#d9d9d9")
        self.Label1_2_11.configure(highlightcolor="black")
        self.Label1_2_11.configure(relief="groove")
        self.Label1_2_11.configure(text="""LIGHT OTH.""")



        self.tgWelLight = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgWelLight.place(x=10, y=40, height=24, width=25)
        self.tgWelLight.configure(activebackground="#d9d9d9")
        self.tgWelLight.configure(activeforeground="#000000")
        self.tgWelLight.configure(background="#d9d9d9")
        self.tgWelLight.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgWelLight_click))
        self.tgWelLight.configure(disabledforeground="#a3a3a3")
        self.tgWelLight.configure(foreground="#000000")
        self.tgWelLight.configure(highlightbackground="#d9d9d9")
        self.tgWelLight.configure(highlightcolor="black")
        self.tgWelLight.configure(indicatoron="0")
        self.tgWelLight.configure(justify="left")
        self.tgWelLight.configure(selectcolor="#d9d9d9")
        self.tgWelLight.configure(variable=self.tgWelLight_value)
        self.tgWelLight.configure(selectcolor="#8080ff")

        self.Label1_2_5 = tk.Label(self.tabWelcomeLeaving)
        self.Label1_2_5.place(x=40, y=40, height=24, width=75)
        self.Label1_2_5.configure(activebackground="#f9f9f9")
        self.Label1_2_5.configure(activeforeground="black")
        self.Label1_2_5.configure(background="#d9d9d9")
        self.Label1_2_5.configure(disabledforeground="#a3a3a3")
        self.Label1_2_5.configure(foreground="#000000")
        self.Label1_2_5.configure(highlightbackground="#d9d9d9")
        self.Label1_2_5.configure(highlightcolor="black")
        self.Label1_2_5.configure(relief="groove")
        self.Label1_2_5.configure(text="""WEL LIGHT""")

        self.spnWelLightTime = tk.Spinbox(self.tabWelcomeLeaving, from_=5.0, to=120.0)
        self.spnWelLightTime.place(x=120, y=40, height=24, width=45)
        self.spnWelLightTime.configure(activebackground="#f9f9f9")
        self.spnWelLightTime.configure(background="white")
        self.spnWelLightTime.configure(borderwidth="2")
        self.spnWelLightTime.configure(buttonbackground="#d9d9d9")
        self.spnWelLightTime.bind("<ButtonRelease-1>", lambda e: self.after(1, self.spnWelLightTime_click))
        self.spnWelLightTime.configure(disabledforeground="#a3a3a3")
        self.spnWelLightTime.configure(font="TkDefaultFont")
        self.spnWelLightTime.configure(foreground="black")
        self.spnWelLightTime.configure(highlightbackground="black")
        self.spnWelLightTime.configure(highlightcolor="black")
        self.spnWelLightTime.configure(insertbackground="black")
        self.spnWelLightTime.configure(justify="right")
        self.spnWelLightTime.configure(selectbackground="blue")
        self.spnWelLightTime.configure(selectforeground="white")
        self.spnWelLightTime.configure(validate="all")
        self.spnWelLightTime.configure(textvariable=self.spnWelLightTime_value)

        self.Label2_1_1_1 = tk.Label(self.tabWelcomeLeaving)
        self.Label2_1_1_1.place(x=165, y=40, height=24, width=15)
        self.Label2_1_1_1.configure(activebackground="#f9f9f9")
        self.Label2_1_1_1.configure(activeforeground="black")
        self.Label2_1_1_1.configure(background="#d9d9d9")
        self.Label2_1_1_1.configure(disabledforeground="#a3a3a3")
        self.Label2_1_1_1.configure(foreground="#000000")
        self.Label2_1_1_1.configure(highlightbackground="#d9d9d9")
        self.Label2_1_1_1.configure(highlightcolor="black")
        self.Label2_1_1_1.configure(text="""s""")

        self.Label1_2_12_1 = tk.Label(self.tabWelcomeLeaving)
        self.Label1_2_12_1.place(x=185, y=40, height=24, width=55)
        self.Label1_2_12_1.configure(activebackground="#f9f9f9")
        self.Label1_2_12_1.configure(activeforeground="black")
        self.Label1_2_12_1.configure(background="#d9d9d9")
        self.Label1_2_12_1.configure(disabledforeground="#a3a3a3")
        self.Label1_2_12_1.configure(foreground="#000000")
        self.Label1_2_12_1.configure(highlightbackground="#d9d9d9")
        self.Label1_2_12_1.configure(highlightcolor="black")
        self.Label1_2_12_1.configure(relief="groove")
        self.Label1_2_12_1.configure(text="""CANCEL""")

        self.tgWelLightCancelIgn3 = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgWelLightCancelIgn3.place(x=245, y=40, height=24, width=45)
        self.tgWelLightCancelIgn3.configure(activebackground="#d9d9d9")
        self.tgWelLightCancelIgn3.configure(activeforeground="#000000")
        self.tgWelLightCancelIgn3.configure(background="#d9d9d9")
        self.tgWelLightCancelIgn3.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgWelLightCancelIgn3_click))
        self.tgWelLightCancelIgn3.configure(disabledforeground="#a3a3a3")
        self.tgWelLightCancelIgn3.configure(foreground="#000000")
        self.tgWelLightCancelIgn3.configure(highlightbackground="#d9d9d9")
        self.tgWelLightCancelIgn3.configure(highlightcolor="black")
        self.tgWelLightCancelIgn3.configure(indicatoron="0")
        self.tgWelLightCancelIgn3.configure(justify="left")
        self.tgWelLightCancelIgn3.configure(selectcolor="#d9d9d9")
        self.tgWelLightCancelIgn3.configure(text="Ign 3")
        self.tgWelLightCancelIgn3.configure(state="disabled")
        self.tgWelLightCancelIgn3.configure(variable=self.tgWelLightCancelIgn3_value)

        self.tgWelLightCancelKeyIn = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgWelLightCancelKeyIn.place(x=295, y=40, height=24, width=45)
        self.tgWelLightCancelKeyIn.configure(activebackground="#d9d9d9")
        self.tgWelLightCancelKeyIn.configure(activeforeground="#000000")
        self.tgWelLightCancelKeyIn.configure(background="#d9d9d9")
        self.tgWelLightCancelKeyIn.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgWelLightCancelKeyIn_click))
        self.tgWelLightCancelKeyIn.configure(disabledforeground="#a3a3a3")
        self.tgWelLightCancelKeyIn.configure(foreground="#000000")
        self.tgWelLightCancelKeyIn.configure(highlightbackground="#d9d9d9")
        self.tgWelLightCancelKeyIn.configure(highlightcolor="black")
        self.tgWelLightCancelKeyIn.configure(indicatoron="0")
        self.tgWelLightCancelKeyIn.configure(justify="left")
        self.tgWelLightCancelKeyIn.configure(selectcolor="#d9d9d9")
        self.tgWelLightCancelKeyIn.configure(text="""Key in""")
        self.tgWelLightCancelKeyIn.configure(variable=self.tgWelLightCancelKeyIn_value)

        self.tgWelLightCancelDoor = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgWelLightCancelDoor.place(x=345, y=40, height=24, width=45)
        self.tgWelLightCancelDoor.configure(activebackground="#d9d9d9")
        self.tgWelLightCancelDoor.configure(activeforeground="#000000")
        self.tgWelLightCancelDoor.configure(background="#d9d9d9")
        self.tgWelLightCancelDoor.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgWelLightCancelDoor_click))
        self.tgWelLightCancelDoor.configure(disabledforeground="#a3a3a3")
        self.tgWelLightCancelDoor.configure(foreground="#000000")
        self.tgWelLightCancelDoor.configure(highlightbackground="#d9d9d9")
        self.tgWelLightCancelDoor.configure(highlightcolor="black")
        self.tgWelLightCancelDoor.configure(indicatoron="0")
        self.tgWelLightCancelDoor.configure(justify="left")
        self.tgWelLightCancelDoor.configure(selectcolor="#d9d9d9")
        self.tgWelLightCancelDoor.configure(text="""Door""")
        self.tgWelLightCancelDoor.configure(variable=self.tgWelLightCancelDoor_value)

        self.tgWelLightCancelIgn1 = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgWelLightCancelIgn1.place(x=395, y=40, height=24, width=45)
        self.tgWelLightCancelIgn1.configure(activebackground="#d9d9d9")
        self.tgWelLightCancelIgn1.configure(activeforeground="#000000")
        self.tgWelLightCancelIgn1.configure(background="#d9d9d9")
        self.tgWelLightCancelIgn1.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgWelLightCancelIgn1_click))
        self.tgWelLightCancelIgn1.configure(disabledforeground="#a3a3a3")
        self.tgWelLightCancelIgn1.configure(foreground="#000000")
        self.tgWelLightCancelIgn1.configure(highlightbackground="#d9d9d9")
        self.tgWelLightCancelIgn1.configure(highlightcolor="black")
        self.tgWelLightCancelIgn1.configure(indicatoron="0")
        self.tgWelLightCancelIgn1.configure(justify="left")
        self.tgWelLightCancelIgn1.configure(selectcolor="#d9d9d9")
        self.tgWelLightCancelIgn1.configure(text="""Ign 1""")
        self.tgWelLightCancelIgn1.configure(variable=self.tgWelLightCancelIgn1_value)

        self.btnWelLight = tk.Button(self.tabWelcomeLeaving)
        self.btnWelLight.place(x=510, y=40, height=24, width=25)
        self.btnWelLight.configure(activebackground="#ececec")
        self.btnWelLight.configure(activeforeground="#000000")
        self.btnWelLight.configure(background="#d9d9d9")
        self.btnWelLight.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnWelLight_click))
        self.btnWelLight.configure(disabledforeground="#a3a3a3")
        self.btnWelLight.configure(font="-family {Tahoma} -size 8")
        self.btnWelLight.configure(foreground="#000000")
        self.btnWelLight.configure(highlightbackground="#d9d9d9")
        self.btnWelLight.configure(highlightcolor="black")
        self.btnWelLight.configure(text="""|>""")


        self.tgLightParkFront = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightParkFront.place(x=120, y=160, height=24, width=40)
        self.tgLightParkFront.configure(activebackground="#d9d9d9")
        self.tgLightParkFront.configure(activeforeground="#000000")
        self.tgLightParkFront.configure(background="#d9d9d9")
        self.tgLightParkFront.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgLightParkFront_click))
        self.tgLightParkFront.configure(disabledforeground="#a3a3a3")
        self.tgLightParkFront.configure(foreground="#000000")
        self.tgLightParkFront.configure(highlightbackground="#d9d9d9")
        self.tgLightParkFront.configure(highlightcolor="black")
        self.tgLightParkFront.configure(indicatoron="0")
        self.tgLightParkFront.configure(justify="left")
        self.tgLightParkFront.configure(selectcolor="#d9d9d9")
        self.tgLightParkFront.configure(text="""Front""")
        self.tgLightParkFront.configure(variable=self.tgLightParkFront_value)

        self.tgLightParkBack = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightParkBack.place(x=165, y=160, height=24, width=40)
        self.tgLightParkBack.configure(activebackground="#d9d9d9")
        self.tgLightParkBack.configure(activeforeground="#000000")
        self.tgLightParkBack.configure(background="#d9d9d9")
        self.tgLightParkBack.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgLightParkBack_click))
        self.tgLightParkBack.configure(disabledforeground="#a3a3a3")
        self.tgLightParkBack.configure(foreground="#000000")
        self.tgLightParkBack.configure(highlightbackground="#d9d9d9")
        self.tgLightParkBack.configure(highlightcolor="black")
        self.tgLightParkBack.configure(indicatoron="0")
        self.tgLightParkBack.configure(justify="left")
        self.tgLightParkBack.configure(selectcolor="#d9d9d9")
        self.tgLightParkBack.configure(text="""Back""")
        self.tgLightParkBack.configure(variable=self.tgLightParkBack_value)

        self.tgLightParkBackInside = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightParkBackInside.place(x=210, y=160, height=24, width=75)
        self.tgLightParkBackInside.configure(activebackground="#d9d9d9")
        self.tgLightParkBackInside.configure(activeforeground="#000000")
        self.tgLightParkBackInside.configure(background="#d9d9d9")
        self.tgLightParkBackInside.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgLightParkBackInside_click))
        self.tgLightParkBackInside.configure(disabledforeground="#a3a3a3")
        self.tgLightParkBackInside.configure(foreground="#000000")
        self.tgLightParkBackInside.configure(highlightbackground="#d9d9d9")
        self.tgLightParkBackInside.configure(highlightcolor="black")
        self.tgLightParkBackInside.configure(indicatoron="0")
        self.tgLightParkBackInside.configure(justify="left")
        self.tgLightParkBackInside.configure(selectcolor="#d9d9d9")
        self.tgLightParkBackInside.configure(text="""Back Indside""")
        self.tgLightParkBackInside.configure(variable=self.tgLightParkBackInside_value)

        self.tgLightBeamLow = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightBeamLow.place(x=120, y=190, height=24, width=40)
        self.tgLightBeamLow.configure(activebackground="#d9d9d9")
        self.tgLightBeamLow.configure(activeforeground="#000000")
        self.tgLightBeamLow.configure(background="#d9d9d9")
        self.tgLightBeamLow.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgLightBeamLow_click))
        self.tgLightBeamLow.configure(disabledforeground="#a3a3a3")
        self.tgLightBeamLow.configure(foreground="#000000")
        self.tgLightBeamLow.configure(highlightbackground="#d9d9d9")
        self.tgLightBeamLow.configure(highlightcolor="black")
        self.tgLightBeamLow.configure(indicatoron="0")
        self.tgLightBeamLow.configure(justify="left")
        self.tgLightBeamLow.configure(selectcolor="#d9d9d9")
        self.tgLightBeamLow.configure(text="""Low""")
        self.tgLightBeamLow.configure(variable=self.tgLightBeamLow_value)

        self.tgLightBeamHigh = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightBeamHigh.place(x=165, y=190, height=24, width=40)
        self.tgLightBeamHigh.configure(activebackground="#d9d9d9")
        self.tgLightBeamHigh.configure(activeforeground="#000000")
        self.tgLightBeamHigh.configure(background="#d9d9d9")
        self.tgLightBeamHigh.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgLightBeamHigh_click))
        self.tgLightBeamHigh.configure(disabledforeground="#a3a3a3")
        self.tgLightBeamHigh.configure(foreground="#000000")
        self.tgLightBeamHigh.configure(highlightbackground="#d9d9d9")
        self.tgLightBeamHigh.configure(highlightcolor="black")
        self.tgLightBeamHigh.configure(indicatoron="0")
        self.tgLightBeamHigh.configure(justify="left")
        self.tgLightBeamHigh.configure(selectcolor="#d9d9d9")
        self.tgLightBeamHigh.configure(text="""High""")
        self.tgLightBeamHigh.configure(variable=self.tgLightBeamHigh_value)

        self.tgLightTurnFront = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightTurnFront.place(x=120, y=220, height=24, width=40)
        self.tgLightTurnFront.configure(activebackground="#d9d9d9")
        self.tgLightTurnFront.configure(activeforeground="#000000")
        self.tgLightTurnFront.configure(background="#d9d9d9")
        self.tgLightTurnFront.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgLightTurnFront_click))
        self.tgLightTurnFront.configure(disabledforeground="#a3a3a3")
        self.tgLightTurnFront.configure(foreground="#000000")
        self.tgLightTurnFront.configure(highlightbackground="#d9d9d9")
        self.tgLightTurnFront.configure(highlightcolor="black")
        self.tgLightTurnFront.configure(indicatoron="0")
        self.tgLightTurnFront.configure(justify="left")
        self.tgLightTurnFront.configure(selectcolor="#d9d9d9")
        self.tgLightTurnFront.configure(text="""Front""")
        self.tgLightTurnFront.configure(variable=self.tgLightTurnFront_value)

        self.tgLightTurnBack = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightTurnBack.place(x=165, y=220, height=24, width=40)
        self.tgLightTurnBack.configure(activebackground="#d9d9d9")
        self.tgLightTurnBack.configure(activeforeground="#000000")
        self.tgLightTurnBack.configure(background="#d9d9d9")
        self.tgLightTurnBack.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgLightTurnBack_click))
        self.tgLightTurnBack.configure(disabledforeground="#a3a3a3")
        self.tgLightTurnBack.configure(foreground="#000000")
        self.tgLightTurnBack.configure(highlightbackground="#d9d9d9")
        self.tgLightTurnBack.configure(highlightcolor="black")
        self.tgLightTurnBack.configure(indicatoron="0")
        self.tgLightTurnBack.configure(justify="left")
        self.tgLightTurnBack.configure(selectcolor="#d9d9d9")
        self.tgLightTurnBack.configure(text="""Back""")
        self.tgLightTurnBack.configure(variable=self.tgLightTurnBack_value)

        self.tgLightTurnSide = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightTurnSide.place(x=210, y=220, height=24, width=40)
        self.tgLightTurnSide.configure(activebackground="#d9d9d9")
        self.tgLightTurnSide.configure(activeforeground="#000000")
        self.tgLightTurnSide.configure(background="#d9d9d9")
        self.tgLightTurnSide.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgLightTurnSide_click))
        self.tgLightTurnSide.configure(disabledforeground="#a3a3a3")
        self.tgLightTurnSide.configure(foreground="#000000")
        self.tgLightTurnSide.configure(highlightbackground="#d9d9d9")
        self.tgLightTurnSide.configure(highlightcolor="black")
        self.tgLightTurnSide.configure(indicatoron="0")
        self.tgLightTurnSide.configure(justify="left")
        self.tgLightTurnSide.configure(selectcolor="#d9d9d9")
        self.tgLightTurnSide.configure(text="""Side""")
        self.tgLightTurnSide.configure(variable=self.tgLightTurnSide_value)

        self.tgLightOtherFogFront = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightOtherFogFront.place(x=120, y=250, height=24, width=60)
        self.tgLightOtherFogFront.configure(activebackground="#d9d9d9")
        self.tgLightOtherFogFront.configure(activeforeground="#000000")
        self.tgLightOtherFogFront.configure(background="#d9d9d9")
        self.tgLightOtherFogFront.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgLightOtherFogFront_click))
        self.tgLightOtherFogFront.configure(disabledforeground="#a3a3a3")
        self.tgLightOtherFogFront.configure(foreground="#000000")
        self.tgLightOtherFogFront.configure(highlightbackground="#d9d9d9")
        self.tgLightOtherFogFront.configure(highlightcolor="black")
        self.tgLightOtherFogFront.configure(indicatoron="0")
        self.tgLightOtherFogFront.configure(justify="left")
        self.tgLightOtherFogFront.configure(selectcolor="#d9d9d9")
        self.tgLightOtherFogFront.configure(text="""Fog Front""")
        self.tgLightOtherFogFront.configure(variable=self.tgLightOtherFogFront_value)

        self.tgLightOtherLicence = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightOtherLicence.place(x=185, y=250, height=24, width=50)
        self.tgLightOtherLicence.configure(activebackground="#d9d9d9")
        self.tgLightOtherLicence.configure(activeforeground="#000000")
        self.tgLightOtherLicence.configure(background="#d9d9d9")
        self.tgLightOtherLicence.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgLightOtherLicence_click))
        self.tgLightOtherLicence.configure(disabledforeground="#a3a3a3")
        self.tgLightOtherLicence.configure(foreground="#000000")
        self.tgLightOtherLicence.configure(highlightbackground="#d9d9d9")
        self.tgLightOtherLicence.configure(highlightcolor="black")
        self.tgLightOtherLicence.configure(indicatoron="0")
        self.tgLightOtherLicence.configure(justify="left")
        self.tgLightOtherLicence.configure(selectcolor="#d9d9d9")
        self.tgLightOtherLicence.configure(text="""Licence""")
        self.tgLightOtherLicence.configure(variable=self.tgLightOtherLicence_value)

        self.tgLightOtherReverse = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightOtherReverse.place(x=240, y=250, height=24, width=50)
        self.tgLightOtherReverse.configure(activebackground="#d9d9d9")
        self.tgLightOtherReverse.configure(activeforeground="#000000")
        self.tgLightOtherReverse.configure(background="#d9d9d9")
        self.tgLightOtherReverse.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgLightOtherReverse_click))
        self.tgLightOtherReverse.configure(disabledforeground="#a3a3a3")
        self.tgLightOtherReverse.configure(foreground="#000000")
        self.tgLightOtherReverse.configure(highlightbackground="#d9d9d9")
        self.tgLightOtherReverse.configure(highlightcolor="black")
        self.tgLightOtherReverse.configure(indicatoron="0")
        self.tgLightOtherReverse.configure(justify="left")
        self.tgLightOtherReverse.configure(selectcolor="#d9d9d9")
        self.tgLightOtherReverse.configure(text="""Reverse""")
        self.tgLightOtherReverse.configure(variable=self.tgLightOtherReverse_value)

        self.tgLightOtherBrake = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightOtherBrake.place(x=295, y=250, height=24, width=40)
        self.tgLightOtherBrake.configure(activebackground="#d9d9d9")
        self.tgLightOtherBrake.configure(activeforeground="#000000")
        self.tgLightOtherBrake.configure(background="#d9d9d9")
        self.tgLightOtherBrake.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgLightOtherBrake_click))
        self.tgLightOtherBrake.configure(disabledforeground="#a3a3a3")
        self.tgLightOtherBrake.configure(foreground="#000000")
        self.tgLightOtherBrake.configure(highlightbackground="#d9d9d9")
        self.tgLightOtherBrake.configure(highlightcolor="black")
        self.tgLightOtherBrake.configure(indicatoron="0")
        self.tgLightOtherBrake.configure(justify="left")
        self.tgLightOtherBrake.configure(selectcolor="#d9d9d9")
        self.tgLightOtherBrake.configure(text="""Brake""")
        self.tgLightOtherBrake.configure(variable=self.tgLightOtherBrake_value)

        self.tgLightOtherAmbient = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightOtherAmbient.place(x=340, y=250, height=24, width=55)
        self.tgLightOtherAmbient.configure(activebackground="#d9d9d9")
        self.tgLightOtherAmbient.configure(activeforeground="#000000")
        self.tgLightOtherAmbient.configure(background="#d9d9d9")
        self.tgLightOtherAmbient.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgLightOtherAmbient_click))
        self.tgLightOtherAmbient.configure(disabledforeground="#a3a3a3")
        self.tgLightOtherAmbient.configure(foreground="#000000")
        self.tgLightOtherAmbient.configure(highlightbackground="#d9d9d9")
        self.tgLightOtherAmbient.configure(highlightcolor="black")
        self.tgLightOtherAmbient.configure(indicatoron="0")
        self.tgLightOtherAmbient.configure(justify="left")
        self.tgLightOtherAmbient.configure(selectcolor="#d9d9d9")
        self.tgLightOtherAmbient.configure(text="""Ambient""")
        self.tgLightOtherAmbient.configure(variable=self.tgLightOtherAmbient_value)

        self.tgLightOtherFogBack = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightOtherFogBack.place(x=400, y=250, height=24, width=60)
        self.tgLightOtherFogBack.configure(activebackground="#d9d9d9")
        self.tgLightOtherFogBack.configure(activeforeground="#000000")
        self.tgLightOtherFogBack.configure(background="#d9d9d9")
        self.tgLightOtherFogBack.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgLightOtherFogBack_click))
        self.tgLightOtherFogBack.configure(disabledforeground="#a3a3a3")
        self.tgLightOtherFogBack.configure(foreground="#000000")
        self.tgLightOtherFogBack.configure(highlightbackground="#d9d9d9")
        self.tgLightOtherFogBack.configure(highlightcolor="black")
        self.tgLightOtherFogBack.configure(indicatoron="0")
        self.tgLightOtherFogBack.configure(justify="left")
        self.tgLightOtherFogBack.configure(selectcolor="#d9d9d9")
        self.tgLightOtherFogBack.configure(text="""Fog Back""")
        self.tgLightOtherFogBack.configure(variable=self.tgLightOtherFogBack_value)

        self.btnWelMsg = tk.Button(self.tabWelcomeLeaving)
        self.btnWelMsg.place(x=120, y=10, height=24, width=25)
        self.btnWelMsg.configure(activebackground="#ececec")
        self.btnWelMsg.configure(activeforeground="#000000")
        self.btnWelMsg.configure(background="#d9d9d9")
        self.btnWelMsg.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnWelMsg_click))
        self.btnWelMsg.configure(disabledforeground="#a3a3a3")
        self.btnWelMsg.configure(font="-family {Tahoma} -size 8")
        self.btnWelMsg.configure(foreground="#000000")
        self.btnWelMsg.configure(highlightbackground="#d9d9d9")
        self.btnWelMsg.configure(highlightcolor="black")
        self.btnWelMsg.configure(text="""|>""")

        self.Label1_2_4 = tk.Label(self.tabWelcomeLeaving)
        self.Label1_2_4.place(x=165, y=10, height=24, width=75)
        self.Label1_2_4.configure(activebackground="#f9f9f9")
        self.Label1_2_4.configure(activeforeground="black")
        self.Label1_2_4.configure(background="#d9d9d9")
        self.Label1_2_4.configure(disabledforeground="#a3a3a3")
        self.Label1_2_4.configure(foreground="#000000")
        self.Label1_2_4.configure(highlightbackground="#d9d9d9")
        self.Label1_2_4.configure(highlightcolor="black")
        self.Label1_2_4.configure(relief="groove")
        self.Label1_2_4.configure(text="""WEL MSG T""")

        self.txtWelMsg = tk.Entry(self.tabWelcomeLeaving)
        self.txtWelMsg.place(x=245, y=10, height=24, width=239)
        self.txtWelMsg.configure(background="white")
        self.txtWelMsg.configure(borderwidth="2")
        self.txtWelMsg.configure(disabledforeground="#a3a3a3")
        self.txtWelMsg.configure(font="TkFixedFont")
        self.txtWelMsg.configure(foreground="#000000")
        self.txtWelMsg.configure(highlightbackground="#d9d9d9")
        self.txtWelMsg.configure(highlightcolor="black")
        self.txtWelMsg.configure(insertbackground="black")
        self.txtWelMsg.configure(selectbackground="blue")
        self.txtWelMsg.configure(selectforeground="white")
        self.txtWelMsg.configure(textvariable=self.txtWelMsg_value)
        self.txtWelMsg.configure(validate="all")
        self.txtWelMsg.configure(justify="center")
        self.txtWelMsg.configure(font="-family {Courier New}")
        # txtWelMsg_change = (self.txtWelMsg.register(self.txtWelMsg_change), "%V")
        # self.txtWelMsg.configure(validatecommand=(txtWelMsg_change))
        self.txtWelMsg_value.trace_variable("w", self.txtWelMsg_change)


        self.lblWelMsgLen = tk.Label(self.tabWelcomeLeaving)
        self.lblWelMsgLen.place(x=485, y=10, height=24, width=25)
        self.lblWelMsgLen.configure(activebackground="#f9f9f9")
        self.lblWelMsgLen.configure(activeforeground="black")
        self.lblWelMsgLen.configure(background="#d9d9d9")
        self.lblWelMsgLen.configure(disabledforeground="#a3a3a3")
        self.lblWelMsgLen.configure(foreground="#000000")
        self.lblWelMsgLen.configure(highlightbackground="#d9d9d9")
        self.lblWelMsgLen.configure(highlightcolor="black")
        self.lblWelMsgLen.configure(text="""(0)""")
        self.lblWelMsgLen.configure(textvariable=self.lblWelMsgLen_value)

        self.btnWelMsgTxt = tk.Button(self.tabWelcomeLeaving)
        self.btnWelMsgTxt.place(x=510, y=10, height=24, width=25)
        self.btnWelMsgTxt.configure(activebackground="#ececec")
        self.btnWelMsgTxt.configure(activeforeground="#000000")
        self.btnWelMsgTxt.configure(background="#d9d9d9")
        self.btnWelMsgTxt.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnWelMsgTxt_click))
        self.btnWelMsgTxt.configure(disabledforeground="#a3a3a3")
        self.btnWelMsgTxt.configure(font="-family {Tahoma} -size 8")
        self.btnWelMsgTxt.configure(foreground="#000000")
        self.btnWelMsgTxt.configure(highlightbackground="#d9d9d9")
        self.btnWelMsgTxt.configure(highlightcolor="black")
        self.btnWelMsgTxt.configure(text="""|>""")



        self.tgLevLight = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLevLight.place(x=10, y=70, height=24, width=25)
        self.tgLevLight.configure(activebackground="#d9d9d9")
        self.tgLevLight.configure(activeforeground="#000000")
        self.tgLevLight.configure(background="#d9d9d9")
        self.tgLevLight.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgLevLight_click))
        self.tgLevLight.configure(disabledforeground="#a3a3a3")
        self.tgLevLight.configure(foreground="#000000")
        self.tgLevLight.configure(highlightbackground="#d9d9d9")
        self.tgLevLight.configure(highlightcolor="black")
        self.tgLevLight.configure(indicatoron="0")
        self.tgLevLight.configure(justify="left")
        self.tgLevLight.configure(selectcolor="#d9d9d9")
        self.tgLevLight.configure(variable=self.tgLevLight_value)
        self.tgLevLight.configure(selectcolor="#8080ff")

        self.Label1_2_6 = tk.Label(self.tabWelcomeLeaving)
        self.Label1_2_6.place(x=40, y=70, height=24, width=75)
        self.Label1_2_6.configure(activebackground="#f9f9f9")
        self.Label1_2_6.configure(activeforeground="black")
        self.Label1_2_6.configure(background="#d9d9d9")
        self.Label1_2_6.configure(disabledforeground="#a3a3a3")
        self.Label1_2_6.configure(foreground="#000000")
        self.Label1_2_6.configure(highlightbackground="#d9d9d9")
        self.Label1_2_6.configure(highlightcolor="black")
        self.Label1_2_6.configure(relief="groove")
        self.Label1_2_6.configure(text="""LEV LIGHT""")

        self.spnLevLightTime = tk.Spinbox(self.tabWelcomeLeaving, from_=5.0, to=120.0)
        self.spnLevLightTime.place(x=120, y=70, height=24, width=45)
        self.spnLevLightTime.configure(activebackground="#f9f9f9")
        self.spnLevLightTime.configure(background="white")
        self.spnLevLightTime.configure(borderwidth="2")
        self.spnLevLightTime.configure(buttonbackground="#d9d9d9")
        self.spnLevLightTime.bind("<ButtonRelease-1>", lambda e: self.after(1, self.spnLevLightTime_click))
        self.spnLevLightTime.configure(disabledforeground="#a3a3a3")
        self.spnLevLightTime.configure(font="TkDefaultFont")
        self.spnLevLightTime.configure(foreground="black")
        self.spnLevLightTime.configure(highlightbackground="black")
        self.spnLevLightTime.configure(highlightcolor="black")
        self.spnLevLightTime.configure(insertbackground="black")
        self.spnLevLightTime.configure(justify="right")
        self.spnLevLightTime.configure(selectbackground="blue")
        self.spnLevLightTime.configure(selectforeground="white")
        self.spnLevLightTime.configure(validate="all")
        self.spnLevLightTime.configure(textvariable=self.spnLevLightTime_value)

        self.Label2_1_1_2 = tk.Label(self.tabWelcomeLeaving)
        self.Label2_1_1_2.place(x=165, y=70, height=24, width=15)
        self.Label2_1_1_2.configure(activebackground="#f9f9f9")
        self.Label2_1_1_2.configure(activeforeground="black")
        self.Label2_1_1_2.configure(background="#d9d9d9")
        self.Label2_1_1_2.configure(disabledforeground="#a3a3a3")
        self.Label2_1_1_2.configure(foreground="#000000")
        self.Label2_1_1_2.configure(highlightbackground="#d9d9d9")
        self.Label2_1_1_2.configure(highlightcolor="black")
        self.Label2_1_1_2.configure(text="""s""")

        self.btnLevLight = tk.Button(self.tabWelcomeLeaving)
        self.btnLevLight.place(x=510, y=70, height=24, width=25)
        self.btnLevLight.configure(activebackground="#ececec")
        self.btnLevLight.configure(activeforeground="#000000")
        self.btnLevLight.configure(background="#d9d9d9")
        self.btnLevLight.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnLevLight_click))
        self.btnLevLight.configure(disabledforeground="#a3a3a3")
        self.btnLevLight.configure(font="-family {Tahoma} -size 8")
        self.btnLevLight.configure(foreground="#000000")
        self.btnLevLight.configure(highlightbackground="#d9d9d9")
        self.btnLevLight.configure(highlightcolor="black")
        self.btnLevLight.configure(text="""|>""")

        self.tgLightSeq = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightSeq.place(x=10, y=100, height=24, width=25)
        self.tgLightSeq.configure(activebackground="#d9d9d9")
        self.tgLightSeq.configure(activeforeground="#000000")
        self.tgLightSeq.configure(background="#d9d9d9")
        self.tgLightSeq.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgLightSeq_click))
        self.tgLightSeq.configure(disabledforeground="#a3a3a3")
        self.tgLightSeq.configure(foreground="#000000")
        self.tgLightSeq.configure(highlightbackground="#d9d9d9")
        self.tgLightSeq.configure(highlightcolor="black")
        self.tgLightSeq.configure(indicatoron="0")
        self.tgLightSeq.configure(justify="left")
        self.tgLightSeq.configure(selectcolor="#d9d9d9")
        self.tgLightSeq.configure(variable=self.tgLightSeq_value)
        self.tgLightSeq.configure(selectcolor="#8080ff")

        self.lblLightSeq = tk.Label(self.tabWelcomeLeaving)
        self.lblLightSeq.place(x=40, y=100, height=24, width=75)
        self.lblLightSeq.configure(activebackground="#f9f9f9")
        self.lblLightSeq.configure(activeforeground="black")
        self.lblLightSeq.configure(background="#d9d9d9")
        self.lblLightSeq.configure(disabledforeground="#a3a3a3")
        self.lblLightSeq.configure(foreground="#000000")
        self.lblLightSeq.configure(highlightbackground="#d9d9d9")
        self.lblLightSeq.configure(highlightcolor="black")
        self.lblLightSeq.configure(relief="groove")
        self.lblLightSeq.configure(text="""LIGHT SEQ""")

        self.tgLightSeqWel = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightSeqWel.place(x=120, y=100, height=24, width=50)
        self.tgLightSeqWel.configure(activebackground="#d9d9d9")
        self.tgLightSeqWel.configure(activeforeground="#000000")
        self.tgLightSeqWel.configure(background="#d9d9d9")
        self.tgLightSeqWel.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgLightSeqWel_click))
        self.tgLightSeqWel.configure(disabledforeground="#a3a3a3")
        self.tgLightSeqWel.configure(foreground="#000000")
        self.tgLightSeqWel.configure(highlightbackground="#d9d9d9")
        self.tgLightSeqWel.configure(highlightcolor="black")
        self.tgLightSeqWel.configure(indicatoron="0")
        self.tgLightSeqWel.configure(justify="left")
        self.tgLightSeqWel.configure(selectcolor="#d9d9d9")
        self.tgLightSeqWel.configure(text="""Wel""")
        self.tgLightSeqWel.configure(variable=self.tgLightSeqWel_value)

        self.tgLightSeqLev = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightSeqLev.place(x=175, y=100, height=24, width=50)
        self.tgLightSeqLev.configure(activebackground="#d9d9d9")
        self.tgLightSeqLev.configure(activeforeground="#000000")
        self.tgLightSeqLev.configure(background="#d9d9d9")
        self.tgLightSeqLev.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgLightSeqLev_click))
        self.tgLightSeqLev.configure(disabledforeground="#a3a3a3")
        self.tgLightSeqLev.configure(foreground="#000000")
        self.tgLightSeqLev.configure(highlightbackground="#d9d9d9")
        self.tgLightSeqLev.configure(highlightcolor="black")
        self.tgLightSeqLev.configure(indicatoron="0")
        self.tgLightSeqLev.configure(justify="left")
        self.tgLightSeqLev.configure(selectcolor="#d9d9d9")
        self.tgLightSeqLev.configure(text="""Lev""")
        self.tgLightSeqLev.configure(variable=self.tgLightSeqLev_value)

        self.btnLightSeqImport = tk.Button(self.tabWelcomeLeaving)
        self.btnLightSeqImport.place(x=250, y=100, height=24, width=140)
        self.btnLightSeqImport.configure(activebackground="#ececec")
        self.btnLightSeqImport.configure(activeforeground="#000000")
        self.btnLightSeqImport.configure(background="#d9d9d9")
        self.btnLightSeqImport.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnLightSeqImport_click))
        self.btnLightSeqImport.configure(disabledforeground="#a3a3a3")
        self.btnLightSeqImport.configure(font="-family {Tahoma} -size 8")
        self.btnLightSeqImport.configure(foreground="#000000")
        self.btnLightSeqImport.configure(highlightbackground="#d9d9d9")
        self.btnLightSeqImport.configure(highlightcolor="black")
        self.btnLightSeqImport.configure(text="""Import I-Bus App Seq""")


        self.btnLightSeq = tk.Button(self.tabWelcomeLeaving)
        self.btnLightSeq.place(x=510, y=100, height=24, width=25)
        self.btnLightSeq.configure(activebackground="#ececec")
        self.btnLightSeq.configure(activeforeground="#000000")
        self.btnLightSeq.configure(background="#d9d9d9")
        self.btnLightSeq.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnLightSeq_click))
        self.btnLightSeq.configure(disabledforeground="#a3a3a3")
        self.btnLightSeq.configure(font="-family {Tahoma} -size 8")
        self.btnLightSeq.configure(foreground="#000000")
        self.btnLightSeq.configure(highlightbackground="#d9d9d9")
        self.btnLightSeq.configure(highlightcolor="black")
        self.btnLightSeq.configure(text="""|>""")

        self.tgSenVal = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgSenVal.place(x=10, y=130, height=24, width=25)
        self.tgSenVal.configure(activebackground="#d9d9d9")
        self.tgSenVal.configure(activeforeground="#000000")
        self.tgSenVal.configure(background="#d9d9d9")
        self.tgSenVal.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgSenVal_click))
        self.tgSenVal.configure(disabledforeground="#a3a3a3")
        self.tgSenVal.configure(foreground="#000000")
        self.tgSenVal.configure(highlightbackground="#d9d9d9")
        self.tgSenVal.configure(highlightcolor="black")
        self.tgSenVal.configure(indicatoron="0")
        self.tgSenVal.configure(justify="left")
        self.tgSenVal.configure(selectcolor="#d9d9d9")
        self.tgSenVal.configure(variable=self.tgSenVal_value)
        self.tgSenVal.configure(selectcolor="#8080ff")

        self.spnSenVal = tk.Spinbox(self.tabWelcomeLeaving, from_=20.0, to=70.0)
        self.spnSenVal.place(x=120, y=130, height=24, width=45)
        self.spnSenVal.configure(activebackground="#f9f9f9")
        self.spnSenVal.configure(background="white")
        self.spnSenVal.configure(borderwidth="2")
        self.spnSenVal.configure(buttonbackground="#d9d9d9")
        self.spnSenVal.bind("<ButtonRelease-1>", lambda e: self.after(1, self.spnSenVal_click))
        self.spnSenVal.configure(disabledforeground="#a3a3a3")
        self.spnSenVal.configure(font="TkDefaultFont")
        self.spnSenVal.configure(foreground="black")
        self.spnSenVal.configure(highlightbackground="black")
        self.spnSenVal.configure(highlightcolor="black")
        self.spnSenVal.configure(increment="5.0")
        self.spnSenVal.configure(insertbackground="black")
        self.spnSenVal.configure(justify="right")
        self.spnSenVal.configure(selectbackground="blue")
        self.spnSenVal.configure(selectforeground="white")
        self.spnSenVal.configure(validate="all")
        self.spnSenVal.configure(textvariable=self.spnSenVal_value)

        self.btnSenVal = tk.Button(self.tabWelcomeLeaving)
        self.btnSenVal.place(x=510, y=130, height=24, width=25)
        self.btnSenVal.configure(activebackground="#ececec")
        self.btnSenVal.configure(activeforeground="#000000")
        self.btnSenVal.configure(background="#d9d9d9")
        self.btnSenVal.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnSenVal_click))
        self.btnSenVal.configure(disabledforeground="#a3a3a3")
        self.btnSenVal.configure(font="-family {Tahoma} -size 8")
        self.btnSenVal.configure(foreground="#000000")
        self.btnSenVal.configure(highlightbackground="#d9d9d9")
        self.btnSenVal.configure(highlightcolor="black")
        self.btnSenVal.configure(text="""|>""")

        self.btnLightPark = tk.Button(self.tabWelcomeLeaving)
        self.btnLightPark.place(x=510, y=160, height=24, width=25)
        self.btnLightPark.configure(activebackground="#ececec")
        self.btnLightPark.configure(activeforeground="#000000")
        self.btnLightPark.configure(background="#d9d9d9")
        self.btnLightPark.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnLightPark_click))
        self.btnLightPark.configure(disabledforeground="#a3a3a3")
        self.btnLightPark.configure(font="-family {Tahoma} -size 8")
        self.btnLightPark.configure(foreground="#000000")
        self.btnLightPark.configure(highlightbackground="#d9d9d9")
        self.btnLightPark.configure(highlightcolor="black")
        self.btnLightPark.configure(text="""|>""")

        self.btnLightBeam = tk.Button(self.tabWelcomeLeaving)
        self.btnLightBeam.place(x=510, y=190, height=24, width=25)
        self.btnLightBeam.configure(activebackground="#ececec")
        self.btnLightBeam.configure(activeforeground="#000000")
        self.btnLightBeam.configure(background="#d9d9d9")
        self.btnLightBeam.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnLightBeam_click))
        self.btnLightBeam.configure(disabledforeground="#a3a3a3")
        self.btnLightBeam.configure(font="-family {Tahoma} -size 8")
        self.btnLightBeam.configure(foreground="#000000")
        self.btnLightBeam.configure(highlightbackground="#d9d9d9")
        self.btnLightBeam.configure(highlightcolor="black")
        self.btnLightBeam.configure(text="""|>""")

        self.btnLightTurn = tk.Button(self.tabWelcomeLeaving)
        self.btnLightTurn.place(x=510, y=220, height=24, width=25)
        self.btnLightTurn.configure(activebackground="#ececec")
        self.btnLightTurn.configure(activeforeground="#000000")
        self.btnLightTurn.configure(background="#d9d9d9")
        self.btnLightTurn.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnLightTurn_click))
        self.btnLightTurn.configure(disabledforeground="#a3a3a3")
        self.btnLightTurn.configure(font="-family {Tahoma} -size 8")
        self.btnLightTurn.configure(foreground="#000000")
        self.btnLightTurn.configure(highlightbackground="#d9d9d9")
        self.btnLightTurn.configure(highlightcolor="black")
        self.btnLightTurn.configure(text="""|>""")

        self.btnLightOther = tk.Button(self.tabWelcomeLeaving)
        self.btnLightOther.place(x=510, y=250, height=24, width=25)
        self.btnLightOther.configure(activebackground="#ececec")
        self.btnLightOther.configure(activeforeground="#000000")
        self.btnLightOther.configure(background="#d9d9d9")
        self.btnLightOther.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnLightOther_click))
        self.btnLightOther.configure(disabledforeground="#a3a3a3")
        self.btnLightOther.configure(font="-family {Tahoma} -size 8")
        self.btnLightOther.configure(foreground="#000000")
        self.btnLightOther.configure(highlightbackground="#d9d9d9")
        self.btnLightOther.configure(highlightcolor="black")
        self.btnLightOther.configure(text="""|>""")

        self.Label1_2_12 = tk.Label(self.tabCentralLock)
        self.Label1_2_12.place(x=40, y=280, height=24, width=75)
        self.Label1_2_12.configure(activebackground="#f9f9f9")
        self.Label1_2_12.configure(activeforeground="black")
        self.Label1_2_12.configure(background="#d9d9d9")
        self.Label1_2_12.configure(disabledforeground="#a3a3a3")
        self.Label1_2_12.configure(foreground="#000000")
        self.Label1_2_12.configure(highlightbackground="#d9d9d9")
        self.Label1_2_12.configure(highlightcolor="black")
        self.Label1_2_12.configure(relief="groove")
        self.Label1_2_12.configure(text="""MIR FOLD""")

        tk.Label(self.tabCentralLock, text="""IN""", relief="groove", highlightcolor="black", highlightbackground="#d9d9d9", background="#d9d9d9", disabledforeground="#a3a3a3", activebackground="#f9f9f9", activeforeground="black", foreground="#000000").place(x=120, y=280, height=24, width=30)
        tk.Label(self.tabCentralLock, text="""OUT""", relief="groove", highlightcolor="black", highlightbackground="#d9d9d9", background="#d9d9d9", disabledforeground="#a3a3a3", activebackground="#f9f9f9", activeforeground="black", foreground="#000000").place(x=120, y=310, height=24, width=30)

        self.tgMirFoldInLev = tk.Checkbutton(self.tabCentralLock)
        self.tgMirFoldInLev.place(x=155, y=280, height=24, width=50)
        self.tgMirFoldInLev.configure(activebackground="#d9d9d9")
        self.tgMirFoldInLev.configure(activeforeground="#000000")
        self.tgMirFoldInLev.configure(background="#d9d9d9")
        self.tgMirFoldInLev.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgMirFoldInLev_click))
        self.tgMirFoldInLev.configure(disabledforeground="#a3a3a3")
        self.tgMirFoldInLev.configure(foreground="#000000")
        self.tgMirFoldInLev.configure(highlightbackground="#d9d9d9")
        self.tgMirFoldInLev.configure(highlightcolor="black")
        self.tgMirFoldInLev.configure(indicatoron="0")
        self.tgMirFoldInLev.configure(justify="left")
        self.tgMirFoldInLev.configure(selectcolor="#d9d9d9")
        self.tgMirFoldInLev.configure(text="""Lev In""")
        self.tgMirFoldInLev.configure(variable=self.tgMirFoldInLev_value)

        self.tgMirFoldOutWel = tk.Checkbutton(self.tabCentralLock)
        self.tgMirFoldOutWel.place(x=155, y=310, height=24, width=50)
        self.tgMirFoldOutWel.configure(activebackground="#d9d9d9")
        self.tgMirFoldOutWel.configure(activeforeground="#000000")
        self.tgMirFoldOutWel.configure(background="#d9d9d9")
        self.tgMirFoldOutWel.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgMirFoldOutWel_click))
        self.tgMirFoldOutWel.configure(disabledforeground="#a3a3a3")
        self.tgMirFoldOutWel.configure(foreground="#000000")
        self.tgMirFoldOutWel.configure(highlightbackground="#d9d9d9")
        self.tgMirFoldOutWel.configure(highlightcolor="black")
        self.tgMirFoldOutWel.configure(indicatoron="0")
        self.tgMirFoldOutWel.configure(justify="left")
        self.tgMirFoldOutWel.configure(selectcolor="#d9d9d9")
        self.tgMirFoldOutWel.configure(text="""Wel Out""")
        self.tgMirFoldOutWel.configure(variable=self.tgMirFoldOutWel_value)

        self.tgMirFoldInIgn = tk.Checkbutton(self.tabCentralLock)
        self.tgMirFoldInIgn.place(x=210, y=280, height=24, width=50)
        self.tgMirFoldInIgn.configure(activebackground="#d9d9d9")
        self.tgMirFoldInIgn.configure(activeforeground="#000000")
        self.tgMirFoldInIgn.configure(background="#d9d9d9")
        #self.tgMirFoldInIgn.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgMirFoldInIgn_click))
        self.tgMirFoldInIgn.configure(disabledforeground="#a3a3a3")
        self.tgMirFoldInIgn.configure(foreground="#000000")
        self.tgMirFoldInIgn.configure(highlightbackground="#d9d9d9")
        self.tgMirFoldInIgn.configure(highlightcolor="black")
        self.tgMirFoldInIgn.configure(indicatoron="0")
        self.tgMirFoldInIgn.configure(justify="left")
        self.tgMirFoldInIgn.configure(selectcolor="#d9d9d9")
        self.tgMirFoldInIgn.configure(text="""Ign Off""")
        self.tgMirFoldInIgn.configure(variable=self.tgMirFoldInIgn_value)

        self.tgMirFoldOutIgn = tk.Checkbutton(self.tabCentralLock)
        self.tgMirFoldOutIgn.place(x=210, y=310, height=24, width=50)
        self.tgMirFoldOutIgn.configure(activebackground="#d9d9d9")
        self.tgMirFoldOutIgn.configure(activeforeground="#000000")
        self.tgMirFoldOutIgn.configure(background="#d9d9d9")
        #self.tgMirFoldOutIgn.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgMirFoldOutIgn_click))
        self.tgMirFoldOutIgn.configure(disabledforeground="#a3a3a3")
        self.tgMirFoldOutIgn.configure(foreground="#000000")
        self.tgMirFoldOutIgn.configure(highlightbackground="#d9d9d9")
        self.tgMirFoldOutIgn.configure(highlightcolor="black")
        self.tgMirFoldOutIgn.configure(indicatoron="0")
        self.tgMirFoldOutIgn.configure(justify="left")
        self.tgMirFoldOutIgn.configure(selectcolor="#d9d9d9")
        self.tgMirFoldOutIgn.configure(text="""Ign On""")
        self.tgMirFoldOutIgn.configure(variable=self.tgMirFoldOutIgn_value)

        self.tgMirFoldInFFBDouble = tk.Checkbutton(self.tabCentralLock)
        self.tgMirFoldInFFBDouble.place(x=265, y=280, height=24, width=50)
        self.tgMirFoldInFFBDouble.configure(activebackground="#d9d9d9")
        self.tgMirFoldInFFBDouble.configure(activeforeground="#000000")
        self.tgMirFoldInFFBDouble.configure(background="#d9d9d9")
        #self.tgMirFoldInFFBDouble.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgMirFoldInFFBDouble_click))
        self.tgMirFoldInFFBDouble.configure(disabledforeground="#a3a3a3")
        self.tgMirFoldInFFBDouble.configure(foreground="#000000")
        self.tgMirFoldInFFBDouble.configure(highlightbackground="#d9d9d9")
        self.tgMirFoldInFFBDouble.configure(highlightcolor="black")
        self.tgMirFoldInFFBDouble.configure(indicatoron="0")
        self.tgMirFoldInFFBDouble.configure(justify="left")
        self.tgMirFoldInFFBDouble.configure(selectcolor="#d9d9d9")
        self.tgMirFoldInFFBDouble.configure(text="""Dbl FFB""")
        self.tgMirFoldInFFBDouble.configure(variable=self.tgMirFoldInFFBDouble_value)

        self.tgMirFoldOutFFBDouble = tk.Checkbutton(self.tabCentralLock)
        self.tgMirFoldOutFFBDouble.place(x=265, y=310, height=24, width=50)
        self.tgMirFoldOutFFBDouble.configure(activebackground="#d9d9d9")
        self.tgMirFoldOutFFBDouble.configure(activeforeground="#000000")
        self.tgMirFoldOutFFBDouble.configure(background="#d9d9d9")
        #self.tgMirFoldOutFFBDouble.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgMirFoldOutFFBDouble_click))
        self.tgMirFoldOutFFBDouble.configure(disabledforeground="#a3a3a3")
        self.tgMirFoldOutFFBDouble.configure(foreground="#000000")
        self.tgMirFoldOutFFBDouble.configure(highlightbackground="#d9d9d9")
        self.tgMirFoldOutFFBDouble.configure(highlightcolor="black")
        self.tgMirFoldOutFFBDouble.configure(indicatoron="0")
        self.tgMirFoldOutFFBDouble.configure(justify="left")
        self.tgMirFoldOutFFBDouble.configure(selectcolor="#d9d9d9")
        self.tgMirFoldOutFFBDouble.configure(text="""Dbl FFB""")
        self.tgMirFoldOutFFBDouble.configure(variable=self.tgMirFoldOutFFBDouble_value)

        self.tgMirFoldInFFBHold = tk.Checkbutton(self.tabCentralLock)
        self.tgMirFoldInFFBHold.place(x=320, y=280, height=24, width=50)
        self.tgMirFoldInFFBHold.configure(activebackground="#d9d9d9")
        self.tgMirFoldInFFBHold.configure(activeforeground="#000000")
        self.tgMirFoldInFFBHold.configure(background="#d9d9d9")
        #self.tgMirFoldInFFBHold.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgMirFoldInFFBHold_click))
        self.tgMirFoldInFFBHold.configure(disabledforeground="#a3a3a3")
        self.tgMirFoldInFFBHold.configure(foreground="#000000")
        self.tgMirFoldInFFBHold.configure(highlightbackground="#d9d9d9")
        self.tgMirFoldInFFBHold.configure(highlightcolor="black")
        self.tgMirFoldInFFBHold.configure(indicatoron="0")
        self.tgMirFoldInFFBHold.configure(justify="left")
        self.tgMirFoldInFFBHold.configure(selectcolor="#d9d9d9")
        self.tgMirFoldInFFBHold.configure(text="""Hold FFB""")
        self.tgMirFoldInFFBHold.configure(variable=self.tgMirFoldInFFBHold_value)

        self.tgMirFoldOutDoor = tk.Checkbutton(self.tabCentralLock)
        self.tgMirFoldOutDoor.place(x=320, y=310, height=24, width=50)
        self.tgMirFoldOutDoor.configure(activebackground="#d9d9d9")
        self.tgMirFoldOutDoor.configure(activeforeground="#000000")
        self.tgMirFoldOutDoor.configure(background="#d9d9d9")
        #self.tgMirFoldOutDoor.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgMirFoldOutDoor_click))
        self.tgMirFoldOutDoor.configure(disabledforeground="#a3a3a3")
        self.tgMirFoldOutDoor.configure(foreground="#000000")
        self.tgMirFoldOutDoor.configure(highlightbackground="#d9d9d9")
        self.tgMirFoldOutDoor.configure(highlightcolor="black")
        self.tgMirFoldOutDoor.configure(indicatoron="0")
        self.tgMirFoldOutDoor.configure(justify="left")
        self.tgMirFoldOutDoor.configure(selectcolor="#d9d9d9")
        self.tgMirFoldOutDoor.configure(text="""Door""")
        self.tgMirFoldOutDoor.configure(variable=self.tgMirFoldOutDoor_value)

        self.tgMirFoldInKeyRemove = tk.Checkbutton(self.tabCentralLock)
        self.tgMirFoldInKeyRemove.place(x=375, y=280, height=24, width=50)
        self.tgMirFoldInKeyRemove.configure(activebackground="#d9d9d9")
        self.tgMirFoldInKeyRemove.configure(activeforeground="#000000")
        self.tgMirFoldInKeyRemove.configure(background="#d9d9d9")
        # self.tgMirFoldInKeyRemove.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgMirFoldInKeyRemove_click))
        self.tgMirFoldInKeyRemove.configure(disabledforeground="#a3a3a3")
        self.tgMirFoldInKeyRemove.configure(foreground="#000000")
        self.tgMirFoldInKeyRemove.configure(highlightbackground="#d9d9d9")
        self.tgMirFoldInKeyRemove.configure(highlightcolor="black")
        self.tgMirFoldInKeyRemove.configure(indicatoron="0")
        self.tgMirFoldInKeyRemove.configure(justify="left")
        self.tgMirFoldInKeyRemove.configure(selectcolor="#d9d9d9")
        self.tgMirFoldInKeyRemove.configure(text="""Key rem.""")
        self.tgMirFoldInKeyRemove.configure(variable=self.tgMirFoldInKeyRemove_value)

        self.tgMirFoldOutKeyInsert = tk.Checkbutton(self.tabCentralLock)
        self.tgMirFoldOutKeyInsert.place(x=375, y=310, height=24, width=50)
        self.tgMirFoldOutKeyInsert.configure(activebackground="#d9d9d9")
        self.tgMirFoldOutKeyInsert.configure(activeforeground="#000000")
        self.tgMirFoldOutKeyInsert.configure(background="#d9d9d9")
        # self.tgMirFoldOutKeyInsert.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgMirFoldOutKeyInsert_click))
        self.tgMirFoldOutKeyInsert.configure(disabledforeground="#a3a3a3")
        self.tgMirFoldOutKeyInsert.configure(foreground="#000000")
        self.tgMirFoldOutKeyInsert.configure(highlightbackground="#d9d9d9")
        self.tgMirFoldOutKeyInsert.configure(highlightcolor="black")
        self.tgMirFoldOutKeyInsert.configure(indicatoron="0")
        self.tgMirFoldOutKeyInsert.configure(justify="left")
        self.tgMirFoldOutKeyInsert.configure(selectcolor="#d9d9d9")
        self.tgMirFoldOutKeyInsert.configure(text="""Key ins.""")
        self.tgMirFoldOutKeyInsert.configure(variable=self.tgMirFoldOutKeyInsert_value)

        self.tgMirFoldOutEngineStart = tk.Checkbutton(self.tabCentralLock)
        self.tgMirFoldOutEngineStart.place(x=430, y=310, height=24, width=50)
        self.tgMirFoldOutEngineStart.configure(activebackground="#d9d9d9")
        self.tgMirFoldOutEngineStart.configure(activeforeground="#000000")
        self.tgMirFoldOutEngineStart.configure(background="#d9d9d9")
        # self.tgMirFoldOutKeyInsert.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgMirFoldOutEngineStart_click))
        self.tgMirFoldOutEngineStart.configure(disabledforeground="#a3a3a3")
        self.tgMirFoldOutEngineStart.configure(foreground="#000000")
        self.tgMirFoldOutEngineStart.configure(highlightbackground="#d9d9d9")
        self.tgMirFoldOutEngineStart.configure(highlightcolor="black")
        self.tgMirFoldOutEngineStart.configure(indicatoron="0")
        self.tgMirFoldOutEngineStart.configure(justify="left")
        self.tgMirFoldOutEngineStart.configure(selectcolor="#d9d9d9")
        self.tgMirFoldOutEngineStart.configure(text="""Eng Start""")
        self.tgMirFoldOutEngineStart.configure(variable=self.tgMirFoldOutEngineStart_value)

        self.btnMirFold = tk.Button(self.tabCentralLock)
        self.btnMirFold.place(x=510, y=280, height=24, width=25)
        self.btnMirFold.configure(activebackground="#ececec")
        self.btnMirFold.configure(activeforeground="#000000")
        self.btnMirFold.configure(background="#d9d9d9")
        self.btnMirFold.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnMirFold_click))
        self.btnMirFold.configure(disabledforeground="#a3a3a3")
        self.btnMirFold.configure(font="-family {Tahoma} -size 8")
        self.btnMirFold.configure(foreground="#000000")
        self.btnMirFold.configure(highlightbackground="#d9d9d9")
        self.btnMirFold.configure(highlightcolor="black")
        self.btnMirFold.configure(text="""|>""")


        self.Label1_2_13 = tk.Label(self.tabCentralLock)
        self.Label1_2_13.place(x=40, y=10, height=24, width=75)
        self.Label1_2_13.configure(activebackground="#f9f9f9")
        self.Label1_2_13.configure(activeforeground="black")
        self.Label1_2_13.configure(background="#d9d9d9")
        self.Label1_2_13.configure(disabledforeground="#a3a3a3")
        self.Label1_2_13.configure(foreground="#000000")
        self.Label1_2_13.configure(highlightbackground="#d9d9d9")
        self.Label1_2_13.configure(highlightcolor="black")
        self.Label1_2_13.configure(relief="groove")
        self.Label1_2_13.configure(text="""LOCK SPEED""")

        self.tgLockSpeed = tk.Checkbutton(self.tabCentralLock)
        self.tgLockSpeed.place(x=10, y=10, height=24, width=25)
        self.tgLockSpeed.configure(activebackground="#d9d9d9")
        self.tgLockSpeed.configure(activeforeground="#000000")
        self.tgLockSpeed.configure(background="#d9d9d9")
        self.tgLockSpeed.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgLockSpeed_click))
        self.tgLockSpeed.configure(disabledforeground="#a3a3a3")
        self.tgLockSpeed.configure(foreground="#000000")
        self.tgLockSpeed.configure(highlightbackground="#d9d9d9")
        self.tgLockSpeed.configure(highlightcolor="black")
        self.tgLockSpeed.configure(indicatoron="0")
        self.tgLockSpeed.configure(justify="left")
        self.tgLockSpeed.configure(selectcolor="#d9d9d9")
        self.tgLockSpeed.configure(variable=self.tgLockSpeed_value)
        self.tgLockSpeed.configure(selectcolor="#8080ff")

        self.tgRelock = tk.Checkbutton(self.tabCentralLock)
        self.tgRelock.place(x=10, y=70, height=24, width=25)
        self.tgRelock.configure(activebackground="#d9d9d9")
        self.tgRelock.configure(activeforeground="#000000")
        self.tgRelock.configure(background="#d9d9d9")
        self.tgRelock.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgRelock_click))
        self.tgRelock.configure(disabledforeground="#a3a3a3")
        self.tgRelock.configure(foreground="#000000")
        self.tgRelock.configure(highlightbackground="#d9d9d9")
        self.tgRelock.configure(highlightcolor="black")
        self.tgRelock.configure(indicatoron="0")
        self.tgRelock.configure(justify="left")
        self.tgRelock.configure(selectcolor="#d9d9d9")
        self.tgRelock.configure(variable=self.tgRelock_value)
        self.tgRelock.configure(selectcolor="#8080ff")

        self.Label1_2_13_1 = tk.Label(self.tabCentralLock)
        self.Label1_2_13_1.place(x=40, y=40, height=24, width=75)
        self.Label1_2_13_1.configure(activebackground="#f9f9f9")
        self.Label1_2_13_1.configure(activeforeground="black")
        self.Label1_2_13_1.configure(background="#d9d9d9")
        self.Label1_2_13_1.configure(disabledforeground="#a3a3a3")
        self.Label1_2_13_1.configure(foreground="#000000")
        self.Label1_2_13_1.configure(highlightbackground="#d9d9d9")
        self.Label1_2_13_1.configure(highlightcolor="black")
        self.Label1_2_13_1.configure(relief="groove")
        self.Label1_2_13_1.configure(text="""UNLOCK""")

        self.Label1_2_13_2 = tk.Label(self.tabCentralLock)
        self.Label1_2_13_2.place(x=40, y=70, height=24, width=75)
        self.Label1_2_13_2.configure(activebackground="#f9f9f9")
        self.Label1_2_13_2.configure(activeforeground="black")
        self.Label1_2_13_2.configure(background="#d9d9d9")
        self.Label1_2_13_2.configure(disabledforeground="#a3a3a3")
        self.Label1_2_13_2.configure(foreground="#000000")
        self.Label1_2_13_2.configure(highlightbackground="#d9d9d9")
        self.Label1_2_13_2.configure(highlightcolor="black")
        self.Label1_2_13_2.configure(relief="groove")
        self.Label1_2_13_2.configure(text="""RELOCK""")

        self.spnLockSpeed = tk.Spinbox(self.tabCentralLock, from_=1.0, to=30.0)
        self.spnLockSpeed.place(x=120, y=10, height=24, width=45)
        self.spnLockSpeed.configure(activebackground="#f9f9f9")
        self.spnLockSpeed.configure(background="white")
        self.spnLockSpeed.configure(borderwidth="2")
        self.spnLockSpeed.configure(buttonbackground="#d9d9d9")
        self.spnLockSpeed.configure(disabledforeground="#a3a3a3")
        self.spnLockSpeed.configure(font="TkDefaultFont")
        self.spnLockSpeed.configure(foreground="black")
        self.spnLockSpeed.configure(highlightbackground="black")
        self.spnLockSpeed.configure(highlightcolor="black")
        self.spnLockSpeed.configure(insertbackground="black")
        self.spnLockSpeed.configure(justify="right")
        self.spnLockSpeed.configure(selectbackground="blue")
        self.spnLockSpeed.configure(selectforeground="white")
        self.spnLockSpeed.configure(textvariable=self.spnLockSpeed_value)

        self.Label2_3 = tk.Label(self.tabCentralLock)
        self.Label2_3.place(x=165, y=10, height=24, width=35)
        self.Label2_3.configure(activebackground="#f9f9f9")
        self.Label2_3.configure(activeforeground="black")
        self.Label2_3.configure(background="#d9d9d9")
        self.Label2_3.configure(disabledforeground="#a3a3a3")
        self.Label2_3.configure(foreground="#000000")
        self.Label2_3.configure(highlightbackground="#d9d9d9")
        self.Label2_3.configure(highlightcolor="black")
        self.Label2_3.configure(text="""km/h""")

        self.tgUnlockDoor = tk.Checkbutton(self.tabCentralLock)
        self.tgUnlockDoor.place(x=120, y=40, height=24, width=45)
        self.tgUnlockDoor.configure(activebackground="#d9d9d9")
        self.tgUnlockDoor.configure(activeforeground="#000000")
        self.tgUnlockDoor.configure(background="#d9d9d9")
        self.tgUnlockDoor.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgUnlockDoor_click))
        self.tgUnlockDoor.configure(disabledforeground="#a3a3a3")
        self.tgUnlockDoor.configure(foreground="#000000")
        self.tgUnlockDoor.configure(highlightbackground="#d9d9d9")
        self.tgUnlockDoor.configure(highlightcolor="black")
        self.tgUnlockDoor.configure(indicatoron="0")
        self.tgUnlockDoor.configure(justify="left")
        self.tgUnlockDoor.configure(selectcolor="#d9d9d9")
        self.tgUnlockDoor.configure(text="""Door""")
        self.tgUnlockDoor.configure(variable=self.tgUnlockDoor_value)

        self.tgUnlockBrake = tk.Checkbutton(self.tabCentralLock)
        self.tgUnlockBrake.place(x=170, y=40, height=24, width=45)
        self.tgUnlockBrake.configure(activebackground="#d9d9d9")
        self.tgUnlockBrake.configure(activeforeground="#000000")
        self.tgUnlockBrake.configure(background="#d9d9d9")
        self.tgUnlockBrake.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgUnlockBrake_click))
        self.tgUnlockBrake.configure(disabledforeground="#a3a3a3")
        self.tgUnlockBrake.configure(foreground="#000000")
        self.tgUnlockBrake.configure(highlightbackground="#d9d9d9")
        self.tgUnlockBrake.configure(highlightcolor="black")
        self.tgUnlockBrake.configure(indicatoron="0")
        self.tgUnlockBrake.configure(justify="left")
        self.tgUnlockBrake.configure(selectcolor="#d9d9d9")
        self.tgUnlockBrake.configure(text="""Brake""")
        self.tgUnlockBrake.configure(variable=self.tgUnlockBrake_value)

        self.tgUnlockGearP = tk.Checkbutton(self.tabCentralLock)
        self.tgUnlockGearP.place(x=220, y=40, height=24, width=45)
        self.tgUnlockGearP.configure(activebackground="#d9d9d9")
        self.tgUnlockGearP.configure(activeforeground="#000000")
        self.tgUnlockGearP.configure(background="#d9d9d9")
        self.tgUnlockGearP.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgUnlockGearP_click))
        self.tgUnlockGearP.configure(disabledforeground="#a3a3a3")
        self.tgUnlockGearP.configure(foreground="#000000")
        self.tgUnlockGearP.configure(highlightbackground="#d9d9d9")
        self.tgUnlockGearP.configure(highlightcolor="black")
        self.tgUnlockGearP.configure(indicatoron="0")
        self.tgUnlockGearP.configure(justify="left")
        self.tgUnlockGearP.configure(selectcolor="#d9d9d9")
        self.tgUnlockGearP.configure(text="""Gear P""")
        self.tgUnlockGearP.configure(variable=self.tgUnlockGearP_value)

        self.tgUnlockIgn1 = tk.Checkbutton(self.tabCentralLock)
        self.tgUnlockIgn1.place(x=270, y=40, height=24, width=45)
        self.tgUnlockIgn1.configure(activebackground="#d9d9d9")
        self.tgUnlockIgn1.configure(activeforeground="#000000")
        self.tgUnlockIgn1.configure(background="#d9d9d9")
        self.tgUnlockIgn1.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgUnlockIgn1_click))
        self.tgUnlockIgn1.configure(disabledforeground="#a3a3a3")
        self.tgUnlockIgn1.configure(foreground="#000000")
        self.tgUnlockIgn1.configure(highlightbackground="#d9d9d9")
        self.tgUnlockIgn1.configure(highlightcolor="black")
        self.tgUnlockIgn1.configure(indicatoron="0")
        self.tgUnlockIgn1.configure(justify="left")
        self.tgUnlockIgn1.configure(selectcolor="#d9d9d9")
        self.tgUnlockIgn1.configure(text="""Ign2>1""")
        self.tgUnlockIgn1.configure(variable=self.tgUnlockIgn1_value)

        self.spnRelockTime = tk.Spinbox(self.tabCentralLock, from_=1.0, to=5.0)
        self.spnRelockTime.place(x=120, y=70, height=24, width=45)
        self.spnRelockTime.configure(activebackground="#f9f9f9")
        self.spnRelockTime.configure(background="white")
        self.spnRelockTime.configure(borderwidth="2")
        self.spnRelockTime.configure(buttonbackground="#d9d9d9")
        self.spnRelockTime.configure(disabledforeground="#a3a3a3")
        self.spnRelockTime.configure(font="TkDefaultFont")
        self.spnRelockTime.configure(foreground="black")
        self.spnRelockTime.configure(highlightbackground="black")
        self.spnRelockTime.configure(highlightcolor="black")
        self.spnRelockTime.configure(insertbackground="black")
        self.spnRelockTime.configure(justify="right")
        self.spnRelockTime.configure(selectbackground="blue")
        self.spnRelockTime.configure(selectforeground="white")
        self.spnRelockTime.configure(textvariable=self.spnRelockTime_value)

        self.Label2_1_3_1_1 = tk.Label(self.tabCentralLock)
        self.Label2_1_3_1_1.place(x=165, y=70, height=24, width=25)
        self.Label2_1_3_1_1.configure(activebackground="#f9f9f9")
        self.Label2_1_3_1_1.configure(activeforeground="black")
        self.Label2_1_3_1_1.configure(background="#d9d9d9")
        self.Label2_1_3_1_1.configure(disabledforeground="#a3a3a3")
        self.Label2_1_3_1_1.configure(foreground="#000000")
        self.Label2_1_3_1_1.configure(highlightbackground="#d9d9d9")
        self.Label2_1_3_1_1.configure(highlightcolor="black")
        self.Label2_1_3_1_1.configure(text="""min""")

        self.btnLockSpeed = tk.Button(self.tabCentralLock)
        self.btnLockSpeed.place(x=510, y=10, height=24, width=25)
        self.btnLockSpeed.configure(activebackground="#ececec")
        self.btnLockSpeed.configure(activeforeground="#000000")
        self.btnLockSpeed.configure(background="#d9d9d9")
        self.btnLockSpeed.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnLockSpeed_click))
        self.btnLockSpeed.configure(disabledforeground="#a3a3a3")
        self.btnLockSpeed.configure(font="-family {Tahoma} -size 8")
        self.btnLockSpeed.configure(foreground="#000000")
        self.btnLockSpeed.configure(highlightbackground="#d9d9d9")
        self.btnLockSpeed.configure(highlightcolor="black")
        self.btnLockSpeed.configure(text="""|>""")

        self.btnUnlock = tk.Button(self.tabCentralLock)
        self.btnUnlock.place(x=510, y=40, height=24, width=25)
        self.btnUnlock.configure(activebackground="#ececec")
        self.btnUnlock.configure(activeforeground="#000000")
        self.btnUnlock.configure(background="#d9d9d9")
        self.btnUnlock.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnUnlock_click))
        self.btnUnlock.configure(disabledforeground="#a3a3a3")
        self.btnUnlock.configure(font="-family {Tahoma} -size 8")
        self.btnUnlock.configure(foreground="#000000")
        self.btnUnlock.configure(highlightbackground="#d9d9d9")
        self.btnUnlock.configure(highlightcolor="black")
        self.btnUnlock.configure(text="""|>""")

        self.btnRelock = tk.Button(self.tabCentralLock)
        self.btnRelock.place(x=510, y=70, height=24, width=25)
        self.btnRelock.configure(activebackground="#ececec")
        self.btnRelock.configure(activeforeground="#000000")
        self.btnRelock.configure(background="#d9d9d9")
        self.btnRelock.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnRelock_click))
        self.btnRelock.configure(disabledforeground="#a3a3a3")
        self.btnRelock.configure(font="-family {Tahoma} -size 8")
        self.btnRelock.configure(foreground="#000000")
        self.btnRelock.configure(highlightbackground="#d9d9d9")
        self.btnRelock.configure(highlightcolor="black")
        self.btnRelock.configure(text="""|>""")

        self.btnPing = tk.Button(self.tabCommands)
        self.btnPing.place(x=10, y=10, height=24, width=50)
        self.btnPing.configure(activebackground="#ececec")
        self.btnPing.configure(activeforeground="#000000")
        self.btnPing.configure(background="#d9d9d9")
        self.btnPing.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnPing_click))
        self.btnPing.configure(disabledforeground="#a3a3a3")
        self.btnPing.configure(foreground="#000000")
        self.btnPing.configure(highlightbackground="#d9d9d9")
        self.btnPing.configure(highlightcolor="black")
        self.btnPing.configure(text="""PING""")

        self.btnReset = tk.Button(self.tabCommands)
        self.btnReset.place(x=65, y=10, height=24, width=50)
        self.btnReset.configure(activebackground="#ececec")
        self.btnReset.configure(activeforeground="#000000")
        self.btnReset.configure(background="#d9d9d9")
        self.btnReset.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnReset_click))
        self.btnReset.configure(disabledforeground="#a3a3a3")
        self.btnReset.configure(foreground="#000000")
        self.btnReset.configure(highlightbackground="#d9d9d9")
        self.btnReset.configure(highlightcolor="black")
        self.btnReset.configure(text="""Reset""")

        self.btnDiag = tk.Button(self.tabCommands)
        self.btnDiag.place(x=10, y=40, height=24, width=50)
        self.btnDiag.configure(activebackground="#ececec")
        self.btnDiag.configure(activeforeground="#000000")
        self.btnDiag.configure(background="#d9d9d9")
        self.btnDiag.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnDiag_click))
        self.btnDiag.configure(disabledforeground="#a3a3a3")
        self.btnDiag.configure(foreground="#000000")
        self.btnDiag.configure(highlightbackground="#d9d9d9")
        self.btnDiag.configure(highlightcolor="black")
        self.btnDiag.configure(text="""DIAG""")

        self.btnDiag0 = tk.Button(self.tabCommands)
        self.btnDiag0.place(x=65, y=40, height=24, width=50)
        self.btnDiag0.configure(activebackground="#ececec")
        self.btnDiag0.configure(activeforeground="#000000")
        self.btnDiag0.configure(background="#d9d9d9")
        self.btnDiag0.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnDiag0_click))
        self.btnDiag0.configure(disabledforeground="#a3a3a3")
        self.btnDiag0.configure(foreground="#000000")
        self.btnDiag0.configure(highlightbackground="#d9d9d9")
        self.btnDiag0.configure(highlightcolor="black")
        self.btnDiag0.configure(text="""DIAG:0""")

        self.btnDiag1 = tk.Button(self.tabCommands)
        self.btnDiag1.place(x=115, y=40, height=24, width=50)
        self.btnDiag1.configure(activebackground="#ececec")
        self.btnDiag1.configure(activeforeground="#000000")
        self.btnDiag1.configure(background="#d9d9d9")
        self.btnDiag1.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnDiag1_click))
        self.btnDiag1.configure(disabledforeground="#a3a3a3")
        self.btnDiag1.configure(foreground="#000000")
        self.btnDiag1.configure(highlightbackground="#d9d9d9")
        self.btnDiag1.configure(highlightcolor="black")
        self.btnDiag1.configure(text="""DIAG:1""")

        self.btnDiag2 = tk.Button(self.tabCommands)
        self.btnDiag2.place(x=165, y=40, height=24, width=50)
        self.btnDiag2.configure(activebackground="#ececec")
        self.btnDiag2.configure(activeforeground="#000000")
        self.btnDiag2.configure(background="#d9d9d9")
        self.btnDiag2.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnDiag2_click))
        self.btnDiag2.configure(disabledforeground="#a3a3a3")
        self.btnDiag2.configure(foreground="#000000")
        self.btnDiag2.configure(highlightbackground="#d9d9d9")
        self.btnDiag2.configure(highlightcolor="black")
        self.btnDiag2.configure(text="""DIAG:2""")

        self.btnAV = tk.Button(self.tabCommands)
        self.btnAV.place(x=10, y=70, height=24, width=50)
        self.btnAV.configure(activebackground="#ececec")
        self.btnAV.configure(activeforeground="#000000")
        self.btnAV.configure(background="#d9d9d9")
        self.btnAV.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnAV_click))
        self.btnAV.configure(disabledforeground="#a3a3a3")
        self.btnAV.configure(foreground="#000000")
        self.btnAV.configure(highlightbackground="#d9d9d9")
        self.btnAV.configure(highlightcolor="black")
        self.btnAV.configure(text="""AV""")

        self.btnAV0 = tk.Button(self.tabCommands)
        self.btnAV0.place(x=65, y=70, height=24, width=50)
        self.btnAV0.configure(activebackground="#ececec")
        self.btnAV0.configure(activeforeground="#000000")
        self.btnAV0.configure(background="#d9d9d9")
        self.btnAV0.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnAV0_click))
        self.btnAV0.configure(disabledforeground="#a3a3a3")
        self.btnAV0.configure(foreground="#000000")
        self.btnAV0.configure(highlightbackground="#d9d9d9")
        self.btnAV0.configure(highlightcolor="black")
        self.btnAV0.configure(text="""AV:0""")

        self.btnAV1 = tk.Button(self.tabCommands)
        self.btnAV1.place(x=115, y=70, height=24, width=50)
        self.btnAV1.configure(activebackground="#ececec")
        self.btnAV1.configure(activeforeground="#000000")
        self.btnAV1.configure(background="#d9d9d9")
        self.btnAV1.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnAV1_click))
        self.btnAV1.configure(disabledforeground="#a3a3a3")
        self.btnAV1.configure(foreground="#000000")
        self.btnAV1.configure(highlightbackground="#d9d9d9")
        self.btnAV1.configure(highlightcolor="black")
        self.btnAV1.configure(text="""AV:1""")

        self.btnLight = tk.Button(self.tabCommands)
        self.btnLight.place(x=10, y=130, height=24, width=50)
        self.btnLight.configure(activebackground="#ececec")
        self.btnLight.configure(activeforeground="#000000")
        self.btnLight.configure(background="#d9d9d9")
        self.btnLight.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnLight_click))
        self.btnLight.configure(disabledforeground="#a3a3a3")
        self.btnLight.configure(foreground="#000000")
        self.btnLight.configure(highlightbackground="#d9d9d9")
        self.btnLight.configure(highlightcolor="black")
        self.btnLight.configure(text="""LIGHT""")

        self.btnCVMOpen = tk.Button(self.tabCommands)
        self.btnCVMOpen.place(x=10, y=160, height=24, width=75)
        self.btnCVMOpen.configure(activebackground="#ececec")
        self.btnCVMOpen.configure(activeforeground="#000000")
        self.btnCVMOpen.configure(background="#d9d9d9")
        self.btnCVMOpen.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnCVMOpen_click))
        self.btnCVMOpen.configure(disabledforeground="#a3a3a3")
        self.btnCVMOpen.configure(foreground="#000000")
        self.btnCVMOpen.configure(highlightbackground="#d9d9d9")
        self.btnCVMOpen.configure(highlightcolor="black")
        self.btnCVMOpen.configure(text="""CVM:OPEN""")

        self.btnCVMStop = tk.Button(self.tabCommands)
        self.btnCVMStop.place(x=90, y=160, height=24, width=75)
        self.btnCVMStop.configure(activebackground="#ececec")
        self.btnCVMStop.configure(activeforeground="#000000")
        self.btnCVMStop.configure(background="#d9d9d9")
        self.btnCVMStop.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnCVMStop_click))
        self.btnCVMStop.configure(disabledforeground="#a3a3a3")
        self.btnCVMStop.configure(foreground="#000000")
        self.btnCVMStop.configure(highlightbackground="#d9d9d9")
        self.btnCVMStop.configure(highlightcolor="black")
        self.btnCVMStop.configure(text="""CVM:STOP""")

        self.btnCVMClose = tk.Button(self.tabCommands)
        self.btnCVMClose.place(x=170, y=160, height=24, width=75)
        self.btnCVMClose.configure(activebackground="#ececec")
        self.btnCVMClose.configure(activeforeground="#000000")
        self.btnCVMClose.configure(background="#d9d9d9")
        self.btnCVMClose.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnCVMClose_click))
        self.btnCVMClose.configure(disabledforeground="#a3a3a3")
        self.btnCVMClose.configure(foreground="#000000")
        self.btnCVMClose.configure(highlightbackground="#d9d9d9")
        self.btnCVMClose.configure(highlightcolor="black")
        self.btnCVMClose.configure(text="""CVM:CLOSE""")

        self.btnShutdown = tk.Button(self.tabCommands)
        self.btnShutdown.place(x=10, y=190, height=24, width=75)
        self.btnShutdown.configure(activebackground="#ececec")
        self.btnShutdown.configure(activeforeground="#000000")
        self.btnShutdown.configure(background="#d9d9d9")
        self.btnShutdown.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnShutdown_click))
        self.btnShutdown.configure(disabledforeground="#a3a3a3")
        self.btnShutdown.configure(foreground="#000000")
        self.btnShutdown.configure(highlightbackground="#d9d9d9")
        self.btnShutdown.configure(highlightcolor="black")
        self.btnShutdown.configure(text="SHUTDOWN")

        self.frmSettings = tk.Label(self.tabCommands)
        self.frmSettings.place(x=5, y=270, height=60, width=530)
        self.frmSettings.configure(activebackground="#f9f9f9")
        self.frmSettings.configure(activeforeground="black")
        self.frmSettings.configure(background="#d9d9d9")
        self.frmSettings.configure(disabledforeground="#a3a3a3")
        self.frmSettings.configure(foreground="#000000")
        self.frmSettings.configure(highlightbackground="#d9d9d9")
        self.frmSettings.configure(highlightcolor="black")
        self.frmSettings.configure(relief="groove")

        self.lblSettings = tk.Label(self.tabCommands, anchor="w")
        self.lblSettings.place(x=10, y=275, height=24, width=100)
        self.lblSettings.configure(activebackground="#f9f9f9")
        self.lblSettings.configure(activeforeground="black")
        self.lblSettings.configure(background="#d9d9d9")
        self.lblSettings.configure(disabledforeground="#a3a3a3")
        self.lblSettings.configure(foreground="#000000")
        self.lblSettings.configure(highlightbackground="#d9d9d9")
        self.lblSettings.configure(highlightcolor="black")
        self.lblSettings.configure(text="Configuration")

        self.btnDownloadSettings = tk.Button(self.tabCommands)
        self.btnDownloadSettings.place(x=10, y=300, height=24, width=105)
        self.btnDownloadSettings.configure(activebackground="#ececec")
        self.btnDownloadSettings.configure(activeforeground="#000000")
        self.btnDownloadSettings.configure(background="#d9d9d9")
        self.btnDownloadSettings.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnDownloadSettings_click))
        self.btnDownloadSettings.configure(disabledforeground="#a3a3a3")
        self.btnDownloadSettings.configure(foreground="#000000")
        self.btnDownloadSettings.configure(highlightbackground="#d9d9d9")
        self.btnDownloadSettings.configure(highlightcolor="black")
        self.btnDownloadSettings.configure(text="Download Settings")

        self.btnUploadSettings = tk.Button(self.tabCommands)
        self.btnUploadSettings.place(x=120, y=300, height=24, width=105)
        self.btnUploadSettings.configure(activebackground="#ececec")
        self.btnUploadSettings.configure(activeforeground="#000000")
        self.btnUploadSettings.configure(background="#d9d9d9")
        self.btnUploadSettings.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnUploadSettings_click))
        self.btnUploadSettings.configure(disabledforeground="#a3a3a3")
        self.btnUploadSettings.configure(foreground="#000000")
        self.btnUploadSettings.configure(highlightbackground="#d9d9d9")
        self.btnUploadSettings.configure(highlightcolor="black")
        self.btnUploadSettings.configure(state="disabled")
        self.btnUploadSettings.configure(text="Upload Settings")

        self.btnResetSettings = tk.Button(self.tabCommands, command=self.btnResetSettings_click)
        self.btnResetSettings.place(x=230, y=300, height=24, width=105)
        self.btnResetSettings.configure(activebackground="#ececec")
        self.btnResetSettings.configure(activeforeground="#000000")
        self.btnResetSettings.configure(background="#d9d9d9")
        #self.btnResetSettings.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnResetSettings_click))
        self.btnResetSettings.configure(disabledforeground="#a3a3a3")
        self.btnResetSettings.configure(foreground="#000000")
        self.btnResetSettings.configure(highlightbackground="#d9d9d9")
        self.btnResetSettings.configure(highlightcolor="black")
        self.btnResetSettings.configure(text="Reset Settings")

        self.btnImportSettings = tk.Button(self.tabCommands, command=self.btnImportSettings_click)
        self.btnImportSettings.place(x=345, y=300, height=24, width=90)
        self.btnImportSettings.configure(activebackground="#ececec")
        self.btnImportSettings.configure(activeforeground="#000000")
        self.btnImportSettings.configure(background="#d9d9d9")
        self.btnImportSettings.configure(disabledforeground="#a3a3a3")
        self.btnImportSettings.configure(foreground="#000000")
        self.btnImportSettings.configure(highlightbackground="#d9d9d9")
        self.btnImportSettings.configure(highlightcolor="black")
        self.btnImportSettings.configure(text="Import Settings")

        self.btnExportSettings = tk.Button(self.tabCommands, command=self.btnExportSettings_click)
        self.btnExportSettings.place(x=440, y=300, height=24, width=90)
        self.btnExportSettings.configure(activebackground="#ececec")
        self.btnExportSettings.configure(activeforeground="#000000")
        self.btnExportSettings.configure(background="#d9d9d9")
        self.btnExportSettings.configure(disabledforeground="#a3a3a3")
        self.btnExportSettings.configure(foreground="#000000")
        self.btnExportSettings.configure(highlightbackground="#d9d9d9")
        self.btnExportSettings.configure(highlightcolor="black")
        self.btnExportSettings.configure(text="Export Settings")


        self.btnUpdateOn = tk.Button(self.tabFirmware)
        self.btnUpdateOn.place(x=10, y=10, height=24, width=75)
        self.btnUpdateOn.configure(activebackground="#ececec")
        self.btnUpdateOn.configure(activeforeground="#000000")
        self.btnUpdateOn.configure(background="#d9d9d9")
        self.btnUpdateOn.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnUpdateOn_click))
        self.btnUpdateOn.bind("<Double-Button-1>", lambda e: self.after(1, self.btnUpdateOn_doubleclick))
        self.btnUpdateOn.configure(disabledforeground="#a3a3a3")
        self.btnUpdateOn.configure(foreground="#000000")
        self.btnUpdateOn.configure(highlightbackground="#d9d9d9")
        self.btnUpdateOn.configure(highlightcolor="black")
        self.btnUpdateOn.configure(text="""Update:ON""")
        ToolTip(self.btnUpdateOn, text="DoubleClick for override disabled Button.")

        self.btnUpdateOff = tk.Button(self.tabFirmware)
        self.btnUpdateOff.place(x=90, y=10, height=24, width=75)
        self.btnUpdateOff.configure(activebackground="#ececec")
        self.btnUpdateOff.configure(activeforeground="#000000")
        self.btnUpdateOff.configure(background="#d9d9d9")
        self.btnUpdateOff.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnUpdateOff_click))
        self.btnUpdateOff.bind("<Double-Button-1>", lambda e: self.after(1, self.btnUpdateOff_doubleclick))
        self.btnUpdateOff.configure(disabledforeground="#a3a3a3")
        self.btnUpdateOff.configure(foreground="#000000")
        self.btnUpdateOff.configure(highlightbackground="#d9d9d9")
        self.btnUpdateOff.configure(highlightcolor="black")
        self.btnUpdateOff.configure(text="""Update:OFF""")
        self.btnUpdateOff.configure(state="disabled")
        ToolTip(self.btnUpdateOff, text="DoubleClick for override disabled Button.")

        self.lblAvrTyp = tk.Label(self.tabFirmware)
        self.lblAvrTyp.place(x=170, y=10, height=24, width=50)
        self.lblAvrTyp.configure(borderwidth="2")
        self.lblAvrTyp.configure(justify="center")
        self.lblAvrTyp.configure(relief="groove")
        self.lblAvrTyp.configure(textvariable=self.lblAvrTyp_value)
        self.lblAvrTyp.bind("<Double-Button-1>", lambda e: self.after('idle', self.firmware_get_signature))
        ToolTip(self.lblAvrTyp, text="DoubleClick for Version Request.")

        self.txtHexSelected = tk.Entry(self.tabFirmware)
        self.txtHexSelected.place(x=10, y=40, height=24, width=474)
        self.txtHexSelected.configure(borderwidth="2")
        self.txtHexSelected.configure(state="readonly")
        self.txtHexSelected.configure(textvariable=self.txtHexSelected_value)
        self.txtHexSelected.configure(validate="all")
        # txtHexSelected_change = self.txtHexSelected.register(AVR_IBus_Settings_page_support.txtHexSelected_change)
        self.txtHexSelected.configure(validatecommand=(self.txtHexSelected_change))

        self.btnHexSelect = tk.Button(self.tabFirmware)
        self.btnHexSelect.place(x=485, y=40, height=24, width=50)
        self.btnHexSelect.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnHexSelect_click))
        self.btnHexSelect.configure(text=""". . .""")

        self.lblBuild = tk.Label(self.tabFirmware)
        self.lblBuild.place(x=10, y=70, height=24, width=50)
        self.lblBuild.configure(borderwidth="2")
        self.lblBuild.configure(justify="left")
        self.lblBuild.configure(text="""Build:""")

        self.lblHexBuild = tk.Label(self.tabFirmware)
        self.lblHexBuild.place(x=65, y=70, height=24, width=200)
        self.lblHexBuild.configure(borderwidth="2")
        self.lblHexBuild.configure(justify="center")
        self.lblHexBuild.configure(relief="groove")
        self.lblHexBuild.configure(textvariable=self.lblHexBuild_value)

        self.btnUpload = tk.Button(self.tabFirmware)
        self.btnUpload.place(x=275, y=70, height=24, width=120)
        self.btnUpload.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnUpload_click))
        self.btnUpload.configure(text="""Upload""")
        self.btnUpload.configure(state="disabled")

        """self.lblProgressBar = ThemedStyle(self)
        # add the label to the progressbar style
        self.lblProgressBar.layout("LabeledProgressbar",
                                   [("LabeledProgressbar.trough",
                                     {"children": [("LabeledProgressbar.pbar",
                                                    {"side": "left", "sticky": "ns"}),
                                                   ("LabeledProgressbar.label",  # label inside the bar
                                                    {"sticky": ""})],
                                      "sticky": "nswe"})])
        self.lblProgressBar.configure("LabeledProgressbar", text="0%      ")
        """

        self.progressBar = ttk.Progressbar(self.tabFirmware)  # , style="LabeledProgressbar"
        self.progressBar.place(x=10, y=100, width=524, height=24)
        self.progressBar.configure(length="524")
        self.progressBar.configure(variable=self.progressBar_value)
        self.progressBar.configure(maximum="100")
        self.progressBar.configure(mode="determinate")

        self.lblProgressBar = tk.Label(self.tabFirmware)
        self.lblProgressBar.place(x=250, y=105, height=14, width=30)
        self.lblProgressBar.configure(text="100%")
        self.lblProgressBar.configure(background="#ffffff")


        self.lblFirmwareStatus = tk.Label(self.tabFirmware)
        self.lblFirmwareStatus.place(x=10, y=130, height=24, width=525)
        self.lblFirmwareStatus.configure(text="")
        self.lblFirmwareStatus.configure(relief="sunken")

        self.progressBar_reset()


        self.TScale1 = ttk.Scale(self.tabLogging, from_=0, to=1.0)
        self.TScale1.place(x=345, y=310, height=24, width=146)
        self.TScale1.configure(value="0.5")
        self.TScale1.bind("<ButtonRelease-1>", lambda e: self.after(1, self.scale3_change))

        self.btnCustomCmd = []

        t = 0
        for i in range(0, 8):
            for j in range(0, 6):
                self.btnCustomCmd.append(tk.Button(self.tabLogging, wraplength=80, command=partial(self.btnCustomCmd_click, t)))
                self.btnCustomCmd[t].configure(activebackground="#ececec")
                self.btnCustomCmd[t].configure(activeforeground="#000000")
                self.btnCustomCmd[t].configure(background="#d9d9d9")
                self.btnCustomCmd[t].configure(disabledforeground="#a3a3a3")
                self.btnCustomCmd[t].configure(foreground="#000000")
                self.btnCustomCmd[t].configure(highlightbackground="#d9d9d9")
                self.btnCustomCmd[t].configure(highlightcolor="black")
                self.btnCustomCmd[t].place(x=10 + 87 * j, y=10 + 37 * i, height=32, width=82)
                self.btnCustomCmd[t].configure(text=ini_read(APP_INI_FILE, "Button_%02d" % t, "text", "%02d" % t))
                t += 1
                # self.btnCustomCmd[i].bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnCustomCmd_click, i))

        self.tgCustomCmd = tk.Checkbutton(self.tabLogging)
        self.tgCustomCmd.place(x=10, y=306, height=28, width=82)
        self.tgCustomCmd.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgCustomCmd_click))
        self.tgCustomCmd.configure(text="Set")
        self.tgCustomCmd.configure(variable=self.tgCustomCmd_value)
        self.tgCustomCmd.configure(activebackground="#d9d9d9")
        self.tgCustomCmd.configure(activeforeground="#000000")
        self.tgCustomCmd.configure(background="#d9d9d9")
        self.tgCustomCmd.configure(disabledforeground="#a3a3a3")
        self.tgCustomCmd.configure(foreground="#000000")
        self.tgCustomCmd.configure(highlightbackground="#d9d9d9")
        self.tgCustomCmd.configure(highlightcolor="black")
        self.tgCustomCmd.configure(indicatoron="0")
        self.tgCustomCmd.configure(justify="left")
        self.tgCustomCmd.configure(selectcolor="#EFE4B0")

        ########### Bluetooth Buttons #################
        self.btnBtPrev = tk.Button(self.tabBluetooth, font=self.FONT_WEBDINGS)
        self.btnBtPrev.place(x=10, y=10, height=24, width=50)
        self.btnBtPrev.configure(activebackground="#ececec")
        self.btnBtPrev.configure(activeforeground="#000000")
        self.btnBtPrev.configure(background="#d9d9d9")
        self.btnBtPrev.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnBtPrev_click))
        self.btnBtPrev.configure(disabledforeground="#a3a3a3")
        self.btnBtPrev.configure(foreground="#000000")
        self.btnBtPrev.configure(highlightbackground="#d9d9d9")
        self.btnBtPrev.configure(highlightcolor="black")
        self.btnBtPrev.configure(text="""9""")

        self.btnBtFrwd = tk.Button(self.tabBluetooth, font=self.FONT_WEBDINGS)
        self.btnBtFrwd.place(x=65, y=10, height=24, width=50)
        self.btnBtFrwd.configure(activebackground="#ececec")
        self.btnBtFrwd.configure(activeforeground="#000000")
        self.btnBtFrwd.configure(background="#d9d9d9")
        self.btnBtFrwd.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnBtFrwd_click))
        self.btnBtFrwd.configure(disabledforeground="#a3a3a3")
        self.btnBtFrwd.configure(foreground="#000000")
        self.btnBtFrwd.configure(highlightbackground="#d9d9d9")
        self.btnBtFrwd.configure(highlightcolor="black")
        self.btnBtFrwd.configure(text="""7""")

        self.btnBtPlay = tk.Button(self.tabBluetooth, font=self.FONT_WEBDINGS)
        self.btnBtPlay.place(x=120, y=10, height=24, width=50)
        self.btnBtPlay.configure(activebackground="#ececec")
        self.btnBtPlay.configure(activeforeground="#000000")
        self.btnBtPlay.configure(background="#d9d9d9")
        self.btnBtPlay.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnBtPlay_click))
        self.btnBtPlay.configure(disabledforeground="#a3a3a3")
        self.btnBtPlay.configure(foreground="#000000")
        self.btnBtPlay.configure(highlightbackground="#d9d9d9")
        self.btnBtPlay.configure(highlightcolor="black")
        self.btnBtPlay.configure(text="""4""")

        self.btnBtPause = tk.Button(self.tabBluetooth, font=self.FONT_WEBDINGS)
        self.btnBtPause.place(x=175, y=10, height=24, width=50)
        self.btnBtPause.configure(activebackground="#ececec")
        self.btnBtPause.configure(activeforeground="#000000")
        self.btnBtPause.configure(background="#d9d9d9")
        self.btnBtPause.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnBtPause_click))
        self.btnBtPause.configure(disabledforeground="#a3a3a3")
        self.btnBtPause.configure(foreground="#000000")
        self.btnBtPause.configure(highlightbackground="#d9d9d9")
        self.btnBtPause.configure(highlightcolor="black")
        self.btnBtPause.configure(text=""";""")

        self.btnBtStop = tk.Button(self.tabBluetooth, font=self.FONT_WEBDINGS)
        self.btnBtStop.place(x=230, y=10, height=24, width=50)
        self.btnBtStop.configure(activebackground="#ececec")
        self.btnBtStop.configure(activeforeground="#000000")
        self.btnBtStop.configure(background="#d9d9d9")
        self.btnBtStop.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnBtStop_click))
        self.btnBtStop.configure(disabledforeground="#a3a3a3")
        self.btnBtStop.configure(foreground="#000000")
        self.btnBtStop.configure(highlightbackground="#d9d9d9")
        self.btnBtStop.configure(highlightcolor="black")
        self.btnBtStop.configure(text="""<""")

        self.btnBtFfwd = tk.Button(self.tabBluetooth, font=self.FONT_WEBDINGS)
        self.btnBtFfwd.place(x=285, y=10, height=24, width=50)
        self.btnBtFfwd.configure(activebackground="#ececec")
        self.btnBtFfwd.configure(activeforeground="#000000")
        self.btnBtFfwd.configure(background="#d9d9d9")
        self.btnBtFfwd.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnBtFfwd_click))
        self.btnBtFfwd.configure(disabledforeground="#a3a3a3")
        self.btnBtFfwd.configure(foreground="#000000")
        self.btnBtFfwd.configure(highlightbackground="#d9d9d9")
        self.btnBtFfwd.configure(highlightcolor="black")
        self.btnBtFfwd.configure(text="""8""")

        self.btnBtNext = tk.Button(self.tabBluetooth, font=self.FONT_WEBDINGS)
        self.btnBtNext.place(x=340, y=10, height=24, width=50)
        self.btnBtNext.configure(activebackground="#ececec")
        self.btnBtNext.configure(activeforeground="#000000")
        self.btnBtNext.configure(background="#d9d9d9")
        self.btnBtNext.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnBtNext_click))
        self.btnBtNext.configure(disabledforeground="#a3a3a3")
        self.btnBtNext.configure(foreground="#000000")
        self.btnBtNext.configure(highlightbackground="#d9d9d9")
        self.btnBtNext.configure(highlightcolor="black")
        self.btnBtNext.configure(text=""":""")

        ########### Statusbar #################
        """self.statusBar = tk.Label(self)
        self.statusBar.place(x=0, y=465, height=20, width=835)
        self.statusBar.configure(activebackground="#f9f9f9")
        self.statusBar.configure(activeforeground="black")
        self.statusBar.configure(anchor="w")
        self.statusBar.configure(background="#d9d9d9")
        self.statusBar.configure(borderwidth="1")
        self.statusBar.configure(disabledforeground="#a3a3a3")
        self.statusBar.configure(font="-family {Segoe UI} -size 8")
        self.statusBar.configure(foreground="#000000")
        self.statusBar.configure(highlightbackground="#d9d9d9")
        self.statusBar.configure(highlightcolor="black")
        self.statusBar.configure(relief="sunken")
        self.statusBar.configure(text="Status")
        """

        self.statusBars = [tk.Label(self), tk.Label(self), tk.Label(self)]
        for statusBar in self.statusBars:
            # statusBar = tk.Label(self)
            statusBar.configure(activebackground="#f9f9f9")
            statusBar.configure(activeforeground="black")
            statusBar.configure(anchor="w")
            statusBar.configure(background="#d9d9d9")
            statusBar.configure(borderwidth="1")
            statusBar.configure(disabledforeground="#a3a3a3")
            statusBar.configure(font="-family {Segoe UI} -size 8")
            statusBar.configure(foreground="#000000")
            statusBar.configure(highlightbackground="#d9d9d9")
            statusBar.configure(highlightcolor="black")
            statusBar.configure(relief="sunken")

        self.statusBars[0].place(x=0, y=465, height=20, width=200)
        self.statusBars[0].configure(text="""Status 0""")
        self.statusBars[1].place(x=200, y=465, height=20, width=200)
        self.statusBars[1].configure(text="""Status 1""")
        self.statusBars[2].place(x=400, y=465, height=20, width=435)
        self.statusBars[2].configure(text="""Status 2""")

        self.txtSend = tk.Text(self)
        self.txtSend.place(x=10, y=415, height=44, width=499)
        self.txtSend.configure(background="white")
        self.txtSend.configure(borderwidth="2")
        self.txtSend.configure(font="-family {Calibri} -size 11")
        self.txtSend.configure(foreground="black")
        self.txtSend.configure(highlightbackground="#d9d9d9")
        self.txtSend.configure(highlightcolor="black")
        self.txtSend.configure(insertbackground="black")
        self.txtSend.configure(selectbackground="blue")
        self.txtSend.configure(selectforeground="white")
        self.txtSend.configure(wrap="word")
        self.txtSend_scroll_y = tk.Scrollbar(self, orient="vertical", command=self.txtSend.yview)
        self.txtSend_scroll_y.place(x=497, y=417, height=41, width=10)

        self.txtSend.configure(yscrollcommand=self.txtSend_scroll_y.set)

        self.btnSend = tk.Button(self)
        # self.btnSend.place(x=515, y=415, height=44, width=45)
        self.btnSend.place(x=515, y=435, height=24, width=45)
        self.btnSend.configure(activebackground="#ececec")
        self.btnSend.configure(activeforeground="#000000")
        self.btnSend.configure(background="#d9d9d9")
        self.btnSend.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnSend_click))
        self.btnSend.configure(disabledforeground="#a3a3a3")
        self.btnSend.configure(foreground="#000000")
        self.btnSend.configure(highlightbackground="#d9d9d9")
        self.btnSend.configure(highlightcolor="black")
        self.btnSend.configure(text="""Send""")

        self.rdAVR = tk.Radiobutton(self)
        self.rdAVR.configure(activebackground="#ececec")
        self.rdAVR.configure(activeforeground="#000000")
        self.rdAVR.configure(background="#d9d9d9")
        self.rdAVR.configure(disabledforeground="#a3a3a3")
        self.rdAVR.configure(foreground="#000000")
        self.rdAVR.configure(highlightbackground="#d9d9d9")
        self.rdAVR.configure(highlightcolor="black")
        self.rdAVR.configure(indicatoron="0")
        self.rdAVR.configure(justify="left")
        self.rdAVR.configure(selectcolor="#8080ff")
        self.rdAVR.place(x=10, y=10, height=25, width=35)
        self.rdAVR.configure(text="""AVR""")
        self.rdAVR.configure(value="0")
        self.rdAVR.bind("<ButtonRelease-1>", lambda e: self.after(1, self.rdAVR_click))
        self.rdAVR.configure(variable=self.avr_mode)

        self.rdIBus = tk.Radiobutton(self)
        self.rdIBus.place(x=45, y=10, height=25, width=35)
        self.rdIBus.configure(activebackground="#ececec")
        self.rdIBus.configure(activeforeground="#000000")
        self.rdIBus.configure(background="#d9d9d9")
        self.rdIBus.bind("<ButtonRelease-1>", lambda e: self.after(1, self.rdIBus_click))
        self.rdIBus.configure(disabledforeground="#a3a3a3")
        self.rdIBus.configure(foreground="#000000")
        self.rdIBus.configure(highlightbackground="#d9d9d9")
        self.rdIBus.configure(highlightcolor="black")
        self.rdIBus.configure(indicatoron="0")
        self.rdIBus.configure(justify="left")
        self.rdIBus.configure(selectcolor="#8080ff")
        self.rdIBus.configure(text="""IBus""")
        self.rdIBus.configure(value="1")
        self.rdIBus.configure(variable=self.avr_mode)

        self.tgUpload = tk.Checkbutton(self)
        self.tgUpload.place(x=515, y=415, height=19, width=45)
        self.tgUpload.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgUpload_click))
        self.tgUpload.configure(text="""autom.""")
        self.tgUpload.configure(variable=self.tgUpload_value)
        self.tgUpload.configure(activebackground="#d9d9d9")
        self.tgUpload.configure(activeforeground="#000000")
        self.tgUpload.configure(background="#d9d9d9")
        self.tgUpload.configure(disabledforeground="#a3a3a3")
        self.tgUpload.configure(foreground="#000000")
        self.tgUpload.configure(highlightbackground="#d9d9d9")
        self.tgUpload.configure(highlightcolor="black")
        self.tgUpload.configure(indicatoron="0")
        self.tgUpload.configure(justify="left")
        self.tgUpload.configure(selectcolor="#d9d9d9")



        """self.lbLog = ttk.Treeview(self)
        self.lbLog["columns"]=("one","two","three")
        self.lbLog.heading("#0", text="Time", anchor=tk.W)
        self.lbLog.heading("one", text="SRC", anchor=tk.W)
        self.lbLog.heading("two", text="DST", anchor=tk.W)
        self.lbLog.heading("three", text="Message", anchor=tk.W)                
        """

        self.lbLog = tk.Listbox(self)
        self.lbLog.configure(background="#464646")
        self.lbLog.configure(cursor="xterm")
        self.lbLog.configure(disabledforeground="#a3a3a3")
        if "linux" in sys.platform:
            self.lbLog.configure(font="-family {Courier New} -size 9")
        else:
            self.lbLog.configure(font="-family {Courier New} -size 8")
        self.lbLog.configure(foreground="#00ff00")
        self.lbLog.configure(highlightbackground="#d9d9d9")
        self.lbLog.configure(highlightcolor="#d9d9d9")
        self.lbLog.configure(selectbackground="blue")
        self.lbLog.configure(selectforeground="white")
        # self.lbLog.configure(listvariable=self.lbLog_list)
        
        self.lbLog.configure(selectmode="multiple")

        self.sbLog = tk.Scrollbar(self, orient=tk.VERTICAL)
        self.lbLog.place(x=570, y=60, height=400, width=240)  # 256
        self.lbLog.configure(yscrollcommand=self.sbLog.set)
        self.sbLog.place(x=810, y=60, height=400, width=15)
        # self.sbLog.configure(orient=tk.VERTICAL)
        self.sbLog.configure(command=self.sbLog_change)


        """self.logo = tk.Label(self)
        self.logo.place(x=self.winfo_width()-45, y=0, height=40, width=40)
        self.logo.configure(activebackground="#f9f9f9")
        self.logo.configure(activeforeground="black")
        self.logo.configure(background="#d9d9d9")
        self.logo.configure(disabledforeground="#a3a3a3")
        self.logo.configure(foreground="#000000")
        self.logo.configure(highlightbackground="#d9d9d9")
        self.logo.configure(highlightcolor="black")
        # self.logo.configure(relief="groove")
        #self.logo.configure(text="logo")
        self.LOGO_IMG = decode_img(APP_ICON_WW, (35, 35))
        self.LOGO_IMG = ImageTk.PhotoImage(self.LOGO_IMG)
        self.logo.configure(image=self.LOGO_IMG)
        """

        self.tgLog = tk.Checkbutton(self)
        # self.tgLog.place(x=-10, y=40, height=15, width=61)
        self.tgLog.place(x=self.winfo_width() - 34 - 50, y=35, height=24, width=24)
        self.tgLog.configure(activebackground="#d9d9d9")
        self.tgLog.configure(activeforeground="#000000")
        self.tgLog.configure(background="#d9d9d9")
        self.tgLog.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgLog_click))
        self.tgLog.configure(disabledforeground="#a3a3a3")
        self.tgLog.configure(foreground="#000000")
        self.tgLog.configure(highlightbackground="#d9d9d9")
        self.tgLog.configure(highlightcolor="black")
        self.tgLog.configure(justify="left")
        # self.tgLog.configure(text="""Log""")
        self.tgLog.configure(indicatoron="0")
        self.tgLog.configure(variable=self.tgLog_value)
        self.tgLog.configure(image=self.ICON_LOGFILE)

        self.tgLogTime = tk.Checkbutton(self)
        # self.tgLogTime.place(x=50, y=40, height=15, width=46)
        self.tgLogTime.place(x=self.winfo_width() - 34 - 25, y=35, height=24, width=24)
        self.tgLogTime.configure(activebackground="#d9d9d9")
        self.tgLogTime.configure(activeforeground="#000000")
        self.tgLogTime.configure(background="#d9d9d9")
        self.tgLogTime.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgLogTime_click))
        self.tgLogTime.configure(disabledforeground="#a3a3a3")
        self.tgLogTime.configure(foreground="#000000")
        self.tgLogTime.configure(highlightbackground="#d9d9d9")
        self.tgLogTime.configure(highlightcolor="black")
        self.tgLogTime.configure(justify="left")
        # self.tgLogTime.configure(text="""Time""")
        self.tgLogTime.configure(variable=self.tgLogTime_value)
        self.tgLogTime.configure(indicatoron="0")
        self.tgLogTime.configure(image=self.ICON_LOGTIME)

        self.tgLogSend = tk.Checkbutton(self)
        # self.tgLogTime.place(x=50, y=40, height=15, width=46)
        self.tgLogSend.place(x=self.winfo_width() - 34 - 75, y=35, height=24, width=24)
        self.tgLogSend.configure(activebackground="#d9d9d9")
        self.tgLogSend.configure(activeforeground="#000000")
        self.tgLogSend.configure(background="#d9d9d9")
        self.tgLogSend.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgLogSend_click))
        self.tgLogSend.configure(disabledforeground="#a3a3a3")
        self.tgLogSend.configure(foreground="#000000")
        self.tgLogSend.configure(highlightbackground="#d9d9d9")
        self.tgLogSend.configure(highlightcolor="black")
        self.tgLogSend.configure(justify="left")
        # self.tgLogSend.configure(text="""Time""")
        self.tgLogSend.configure(variable=self.tgLogSend_value)
        self.tgLogSend.configure(indicatoron="0")
        self.tgLogSend.configure(image=self.ICON_LOGSEND)

        self.btnLogClear = tk.Button(self)
        # self.btnLogClear.place(x=100, y=40, height=24, width=24)
        self.btnLogClear.place(x=self.winfo_width() - 34 - 100, y=35, height=24, width=24)
        self.btnLogClear.configure(activebackground="#ececec")
        self.btnLogClear.configure(activeforeground="#000000")
        self.btnLogClear.configure(background="#d9d9d9")
        self.btnLogClear.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnLogClear_click))
        self.btnLogClear.configure(disabledforeground="#a3a3a3")
        self.btnLogClear.configure(foreground="#000000")
        self.btnLogClear.configure(highlightbackground="#d9d9d9")
        self.btnLogClear.configure(highlightcolor="black")
        self.btnLogClear.configure(image=self.ICON_CLEAR)
        # self.btnLogClear.image = self.ICON_CLEAR


        self.btnFontS = tk.Button(self)
        self.btnFontS.place(x=570, y=35, height=24, width=24)
        self.btnFontS.configure(activebackground="#ececec")
        self.btnFontS.configure(activeforeground="#000000")
        self.btnFontS.configure(background="#d9d9d9")
        self.btnFontS.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnFontS_click))
        self.btnFontS.configure(disabledforeground="#a3a3a3")
        self.btnFontS.configure(foreground="#000000")
        self.btnFontS.configure(highlightbackground="#d9d9d9")
        self.btnFontS.configure(highlightcolor="black")
        self.btnFontS.configure(text="A")
        self.btnFontS.configure(font="-size %s" % (self.lbLog_font_size - 1))



        self.btnFontL = tk.Button(self)
        self.btnFontL.place(x=595, y=35, height=24, width=24)
        self.btnFontL.configure(activebackground="#ececec")
        self.btnFontL.configure(activeforeground="#000000")
        self.btnFontL.configure(background="#d9d9d9")
        self.btnFontL.bind("<ButtonRelease-1>", lambda e: self.after(1, self.btnFontL_click))
        self.btnFontL.configure(disabledforeground="#a3a3a3")
        self.btnFontL.configure(foreground="#000000")
        self.btnFontL.configure(highlightbackground="#d9d9d9")
        self.btnFontL.configure(highlightcolor="black")
        self.btnFontL.configure(text="A")
        self.btnFontL.configure(font="-size %s" % (self.lbLog_font_size + 3))

        """self.lblClear = tk.Label(self.Frame1)
        self.lblClear.place(x=118, y=37, height=21, width=33)
        self.lblClear.configure(background="#d9d9d9")
        self.lblClear.configure(disabledforeground="#a3a3a3")
        self.lblClear.configure(foreground="#000000")
        self.lblClear.configure(text="Clear")
        """

        self.tgAutScroll = tk.Checkbutton(self)
        # self.tgAutScroll.place(x=190, y=40, height=15, width=61)
        self.tgAutScroll.place(x=self.winfo_width() - 34, y=35, height=24, width=24)
        self.tgAutScroll.configure(activebackground="#d9d9d9")
        self.tgAutScroll.configure(activeforeground="#000000")
        self.tgAutScroll.configure(background="#d9d9d9")
        self.tgAutScroll.bind("<ButtonRelease-1>", lambda e: self.after(1, self.tgAutScroll_click))
        self.tgAutScroll.configure(disabledforeground="#a3a3a3")
        self.tgAutScroll.configure(foreground="#000000")
        self.tgAutScroll.configure(highlightbackground="#d9d9d9")
        self.tgAutScroll.configure(highlightcolor="black")
        self.tgAutScroll.configure(justify="left")
        # self.tgAutScroll.configure(statusmsg="AutoScroll")
        # self.tgAutScroll.configure(text="""A.Scroll""")
        self.tgAutScroll.configure(indicatoron="0")
        self.tgAutScroll.configure(variable=self.tgAutScroll_value)
        self.tgAutScroll.configure(image=self.ICON_AUTOSCROLL)
        ToolTip(self.tgAutScroll, text="AutoScroll")

        self.protocol("WM_DELETE_WINDOW", self._window_close)

        self.bind("<Configure>", self._window_resize)

    def _update(self):
        # debug_print("update tick")

        if self._update_counter % 100 == 0:
            self._update_counter = 0
            self.serial_update_ports()
        else:
            self._update_counter += 1

        """current = time()
        if current - self._update_counter >= 1.0:
            self._update_counter = current
            self.serial_update_ports()

            # debug_print("tick %s" % current)
        """

        while not self.event_queue.empty():
            read_queue = self.event_queue.get(False)
            try:
                read_queue()
            except (AttributeError, TypeError):
                event, args = read_queue

                event(*args)

        self.after(500, self._update)

    def _def_font_get(self):
        # fonts = font.families()
        # print (fonts)
        # if "TkDefaultFont" in fonts:
        #    debug_print("found")
        # else:
        #    debug_print("Not Found")
        # debug_print(font.Font(font="TkDefaultFont").configure())
        return font.Font(font="TkDefaultFont").configure()

    def _def_font_size_get(self):
        self._font_size = self._def_font_get()["size"]
        return self._font_size

    def _def_font_size_set(self):
        # font = "-family {DejaVu Sans} -size 10 -weight normal"
        font.nametofont("TkDefaultFont").configure(size=self._font_size + self._font_count)

    def _def_font_reset(self):
        font.nametofont("TkDefaultFont").configure(size=font_size)

    def _window_center(self, width=300, height=200):
        # get screen width and height
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()

        # calculate position x and y coordinates
        x = (screen_width / 2) - (width / 2)
        y = (screen_height / 2) - (height / 2)
        self.geometry("%dx%d+%d+%d" % (width, height, x, y))
        self.update_idletasks()
        self.minsize(self.winfo_width(), self.winfo_height())

    def _window_resize(self, event):

        # self.geometry("835x485+341+107")
        if self.width_old != self.winfo_width() or \
                self.height_old != self.winfo_height():
            # debug_print("AVR_IBus_Settings_window_resize %s / %s" % (event.x, self.winfo_x()))
            x_new = self.winfo_x()
            y_new = self.winfo_y()
            width_new = self.winfo_width()
            height_new = self.winfo_height()

            # Terminal
            self._window_layout_refresh()

            # Status Bars
            self.statusBars[0].place(y=height_new - 20)
            self.statusBars[1].place(y=height_new - 20)
            self.statusBars[2].place(y=height_new - 20, width=width_new - 400)

        self.width_old = event.width
        self.height_old = event.height
        self.x_old = event.x
        self.y_old = event.y

    def _window_close(self):
        self.save_app_settings()
        try:
            self.map_picker.destroy()
        except:
            pass
        self.destroy()

    def _window_layout_refresh(self):

        # self.logo.place(x=self.winfo_width() - 45, y=0, height=40, width=40)
        self.btnLogClear.place(x=self.winfo_width() - 34 - 100, y=35, height=24, width=24)
        self.tgLogSend.place(x=self.winfo_width() - 34 - 75, y=35, height=24, width=24)
        self.tgLogTime.place(x=self.winfo_width() - 34 - 25, y=35, height=24, width=24)
        self.tgLog.place(x=self.winfo_width() - 34 - 50, y=35, height=24, width=24)
        self.tgAutScroll.place(x=self.winfo_width() - 34, y=35, height=24, width=24)
        if self.rdLayout_value.get() == "0":
            # default
            self.Tabs.place(x=10, y=40, height=370, width=550)
            self.lbLog.place(x=570, y=60, height=self.winfo_height() - 60 - 24, width=self.winfo_width() - 570 - 25)  # 256
            self.sbLog.place(x=self.winfo_width() - 25, y=60, height=self.winfo_height() - 60 - 25, width=15)

            self.txtSend.place(x=10, y=415, height=self.winfo_height() - 415 - 26, width=484)
            self.txtSend_scroll_y.place(x=494, y=416, height=self.winfo_height() - 415 - 28, width=15)

            self.tgUpload.place(x=515, y=self.winfo_height() - 70, height=19, width=45)
            self.btnSend.place(x=515, y=self.winfo_height() - 50, height=24, width=45)

        elif self.rdLayout_value.get() == "1":
            # _Terminal
            self.Tabs.place(x=0, y=0, height=0, width=0)
            self.lbLog.place(x=10, y=60, height=self.winfo_height() - 75 - 60, width=self.winfo_width() - 10 - 25)  # 256
            self.sbLog.place(x=self.winfo_width() - 25, y=60, height=self.winfo_height() - 75 - 60, width=15)

            self.tgUpload.place(x=0, y=0, height=0, width=0)
            self.txtSend.place(x=10, y=self.winfo_height() - 70, height=44, width=self.winfo_width() - 25 - 45 - 20)  # 499
            self.txtSend_scroll_y.place(x=self.winfo_width() - 25 - 45 - 10, y=self.winfo_height() - 70 + 1, height=42, width=15)

            self.btnSend.place(x=self.winfo_width() - 10 - 45, y=self.winfo_height() - 70, height=44, width=45)

        elif self.rdLayout_value.get() == "2":
            # Send
            self.Tabs.place(x=0, y=0, height=0, width=0)
            self.lbLog.place(x=570, y=60, height=self.winfo_height() - 60 - 24, width=self.winfo_width() - 570 - 25)  # 256
            self.sbLog.place(x=self.winfo_width() - 25, y=60, height=self.winfo_height() - 60 - 25, width=15)

            self.txtSend.place(x=10, y=40, height=self.winfo_height() - 40 - 25, width=499-15)
            self.txtSend_scroll_y.place(x=494, y=41, height=self.winfo_height() - 40 - 27, width=15)

            self.tgUpload.place(x=0, y=0, height=0, width=0)
            # self.tgUpload_value.set(False)
            self.btnSend.place(x=515, y=self.winfo_height() - 70, height=44, width=45)

    def ask(title, text, strings=("Yes", "No"), bitmap="questhead", default=0):
        d = dialog.Dialog(title=title, text=text, bitmap=bitmap, default=default, strings=strings)
        return d.num

    def log(self, text):
        if self.logfile is None:
            return
        self.logfile.log(text)

    def _log_enable(self):
        if self.logfile is not None:
            return
        date_prefix = datetime.now().strftime("%Y%m%d_%H%M%S")
        logfile = os.path.join(APP_PATH, "logs", "%s_%s.log" % (APP_TITLE, date_prefix))
        self.logfile = Logger(logfile)

    def _log_disable(self):
        logging.shutdown()
        self.logfile = None

    def mode_update_enable(self):
        self.btnUpdateOn.configure(state="disabled")
        # self.btnUpdateOff.configure(state="normal")
        self.event_queue.put(self.firmware_get_signature)
        if self.firmware_file != "":
            self.btnUpload.configure(state="normal")
        # self.Tabs.select(self.tabFirmware)
        # self.event_queue.put(self.firmware_get_sync)
        """
        if self.avr_mode.get() != 0:
            #self.serial = Serial()
            self.serial_close()
            self.avr_mode.set(0)
            self.serial_open()

            #self.serial.apply_settings()
        """

    def mode_update_disable(self):
        self.btnUpdateOn.configure(state="normal")
        self.btnUpdateOff.configure(state="disabled")
        self.btnUpload.configure(state="disabled")
        """
        if self.avr_mode.get() != 0:
            #self.serial = Serial()
            self.serial.baudrate = 9600
            self.serial.parity = serial.PARITY_EVEN
            self.serial.flushInput()
            self.serial.flushOutput()
            #self.serial.apply_settings()
        """


    def btnLogClear_click(self):
        debug_print("AVR_IBus_Settings.btnLogClear_click")
        self.lbLog_clear()


    def btnFontS_click(self):
        debug_print("AVR_IBus_Settings.self.btnFontS_click")
        self.lbLog_font_size += -1
        self.lbLog.configure(font="-family {Courier New} -size %s" % (self.lbLog_font_size))


    def btnFontL_click(self):
        debug_print("AVR_IBus_Settings.self.btnFontL_click")
        self.lbLog_font_size += 1
        self.lbLog.configure(font="-family {Courier New} -size %s" % (self.lbLog_font_size))


    def _lbLog_add(self, timestamp, text, color="#00ff00"):
        """timestamp = ""
        if self.tgLogTime_value.get():
            timestamp = datetime.datetime.now().strftime("%H:%M:%S.%f")[:-3]
            timestamp = timestamp + ": "
        """
        self.lbLog.insert("end", "%s%s" % (timestamp, text))
        self.lbLog.itemconfig("end", foreground=color)

        self.log(text)

        if self.tgAutScroll_value.get():

            self.lbLog.yview_moveto(1.0)
            #self.sbLog.set("1.0", "end")

            #self.lbLog.yview("moveto", "1.0")
            #self.event_queue.put((self.lbLog.yview_moveto,(1.0,)))
            #self.update_idletasks()
            #self.dont_scroll = False
            pass


            #self.event_queue.put((self.lbLog_scroll_down))
            #self.event_queue.put((self.lbLog.yview_moveto, (1,)))

        # while self.lbLog.size() > 200:
        #    self.lbLog.delete(0)
        #    debug_print("delete row")


    def lbLog_add(self, text, color="#00ff00"):
        text = text.replace("\r", "\n")
        for line in text.split("\n"):
            if line == "":
                continue
            # self.lbLog_queue.put(("%s" % line, color))
            timestamp = ""
            if self.tgLogTime_value.get():
                timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
                timestamp = timestamp + ": "
            self.event_queue.put((self._lbLog_add, (timestamp, "%s" % line, color)))

    def lbLog_clear(self):
        self.lbLog.delete(0, "end")

    def lbLog_scroll_down(self):
        if not self.dont_scroll:
            self.dont_scroll = True
            try:
                self.lbLog.after_cancel(self.after_cancel_id)
            except AttributeError:
                debug_print("no ID")
            self.after_cancel_id = self.lbLog.after(250, self._lbLog_scroll_down)


    def _lbLog_scroll_down(self):
        try:
            #self.lbLog.yview("moveto", "1.0")
            self.lbLog.yview_moveto(1)

            # self.sbLog.set("moveto", "1.0")
            # self.lbLog.see(END)
        except:
            # debug_print("scroll error")
            pass
        self.dont_scroll = False

    def sbLog_change(self, *args):
        debug_print(args)
        #if self.dont_scroll:
        #    self.dont_scroll = False
        #    return

        if self.tgAutScroll_value.get():
            self.tgAutScroll_value.set(False)

        try:
            self.lbLog.yview(*args)
        except:
            pass

    def statusBar_set(self, bar_pos, msg, clear_timeout=0):
        self.statusBars[bar_pos]["text"] = msg

        if clear_timeout:
            self.after(clear_timeout, self.statusBar_reset, bar_pos)

    def statusBar_reset(self, bar_pos):
        self.statusBars[bar_pos]["text"] = ""

    def serial_get_ports(self):
        ports = []
        """if platform.system() == "Linux":
            for f in glob("/dev/ttyUSB*"):
                ports.append(f)
        elif platform.system() == "Darwin":
            for f in glob("/dev/tty.usbserial*"):
                ports.append(f)
        else:"""
        for port in list_ports.comports():
            try:
                Serial(port.device)
                ports.append(port.device)
            except serialutil.SerialException:
                pass
        ports.sort()
        # result = ["Select Device..."]
        ports.insert(0, "Select Device...")
        # result.extend(ports)
        return ports

    def serial_ports(self):
        """ Lists serial port names

            :raises EnvironmentError:
                On unsupported or unknown platforms
            :returns:
                A list of the serial ports available on the system
        """
        if sys.platform.startswith('win'):
            #ports = ['COM%s' % (i + 1) for i in range(256)]
            ports = [port.device for port in sorted(serial.tools.list_ports.comports())]
        elif sys.platform.startswith('linux') or sys.platform.startswith('cygwin'):
            # this excludes your current terminal "/dev/tty"
            ports = glob.glob('/dev/tty[A-Za-z]*')
        elif sys.platform.startswith('darwin'):
            ports = glob.glob('/dev/tty.*')
        else:
            raise EnvironmentError('Unsupported platform')

        result = []
        for port in ports:
            try:
                s = serial.Serial(port)
                s.close()
                result.append(port)
            except (OSError, serial.SerialException):
                pass

        return result


    def serial_update_ports(self):
        if self.serial:
            return

        port_list_temp = self.port_list
        #self.port_list = self.serial_get_ports()
        self.port_list = self.serial_ports()
        if port_list_temp == self.port_list:
            return

        self.cbSerialPorts.configure(values=self.port_list)
        if len(self.port_list) < 2:
            self.cbSerialPorts.current(0)
        else:
            if self.cbSerialPorts.current() < 1:
                self.cbSerialPorts.current(1)

    def serial_open(self):
        # debug_print(self.avr_mode.get())
        if self.avr_mode.get() == 0:
            baudrate = 38400
            parity = serial.PARITY_NONE
            #baudrate = 9600
            #parity = serial.PARITY_EVEN
            debug_print("open avr")
        else:
            baudrate = 9600
            parity = serial.PARITY_EVEN
            debug_print("open ibus")
        self.serial_device = self.cbSerialPorts.get()

        try:
            self.serial = serial.Serial(
                self.serial_device,
                baudrate=baudrate,
                bytesize=serial.EIGHTBITS,
                parity=parity,
                stopbits=serial.STOPBITS_ONE,
                timeout=1.0,
                xonxoff=0,
                dsrdtr=0,
                rtscts=0)
        except serial.SerialException:
            return

        self.serial.flushOutput()
        self.serial.flushInput()
        self.serial_rx_buffer = []
        self.serial_run = True

        self.serial_reading_thread = Thread(target=self.serial_reading)
        self.serial_reading_thread.daemon = True
        self.serial_reading_thread.start()

        self.event_queue.put((self.serial_enabled))

    def serial_close(self):
        if self.serial is None:
            return
        self.serial_run = False

        # self.serial = Serial()
        try:
            self.serial_reading_thread.join(2)
        except RuntimeError:
            pass

        self.serial.close()
        self.serial = None

        self.event_queue.put((self.serial_disabled))

    def serial_reconfig(self):
        if self.avr_mode.get() == 0:
            self.serial.parity = serial.PARITY_NONE
            self.serial.baudrate = 38400
        if self.avr_mode.get() == 1:
            self.serial.parity = serial.PARITY_EVEN
            self.serial.baudrate = 9600

        #sleep(0.5)

        while self.serial.in_waiting:
            self.serial.read()

        self.serial.flushInput()
        self.serial.flushOutput()

    def serial_enabled(self):
        self.btnOpen.configure(state="disabled")
        self.btnClose.configure(state="normal")
        self.rdAVR.configure(state="disabled")
        self.rdIBus.configure(state="disabled")
        self.cbSerialPorts.configure(state="disabled")
        self.sub_menu_configuration.entryconfig(0, state="normal")
        self.sub_menu_configuration.entryconfig(1, state="normal")
        self.sub_menu_configuration.entryconfig(2, state="normal")
        self.sub_menu_configuration.entryconfig(3, state="normal")

    def serial_disabled(self):
        self.btnOpen.configure(state="normal")
        self.btnClose.configure(state="disabled")
        self.rdAVR.configure(state="normal")
        self.rdIBus.configure(state="normal")
        self.cbSerialPorts.configure(state="normal")
        self.sub_menu_configuration.entryconfig(0, state="disabled")
        self.sub_menu_configuration.entryconfig(1, state="disabled")
        self.sub_menu_configuration.entryconfig(2, state="disabled")
        self.sub_menu_configuration.entryconfig(3, state="disabled")

    def serial_reading(self):
        while self.serial_run:
            try:
                # self.serial = Serial()

                """result = self.serial.read_until("\r")
                if len(result) > 0:
                    self.lbLog_add(result)
                """
                if self.firmware_mode:
                    sleep(0.001)
                    continue

                # if self.serial.in_waiting:
                #    print("wait:%s" % self.serial.in_waiting)
                #    print("buff:%s - %s" % (len(self.serial_rx_buffer), self.serial_rx_buffer))

                char = self.serial.read(1)
                # char = char.decode("ascii")
                # char = bstr_to_ustr(char)
                char = char.decode("unicode_escape")  # .encode("utf-8")

                if self.avr_mode.get() == 0:
                    # if char:
                    #    if ord(char) >= 32:
                    self.serial_rx_buffer.append(char)
                    if char == "\r":
                        self.serial_reading_avr()
                else:
                    if char:
                        self.serial_rx_buffer.append(ord(char))
                        self.serial_reading_ibus()

            except serial.SerialException:
                self.serial_close()

        debug_print("serial reading thread finished")

    def serial_reading_avr(self):
        command = "".join(self.serial_rx_buffer)
        self.serial_rx_buffer = self.serial_rx_buffer[len(self.serial_rx_buffer):]
        command = command.strip().strip('\x00')



        if command == "AVR-IBus by harryberlin":
            self.event_queue.put(self.mode_update_disable)

        if command == "SET:100:0" or command == "UPD":
            self.event_queue.put(self.mode_update_enable)
            pass

        command_temp = command.split(":")
        if command_temp[0] == "SET":
            if "40-59" in command_temp[1]:
                self.event_queue.put((self.configuration_set, (40, command_temp[1][6:-1].strip())))
            else:
                self.event_queue.put((self.configuration_set, (command_temp[1], command_temp[2])))
            #return

        self.lbLog_add(command)

    def serial_reading_ibus(self):
        if len(self.serial_rx_buffer) < 4:
            return

        msg_src = self.serial_rx_buffer[0]
        msg_dst = self.serial_rx_buffer[2]

        if msg_src == msg_dst:
            self.serial_rx_buffer = self.serial_rx_buffer[1:]
            return

        msg_len = self.serial_rx_buffer[1]

        if msg_len < 3 or msg_len > 37:
            self.serial_rx_buffer = self.serial_rx_buffer[1:]
            return

        if len(self.serial_rx_buffer) < msg_len + 2:
            return

        if self._calculate_checksum(self.serial_rx_buffer[:msg_len + 2]) == 0:
            #FB 05 FA 52 53 54 51
            print(self.serial_rx_buffer[3:10])
            if msg_src == 0xFA and msg_dst == 0xFB and self.serial_rx_buffer[3:12] == [0x01, 0x41, 0x56, 0x52, 0x2D, 0x49, 0x42, 0x75, 0x73]:
                self.event_queue.put(self.mode_update_disable)

            self.lbLog_add(" ".join(["%02X" % i for i in self.serial_rx_buffer]) + " || " + " ".join(["%s" % chr(i) for i in self.serial_rx_buffer]))
            #self.lbLog_add(" ".join(["%s" % chr(i) for i in self.serial_rx_buffer]))
            self.serial_rx_buffer = self.serial_rx_buffer[msg_len + 2:]
        else:
            self.serial_rx_buffer = self.serial_rx_buffer[1:]

    def serial_write(self, text):
        try:
            # self.serial = Serial()
            if self.avr_mode.get() == 0:
                try:
                    self.serial.write(b"%s\r" % text.encode("ascii"))
                except UnicodeDecodeError:
                    self.serial.write(b"%s\r" % text)
                if self.tgLogSend_value.get():
                    self.lbLog_add(text, "#35B9FF")
            else:
                try:
                    self.serial.write(b"%s" % text.encode("ascii"))
                except UnicodeDecodeError:
                    self.serial.write(b"%s" % text)
                except UnicodeEncodeError:
                    self.serial.write(bytes(text, 'cp1252'))

                if self.tgLogSend_value.get():
                    self.lbLog_add(" ".join(["%02X" % ord(i) for i in text]), "#35B9FF")
        except serial.SerialException:
            self.serial_close()
        except AttributeError:
            self.statusBar_set(0, "No Connection", 3000)

    def serial_write_hex_message(self, hexstring):

        hexstring = hexstring.replace(" ", "")
        # hexstring_tmp = hexstring.upper().split(" ")
        hexstring_tmp = [a + b for a, b in zip(hexstring.upper()[::2], hexstring.upper()[1::2])]

        data = [int(s, 16) for s in hexstring_tmp[3:-1]]

        packet = [int(hexstring_tmp[0], 16), len(data) + 2, int(hexstring_tmp[2], 16)]
        packet.extend(data)

        packet.append(self._calculate_checksum(packet))
        bytepacket = bytearray(packet)
        debug_print(["%02X" % l for l in bytepacket])
        self.serial_write("".join(["%s" % chr(i) for i in packet]))


    def _calculate_checksum(self, packet):
        result = 0
        for value in packet:
            result ^= value
        return result

    def btnAV0_click(self):
        debug_print("AVR_IBus_Settings.btnAV0_click")
        self.serial_write("av:0")

    def btnAV1_click(self):
        debug_print("AVR_IBus_Settings.btnAV1_click")
        self.serial_write("av:1")

    def btnAV_click(self):
        debug_print("AVR_IBus_Settings.btnAV_click")
        self.serial_write("av")

    def btnBFD_click(self):
        debug_print("AVR_IBus_Settings.btnBFD_click")
        time = 0
        if self.tgBFD_value.get():
            time = self.spnBFDTime.get()

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:BFD:%s" % time)
        else:
            self.txtSend_set("FB LL FA 09 1E %02X CK" % value)

    def btnBlink_click(self):
        debug_print("AVR_IBus_Settings.btnBlink_click")
        time = 0
        if self.tgBlink_value.get():
            time = self.spnBlink_value.get()

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:BLINK:%s" % time)
        else:
            self.txtSend_set("FB LL FA 09 11 %02X CK" % time)


    def btnCVMClose_click(self):
        debug_print("AVR_IBus_Settings.btnCVMClose_click")
        self.serial_write("cvm:close")

    def btnCVMFold_click(self):
        debug_print("AVR_IBus_Settings.btnCVMFold_click")
        value = 0
        if self.tgCVMFold_value.get():
            value = 1

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:CVM_FOLD:%s" % value)
        else:
            self.txtSend_set("FB LL FA 09 1C %02X CK" % value)

    def btnCVMOpen_click(self):
        debug_print("AVR_IBus_Settings.btnCVMOpen_click")
        self.serial_write("cvm:open")

    def btnCVMStop_click(self):
        debug_print("AVR_IBus_Settings.btnCVMStop_click")
        self.serial_write("cvm:stop")

    def btnCdcEmu_click(self):
        debug_print("AVR_IBus_Settings.btnCdcEmu_click")
        value = 0
        if self.tgCdcEmu_value.get():
            value = 1

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:CDC_EMU:%s" % value)
        else:
            self.txtSend_set("FB LL FA 09 01 %02X CK" % value)

    def btnDiag0_click(self):
        debug_print("AVR_IBus_Settings.btnDiag0_click")
        self.serial_write("diag:0")

    def btnDiag1_click(self):
        debug_print("AVR_IBus_Settings.btnDiag1_click")
        self.serial_write("diag:1")

    def btnDiag2_click(self):
        debug_print("AVR_IBus_Settings.btnDiag2_click")
        self.serial_write("diag:2")

    def btnDiag_click(self):
        debug_print("AVR_IBus_Settings.btnDiag_click")
        self.serial_write("diag")

    def btnDrl_click(self):
        debug_print("AVR_IBus_Settings.btnDrl_click")
        value = 0
        if self.tgDrl_value.get():
            value = set_bit(value, 0, self.tgDrlParkFront_value.get())
            value = set_bit(value, 1, self.tgDrlFogFront_value.get())
            value = set_bit(value, 2, self.tgDrlParkTail_value.get())

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:DRL:%s" % value)
        else:
            self.txtSend_set("FB LL FA 09 16 %02X CK" % value)

    def btnF2P_click(self):
        debug_print("AVR_IBus_Settings.btnF2P_click")
        value = 0
        if self.tgF2P_value.get():
            value = set_bit(value, 0, self.tgF2PLow_value.get())
            value = set_bit(value, 1, self.tgF2PFogFront_value.get())
            value = set_bit(value, 2, self.tgF2PSeq_value.get())

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:F2P:%s" % value)
        else:
            self.txtSend_set("FB LL FA 09 07 %02X CK" % value)

    def btnFogTurn_click(self):
        debug_print("AVR_IBus_Settings.btnFogTurn_click")
        speed = 0
        time = 0
        if self.tgFogTurn_value.get():
            speed = self.spnFogTurnSpeed_value.get()
            time = self.spnFogTurnTime_value.get()

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:FOG_TURN:%s:%s" % (speed, time))
        else:
            self.txtSend_set("""FB LL FA 09 13 %02X CK\nFB LL FA 09 15 %02X CK""" % (speed, time))


    def btnHeatFFB_click(self):
        debug_print("AVR_IBus_Settings.btnHeatFFB_click")
        value = 0
        if self.tgHeatFFB_value.get():
            value = 1

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:HEAT_FFB:%s" % value)
        else:
            self.txtSend_set("FB LL FA 09 1B %02X CK" % value)

    def btnLevLight_click(self):
        debug_print("AVR_IBus_Settings.btnLevLight_click")
        time = 0
        if self.tgLevLight_value.get():
            time = self.spnLevLightTime_value.get()

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:LEV:LIGHT:%s" % time)
        else:
            self.txtSend_set("FB LL FA 09 04 %02X CK" % time)

    def btnLightBeam_click(self):
        debug_print("AVR_IBus_Settings.btnLightBeam_click")
        value = 0
        value = set_bit(value, 0, self.tgLightBeamLow_value.get())
        value = set_bit(value, 1, self.tgLightBeamHigh_value.get())

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:LIGHT:BEAM:%s" % value)
        else:
            self.txtSend_set("FB LL FA 09 0A %02X CK" % value)

    def btnLightOther_click(self):
        debug_print("AVR_IBus_Settings.btnLightOther_click")
        value = 0
        value = set_bit(value, 0, self.tgLightOtherFogFront_value.get())
        value = set_bit(value, 1, self.tgLightOtherLicence_value.get())
        value = set_bit(value, 2, self.tgLightOtherReverse_value.get())
        value = set_bit(value, 3, self.tgLightOtherBrake_value.get())
        value = set_bit(value, 4, self.tgLightOtherAmbient_value.get())
        value = set_bit(value, 5, self.tgLightOtherFogBack_value.get())

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:LIGHT:OTHER:%s" % value)
        else:
            self.txtSend_set("FB LL FA 09 0B %02X CK" % value)

    def btnLightPark_click(self):
        debug_print("AVR_IBus_Settings.btnLightPark_click")
        value = 0
        value = set_bit(value, 0, self.tgLightParkFront_value.get())
        value = set_bit(value, 1, self.tgLightParkBack_value.get())
        value = set_bit(value, 2, self.tgLightParkBackInside_value.get())

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:LIGHT:PARK:%s" % value)
        else:
            self.txtSend_set("FB LL FA 09 08 %02X CK" % value)

    def btnLightTurn_click(self):
        debug_print("AVR_IBus_Settings.btnLightTurn_click")
        value = 0
        value = set_bit(value, 0, self.tgLightTurnFront_value.get())
        value = set_bit(value, 1, self.tgLightTurnBack_value.get())
        value = set_bit(value, 2, self.tgLightTurnSide_value.get())

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:LIGHT:TURN:%s" % value)
        else:
            self.txtSend_set("FB LL FA 09 0D %02X CK" % value)

    def btnLight_click(self):
        debug_print("AVR_IBus_Settings.btnLight_click")
        self.serial_write("light")

    def btnLockSpeed_click(self):
        debug_print("AVR_IBus_Settings.btnLockSpeed_click")
        value = 0
        if self.tgLockSpeed_value.get():
            value = self.spnLockSpeed_value.get()

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:LOCK_SPD:%s" % value)
        else:
            self.txtSend_set("FB LL FA 09 12 %02X CK" % value)

    def btnMirFold_click(self):
        debug_print("AVR_IBus_Settings.btnMirFold_click")
        value = 0
        value = set_bit(value, 0, self.tgMirFoldInLev_value.get())
        value = set_bit(value, 1, self.tgMirFoldOutWel_value.get())
        value = set_bit(value, 2, self.tgMirFoldInIgn_value.get())
        value = set_bit(value, 3, self.tgMirFoldOutIgn_value.get())
        value = set_bit(value, 4, self.tgMirFoldInFFBDouble_value.get())
        value = set_bit(value, 5, self.tgMirFoldOutFFBDouble_value.get())
        value = set_bit(value, 6, self.tgMirFoldInFFBHold_value.get())
        value = set_bit(value, 7, self.tgMirFoldOutDoor_value.get())

        value = set_bit(value, 8, self.tgMirFoldInKeyRemove_value.get())
        value = set_bit(value, 9, self.tgMirFoldOutKeyInsert_value.get())
        value = set_bit(value, 10, self.tgMirFoldOutEngineStart_value.get())

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:MIR_FOLD:%s" % value)
        else:
            self.txtSend_set("FB LL FA 09 05 %02X CK\nFB LL FA 09 09 %02X CK" % ((value & 0x00FF), value >> 8))

    def tgMirFoldInLev_click(self):
        debug_print("AVR_IBus_Settings.tgMirFoldInLev_click")

    def tgMirFoldOutWel_click(self):
        debug_print("AVR_IBus_Settings.tgMirFoldOutWel_click")

    def btnNavZoom_click(self):
        debug_print("AVR_IBus_Settings.btnNavZoom_click")
        value = 0
        if self.tgNavZoom_value.get():
            value = 1

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:NAVZ:%s" % value)
        else:
            self.txtSend_set("FB LL FA 09 24 %02X CK" % value)

    def btnNtwkMode_click(self):
        debug_print("AVR_IBus_Settings.btnNtwkMode_click")
        value = self.spnNtwkMode_value.get()
        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:NTWM:%s" % value)
        else:
            self.txtSend_set("FB LL FA 09 18 %02X CK" % value)


    def btnObcDisp_click(self):
        debug_print("AVR_IBus_Settings.btnObcDisp_click")
        value = 0

        if self.tgObcDisp_value.get():
            if self.tgObcDispCoolant_value.get():
                value = 1
            elif self.tgObcDispSpeed_value.get():
                value = 2
            elif self.tgObcDispOil_value.get():
                value = 3
            elif self.tgObcDispVolt_value.get():
                value = 4
            elif self.tgObcDispFive_value.get():
                value = 5
            elif self.tgObcDispSix_value.get():
                value = 6
            elif self.tgObcDispSeven_value.get():
                value = 7
            elif self.tgObcDispEight_value.get():
                value = 8

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:OBC_DISP:%s" % value)
        else:
            self.txtSend_set("FB LL FA 09 1A %02X CK" % value)

    def btnOpen_click(self):
        if self.btnOpen["state"] == "disabled":
            return
        debug_print("AVR_IBus_Settings.btnOpen_click")
        self.event_queue.put(self.serial_open)

    def btnClose_click(self):
        if self.btnClose["state"] == "disabled":
            return
        debug_print("AVR_IBus_Settings.btnClose_click")
        self.event_queue.put(self.serial_close)

    def btnCustom_click(self):
        debug_print("AVR_IBus_Settings.btnCustom_click")

    def btnPing_click(self):
        debug_print("AVR_IBus_Settings.btnPing_click")
        if self.avr_mode.get() == 0:
            self.serial_write("ping")
        else:
            self.txtSend_set("FB LL FA 50 49 4E 47 CK")

    def btnReset_click(self):
        debug_print("AVR_IBus_Settings.btnReset_click")
        # def _btnReset_click(self):

        if self.avr_mode.get() == 0:
            self.serial_write("reset")
        else:
            self.txtSend_set("FB LL FA 52 53 54 CK")

    def btnRCam_click(self):
        debug_print("AVR_IBus_Settings.btnRCam_click")
        speed = 0
        time = 0
        if self.tgRCam_value.get():
            speed = self.spnRCamSpeed.get()
            time = self.spnRCamTime.get()

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:RCAM:%s:%s" % (speed, time))
        else:
            self.txtSend_set("""FB LL FA 09 20 %02X CK\nFB LL FA 09 21 %02X CK""" % (speed, time))


    def btnRelock_click(self):
        debug_print("AVR_IBus_Settings.btnRelock_click")
        value = 0
        if self.tgRelock_value.get():
            value = self.spnRelockTime_value.get()

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:RELOCK:%s" % value)
        else:
            self.txtSend_set("FB LL FA 09 23 %02X CK" % value)

    def btnDownloadSettings_click(self):
        debug_print("AVR_IBus_Settings.btnDownloadSettings_click")
        self.serial_write("get:sts")

    def btnUploadSettings_click(self):
        debug_print("AVR_IBus_Settings.btnUploadSettings_click")

    def btnResetSettings_click(self):
        debug_print("AVR_IBus_Settings.btnResetSettings_click")
        self.serial_write("set:rst")

    def btnImportSettings_click(self):
        debug_print("AVR_IBus_Settings.btnImportSettings_click")
        self.configuration_import()

    def btnExportSettings_click(self):
        debug_print("AVR_IBus_Settings.btnExportSettings_click")
        self.configuration_export()

    def btnRxTx_click(self):
        debug_print("AVR_IBus_Settings.btnRxTx_click")
        value = 0
        time = 12
        #if self.tgRxTx_value.get():
        value = set_bit(value, 0, self.tgRxTxRx_value.get())
        value = set_bit(value, 1, self.tgRxTxTx_value.get())

        time = self.spnRxTxTime_value.get()

        if self.avr_mode.get() == 0:
            #self.txtSend_set("SET:RXTX:%s\nSET:RXTX:MS:%s" % (value, time))
            self.txtSend_set("SET:RXTX:%s" % value)
        else:
            #self.txtSend_set("""FB LL FA 09 14 %02X CK\nFB LL FA 09 22 %02X CK""" % (value, time))
            self.txtSend_set("""FB LL FA 09 14 %02X CK""" % value)

    def btnHexSelect_click(self):
        #if self.btnHexSelect["state"] == "disabled":
        #    return

        debug_print("AVR_IBus_Settings.btnHexSelect_click")
        if sys.platform == "darwin":
            name = filedialog.askopenfilename(title="Select file", filetypes=(("hex files", "hex"), ("all files", "*.*"),))
        else:
            if self.firmware_signature == MEM_PARTS_328P["signature"]["value"] or self.firmware_signature == MEM_PARTS_328PB["signature"]["value"]:
                name = filedialog.askopenfilename(title="Select file", filetypes=(("hex files", "*AVR_IBus_NANO*.hex"), ("all files", "*.*"),))
            elif self.firmware_signature == MEM_PARTS_2560["signature"]["value"]:
                name = filedialog.askopenfilename(title="Select file", filetypes=(("hex files", "*AVR_IBus_MEGA*.hex"), ("all files", "*.*"),))
            else:
                name = ""

        debug_print(name)

        if name != "":
            self.firmware_file = name
            with open(self.firmware_file, "rb") as hex_file:
                hex_file_temp = hex_file.read().decode("unicode_escape")
                for line in hex_file_temp.split("\n"):
                    if "#build:" in line:
                        self.lblHexBuild_value.set(line[8:].strip())
            self.txtHexSelected_value.set(os.path.split(name)[1])
            self.btnUpload.configure(state="normal")

    def btnSenVal_click(self):
        debug_print("AVR_IBus_Settings.btnSenVal_click")
        value = 255
        if self.tgSenVal_value.get():
            value = self.spnSenVal_value.get()

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:LIGHT:SEN_VAL:%s" % value)
        else:
            self.txtSend_set("FB LL FA 09 06 %02X CK" % value)

    def btnSend_click(self):
        debug_print("AVR_IBus_Settings.btnSend_click")
        debug_print(self.txtSend.get("1.0", "end").strip())

        if self.avr_mode.get() == 0:
            for line in self.txtSend.get("1.0", "end").strip().split("\n"):
                self.serial_write(line)
                sleep(0.1)
        else:
            for line in self.txtSend.get("1.0", "end").strip().split("\n"):
                self.serial_write_hex_message(line)
                sleep(0.1)

    def txtSend_set(self, text):
        self.txtSend.delete(1.0, "end")
        self.txtSend.insert(1.0, text)
        if self.tgUpload_value.get():
            self.btnSend_click()

    def txtSend_get(self):
        return self.txtSend.get("1.0", "end").strip()

    def btnShutdown_click(self):
        debug_print("AVR_IBus_Settings.btnShutdown_click")
        self.serial_write("shutdown")

    def btnTimeOff_click(self):
        debug_print("AVR_IBus_Settings.btnTimeOff_click")
        value = self.spnTimeOff_value.get()
        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:TIME_OFF:%s" % value)
        else:
            self.txtSend_set("FB LL FA 09 19 %02X CK" % value)

    def tgReqsGmState_click(self):
        debug_print("AVR_IBus_Settings.tgReqsGmState_click")

    def tgReqsLcmDim_click(self):
        debug_print("AVR_IBus_Settings.tgReqsLcmDim_click")
        
    def btnReqs_click(self):
        debug_print("AVR_IBus_Settings.btnReqs_click")
        value = 0xFF
        value = set_bit(value, 0, self.tgReqsGmState_value.get())
        value = set_bit(value, 1, self.tgReqsLcmDim_value.get())
        
        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:REQS:%s" % value)
        else:
            self.txtSend_set("FB LL FA 09 26 %02X CK" % value)


    def btnAVRClockGet_click(self):
        debug_print("AVR_IBus_Settings.btnAVRClockGet_click")
        self.serial_write("get:time")


    def btnAVRClockNTP_click(self):
        debug_print("AVR_IBus_Settings.btnAVRClockNTP_click")

        #_, value = RequestTimefromNtp()

        value = datetime.now()
        value = getSeconds(value.year, value.month, value.day, value.hour, value.minute, value.second)
        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:TIME:%s" % int(value))
            #self.after(400, self.txtSend_set, "SET:TIME:%s" % int(value+1))

    def spnAVRClock_year_click(self):
        debug_print("AVR_IBus_Settings.spnAVRClock_year_click")

    def spnAVRClock_month_click(self):
        debug_print("AVR_IBus_Settings.spnAVRClock_month_click")

    def spnAVRClock_day_click(self):
        debug_print("AVR_IBus_Settings.spnAVRClock_hour_click")

    def spnAVRClock_hour_click(self):
        debug_print("AVR_IBus_Settings.spnAVRClock_hour_click")


    def spnAVRClock_min_click(self):
        debug_print("AVR_IBus_Settings.spnAVRClock_min_click")


    def spnAVRClock_sec_click(self):
        debug_print("AVR_IBus_Settings.spnAVRClock_sec_click")


    def btnAVRClock_click(self):
        debug_print("AVR_IBus_Settings.btnAVRClock_click")

        value = getSeconds(self.spnAVRClock_year_value.get(), self.spnAVRClock_month_value.get(),self.spnAVRClock_day_value.get(),self.spnAVRClock_hour_value.get(),self.spnAVRClock_min_value.get(), self.spnAVRClock_sec_value.get())
        debug_print(value)
        self.txtSend_set("SET:TIME:%s" % int(value))

    def spnTimezone_click(self):
        debug_print("AVR_IBus_Settings.spnTimezone_click")

    def btnTimezone_click(self):
        debug_print("AVR_IBus_Settings.btnTimezone_click")
        self.txtSend_set("SET:TIME:ZONE:%s" % self.spnTimezone_value.get())

    def tgTimeSummer_click(self):
        debug_print("AVR_IBus_Settings.tgTimeSummer_click")

    def btnTimeSummer_click(self):
        debug_print("AVR_IBus_Settings.btnTimeSummer_click")
        value = 0
        value = set_bit(value, 0, self.tgTimeSummer_value.get())

        if self.avr_mode.get() == 0:
            #self.txtSend_set("SET:RXTX:%s\nSET:RXTX:MS:%s" % (value, time))
            self.txtSend_set("SET:TIME:SUMMER:%s" % value)
        else:
            #self.txtSend_set("""FB LL FA 09 14 %02X CK\nFB LL FA 09 22 %02X CK""" % (value, time))
            self.txtSend_set("""FB LL FA 09 46 %02X CK""" % value)

    def spnTimeTmrOffset_click(self):
        debug_print("AVR_IBus_Settings.spnTimeTmrOffset_click")

    def btnTimeTmrOffset_click(self):
        debug_print("AVR_IBus_Settings.btnTimeTmrOffset_click")
        self.txtSend_set("SET:TIME:ZONE:%s" % self.spnTimeTmrOffset_value.get())

    def txtPositionLat_change(self, *args):
        debug_print("AVR_IBus_Settings.txtPositionLat_change")
        self.txtWelMsg_value.set(self.txtWelMsg_value.get()[:20])
        self.lblWelMsgLen_value.set("(%s)" % len(self.txtWelMsg_value.get()))

    def txtPositionLon_change(self, *args):
        debug_print("AVR_IBus_Settings.txtPositionLon_change")

    def btnPickMap_click(self):
        debug_print("AVR_IBus_Settings.btnPickMap_click")
        if PY2:
            return
        else:
            self.map_picker = MapPicker(self)
            result = self.map_picker.show()
            if result == None:
                return
            #messagebox.showerror(title="Firmware upload", message="Lat:%s \n\n Lon:%s" % (result[0], result[1]))
            if self.avr_mode.get() == 0:
                self.txtSend_set("SET:TIME:LAT:%s\nSET:TIME:LON:%s" % (result[0], result[1]))

    def btnPosition_click(self):
        debug_print("AVR_IBus_Settings.btnPosition_click")

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:TIME:LAT:%s\nSET:TIME:LON:%s" % (self.txtPositionLat_value.get(), self.txtPositionLon_value.get()))

    def btnSunrise_click(self):
        debug_print("AVR_IBus_Settings.btnSunrise_click")
        debug_print((self.cbSunrise.current(), self.cbSunrise_value.get()))
        debug_print((self.cbSunrise.current(), self.cbSunrise.current() % 2))

        if self.avr_mode.get() == 0:
            if self.cbSunrise.current()+1 < 5:
                self.txtSend_set("SET:TIME:ZENITH:%s" % (int(self.cbSunrise.current())+1))
            else:
                self.txtSend_set("SET:TIME:ZENITH:%s" % (self.spnSunriseOffset_value.get()))


    def spnSunriseOffset_click(self):
        debug_print("AVR_IBus_Settings.spnSunriseOffset_click")

    def btnUnlock_click(self):
        debug_print("AVR_IBus_Settings.btnUnlock_click")
        value = 0
        value = set_bit(value, 0, self.tgUnlockDoor_value.get())
        value = set_bit(value, 1, self.tgUnlockBrake_value.get())
        value = set_bit(value, 2, self.tgUnlockGearP_value.get())
        value = set_bit(value, 3, self.tgUnlockIgn1_value.get())

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:UNLOCK:%s" % value)
        else:
            self.txtSend_set("FB LL FA 09 1F %02X CK" % value)

    def btnUpdateOff_click(self):
        if self.btnUpdateOff["state"] == "disabled":
            return
        debug_print("AVR_IBus_Settings.btnUpdateOff_click")
        self.firmware_mode_off()
        self.serial_write("X")

    def btnUpdateOff_doubleclick(self):
        debug_print("AVR_IBus_Settings.btnUpdateOff_doubleclick")
        self.firmware_mode_off()
        self.serial_write("X")

    def btnUpdateOn_click(self):
        if self.btnUpdateOn["state"] == "disabled":
            return
        debug_print("AVR_IBus_Settings.btnUpdateOn_click")

        if self.avr_mode.get() == 0:
            self.serial_write("UPD")
        else:
            self.serial_write_hex_message("FB LL FA 55 50 44 CK")
            self.avr_mode_selected = True

            #self.serial_close()

            #self.avr_mode.set(0)

            #self.after_idle(self.serial_open)

            self.avr_mode.set(0)
            #self.avr_mode_selected = True
            sleep(0.1)
            self.event_queue.put((self.serial_reconfig))






    def btnUpdateOn_doubleclick(self):
        debug_print("AVR_IBus_Settings.btnUpdateOn_doubleclick")
        self.mode_update_enable()

    def btnUpload_click(self):
        if self.btnUpload["state"] == "disabled":
            return
        debug_print("AVR_IBus_Settings.btnUpload_click")
        # self.btnUpload.configure(state="disabled")
        debug_print(self.progressBar)

        #self.event_queue.put(self.firmware_upload)
        self.btnUpload.configure(state="disabled")
        self.btnUpdateOff.configure(state="disabled")

        as_thread(self.firmware_upload)

    def btnWelLight_click(self):
        debug_print("AVR_IBus_Settings.btnWelLight_click")
        time = 0
        value = 0
        if self.tgWelLight_value.get():
            time = self.spnWelLightTime_value.get()
            value = set_bit(value, 0, self.tgWelLightCancelKeyIn_value.get())
            value = set_bit(value, 1, self.tgWelLightCancelDoor_value.get())
            value = set_bit(value, 2, self.tgWelLightCancelIgn1_value.get())

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:WEL:LIGHT:%s:%s" % (time, value))
        else:
            self.txtSend_set("""FB LL FA 09 02 %02X CK\nFB LL FA 09 03 %02X CK""" % (time, value))

    def btnWelMsgTxt_click(self):
        debug_print("AVR_IBus_Settings.btnWelMsgTxt_click")
        value = self.txtWelMsg_value.get()

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:WEL:MSG_T:%s" % value)
        else:
            value = value.center(20)
            text = ""
            for i in range(0, 20):
                text = "%s%s" % (text, "FB LL FA 09 %02X %02X CK\n" % (i+40, ord(value[i])))
            debug_print(text)
            self.txtSend_set(text)

    def btnWelMsg_click(self):
        debug_print("AVR_IBus_Settings.btnWelMsg_click")
        value = 0
        if self.tgWelMsg_value.get():
            value = 1

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:WEL:MSG:%s" % value)
        else:
            self.txtSend_set("FB LL FA 09 10 %02X CK" % value)

    def btnCustomCmd_click(self, btn_number):
        debug_print("AVR_IBus_Settings.btnCustomCmd_click %s" % btn_number)
        if self.tgCustomCmd_value.get():
            debug_print("Set button %s" % btn_number)
            text = simpledialog.askstring(APP_TITLE, "Button Name?\n",
                                          initialvalue=ini_read(APP_INI_FILE, "Button_%02d" % btn_number, "text", "%02d" % btn_number),
                                          parent=self)
            if text is None:
                return
            message = simpledialog.askstring(APP_TITLE, """IBus Message as HEX\nPlaceholder for Length is LL and Checksum is CK.\n(Example: [80 LL BF 11 00 CK])\n""",
                                             initialvalue=ini_read(APP_INI_FILE, "Button_%02d" % btn_number, "message", ""),
                                             parent=self)
            if message is None:
                return
            ini_write(APP_INI_FILE, "Button_%02d" % btn_number, "text", text)
            ini_write(APP_INI_FILE, "Button_%02d" % btn_number, "message", message)
            self.btnCustomCmd[btn_number].configure(text=ini_read(APP_INI_FILE, "Button_%02d" % btn_number, "text", "%02d" % btn_number))
        else:
            debug_print("Event button %s" % btn_number)
            message = ini_read(APP_INI_FILE, "Button_%02d" % btn_number, "message", "")
            if message == "":
                return

            if self.avr_mode.get() == 0:
                self.serial_write("TX:%s" % message.replace(" ", ""))
            else:
                self.serial_write_hex_message(message)

    def tgCustomCmd_click(self):
        debug_print("AVR_IBus_Settings.tgCustomCmd_click")

    def rdAVR_click(self):
        if self.rdAVR["state"] == "disabled":
            return
        debug_print("AVR_IBus_Settings.rdAVR_click")

    def rdIBus_click(self):
        if self.rdIBus["state"] == "disabled":
            return
        debug_print("AVR_IBus_Settings.rdIBus_click")

    def scale3_change(self, *args):
        debug_print("AVR_IBus_Settings.scale3_change")

    def spnBFDTime_click(self):
        debug_print("AVR_IBus_Settings.spnBFDTime_click")

    def tgPdcScr_click(self):
        debug_print("AVR_IBus_Settings.tgPdcScr_click")

    def tgPdcScrFrontBack_click(self):
        debug_print("AVR_IBus_Settings.tgPdcScrFrontBack_click")
        if self.tgPdcScrFrontBack_value.get():
            self.tgPdcScrBack_value.set(0)

    def tgPdcScrBack_click(self):
        debug_print("AVR_IBus_Settings.tgPdcScrBack_click")
        if self.tgPdcScrBack_value.get():
            self.tgPdcScrFrontBack_value.set(0)

    def btnPdcScr_click(self):
        debug_print("AVR_IBus_Settings.btnPdcScr_click")
        value = 0
        if self.tgPdcScr_value.get():
            if self.tgPdcScrFrontBack_value.get():
                value = 1
            elif self.tgPdcScrBack_value.get():
                value = 2

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:PDCSCR:%s" % value)
        else:
            self.txtSend_set("FB LL FA 09 25 %02X CK" % value)
    
    

    def spnBlink_click(self):
        debug_print("AVR_IBus_Settings.spnBlink_click")

    def spnFogTurnSpeed_click(self):
        debug_print("AVR_IBus_Settings.spnFogTurnSpeed_click")

    def spnFogTurnTime_click(self):
        debug_print("AVR_IBus_Settings.spnFogTurnTime_click")

    def spnLevLightTime_click(self):
        debug_print("AVR_IBus_Settings.spnLevLightTime_click")

    def spnNtwkMode_click(self):
        debug_print("AVR_IBus_Settings.spnNtwkMode_click")
        if self.spnNtwkMode.get() == "0":
            self.lblNtwkMode.configure(text="""ZKE""")
        elif self.spnNtwkMode.get() == "1":
            self.lblNtwkMode.configure(text="""GM/0""")
        elif self.spnNtwkMode.get() == "2":
            self.lblNtwkMode.configure(text="""GM/1""")
        elif self.spnNtwkMode.get() == "3":
            self.lblNtwkMode.configure(text="""GM/2""")

    def spnRCamTime_click(self):
        debug_print("AVR_IBus_Settings.spnRCamTime_click")

    def spnRxTxTime_click(self):
        debug_print("AVR_IBus_Settings.spnRxTxTime_click")

    def spnSenVal_click(self):
        debug_print("AVR_IBus_Settings.spnSenVal_click")

    def spnTimeOff_click(self):
        debug_print("AVR_IBus_Settings.spnTimeOff_click")

    def spnWelLightTime_click(self):
        debug_print("AVR_IBus_Settings.spnWelLightTime_click")

    def tgAutScroll_click(self):
        debug_print("AVR_IBus_Settings.tgAutScroll_click")
        if self.tgAutScroll_value.get():
            self.lbLog_scroll_down()

    def tgBFD_click(self):
        debug_print("AVR_IBus_Settings.tgBFD_click")

    def tgBlink_click(self):
        debug_print("AVR_IBus_Settings.tgBlink_click")

    def tgCVMFold_click(self):
        debug_print("AVR_IBus_Settings.tgCVMFold_click")

    def tgCdcEmu_click(self):
        debug_print("AVR_IBus_Settings.tgCdcEmu_click")

    def tgDrlFogFront_click(self):
        debug_print("AVR_IBus_Settings.tgDrlFogFront_click")

    def tgDrlParkFront_click(self):
        debug_print("AVR_IBus_Settings.tgDrlParkFront_click")

    def tgDrlParkTail_click(self):
        debug_print("AVR_IBus_Settings.tgDrlParkTail_click")

    def tgDrl_click(self):
        debug_print("AVR_IBus_Settings.tgDrl_click")

    def tgF2PFogFront_click(self):
        debug_print("AVR_IBus_Settings.tgF2PFogFront_click")
        if self.tgF2PFogFront_value.get():
            self.tgF2PSeq_value.set(False)

    def tgF2PLow_click(self):
        debug_print("AVR_IBus_Settings.tgF2PLow_click")
        if self.tgF2PLow_value.get():
            self.tgF2PSeq_value.set(False)

    def tgF2PSeq_click(self):
        debug_print("AVR_IBus_Settings.tgF2PSeq_click")
        if self.tgF2PSeq_value.get():
            self.tgF2PLow_value.set(False)
            self.tgF2PFogFront_value.set(False)

    def tgF2P_click(self):
        debug_print("AVR_IBus_Settings.tgF2P_click")

    def tgFogTurn_click(self):
        debug_print("AVR_IBus_Settings.tgFogTurn_click")

    def tgHeatFFB_click(self):
        debug_print("AVR_IBus_Settings.tgHeatFFB_click")

    def tgLevLight_click(self):
        debug_print("AVR_IBus_Settings.tgLevLight_click")

    def tgLightSeq_click(self):
        debug_print("AVR_IBus_Settings.tgLightSeq_click")

    def tgLightSeqWel_click(self):
        debug_print("AVR_IBus_Settings.tgLightSeqWel_click")

    def tgLightSeqLev_click(self):
        debug_print("AVR_IBus_Settings.tgLightSeqLev_click")

    def btnLightSeqImport_click(self):
        debug_print("AVR_IBus_Settings.tgLightSeqImport_click")
        import xml.etree.ElementTree as ET
        light_mask = {
            # reverse_left	reverse_right	park_back_left_inside	park_back_right_inside	park_back_left	park_back_right	park_front_left	park_front_right
            # fog_back_left	fog_back_right	fog_front_left	fog_front_right	high_beam_left	high_beam_right	low_beam_left	low_beam_right
            # ambient licence_plate	turn_back_left	turn_back_right	turn_side_left	turn_side_right	turn_front_left	turn_front_right
            # -----2	-----3	-----4	-----5	-----6	brake_left	brake_mid	brake_right
            u"Rückfahrlicht_links":      0b10000000000000000000000000000000,
            u"Rückfahrlicht_rechts":     0b01000000000000000000000000000000,

            "Standlicht_hinten_links":  0b00001000000000000000000000000000,
            "Standlicht_hinten_rechts": 0b00000100000000000000000000000000,
            "Standlicht_vorn_links":    0b00000010000000000000000000000000,
            "Standlicht_vorn_rechts":   0b00000001000000000000000000000000,

            "Nebelschlussleuchte_links":  0b00000000100000000000000000000000,
            "Nebelschlussleuchte_rechts": 0b00000000010000000000000000000000,
            "Nebelscheinwerfer_links":    0b00000000001000000000000000000000,
            "Nebelscheinwerfer_rechts":   0b00000000000100000000000000000000,

            "Fernlicht_links" :    0b00000000000010000000000000000000,
            "Fernlicht_rechts":    0b00000000000001000000000000000000,
            "Abblendlicht_links":  0b00000000000000100000000000000000,
            "Abblendlicht_rechts": 0b00000000000000010000000000000000,

            "Ambientelicht": 0b00000000000000001000000000000000,
            "Kennzeichenlicht": 0b00000000000000000100000000000000,
            "Blinker_hinten_links": 0b00000000000000000010000000000000,
            "Blinker_hinten_rechts": 0b00000000000000000001000000000000,
            "Blinker_vorn_links": 0b00000000000000000000001000000000,
            "Blinker_vorn_rechts": 0b00000000000000000000000100000000,

            "Bremslicht_links": 0b00000000000000000000000000000100,
            "Bremslicht_rechts": 0b00000000000000000000000000000010,
            "Dritte_Bremsleuchte": 0b00000000000000000000000000000001,

        }

        file_name = filedialog.askopenfilename(title="I-Bus App Lightsequenz load", filetypes = (("I-Bus App Lightsequenz","*.xml"),))
        if file_name == "":
            return

        event = ["WEL", "LEV", "FOL", "F2P"]
        event_index = self.ask("Please Choose Event:", ("Welcome", "Leaving", "Follow", "F2P", "Cancel"))
        if event_index == 4:
            return

        debug_print("%s|%s" % (file_name, event[event_index]))

        lightlist = ET.parse("{FILE}".format(FILE=file_name)).getroot()

        output = ""
        for sequenz in lightlist.iterfind("sequenz"):

            try:
                seq_pos = int(sequenz.get("position")) + 1
            except TypeError:
                seq_pos = int(sequenz.get("Position")) + 1



            if sequenz.find("lights") is not None:
                lights_string = "lights"
            if sequenz.find("Lights") is not None:
                lights_string = "Lights"

            light_num = 0
            for lights in sequenz.iterfind(lights_string):

                for line in lights.text.split("\n"):
                    #print(line)
                    if line.strip() != "":
                        try:
                            light_num |= light_mask[line.strip()]
                        except KeyError:
                            pass

            seq_time = 0
            if sequenz.find("timer") is not None:
                timer_string = "timer"
            if sequenz.find("Timer") is not None:
                timer_string = "Timer"

            for timer in sequenz.iterfind(timer_string):
                seq_time = int(timer.text.strip()) / 100
                seq_time = int(seq_time)



            if self.avr_mode.get() == 0:
                output = output + "SET:{EVENT}:SEQ:{POSITION}:{LIGHTS}:{TIME}\n".format(EVENT=event[event_index], POSITION=seq_pos, LIGHTS=light_num, TIME=int(seq_time))
            else:
                output = output + "FB LL FA 19 %02X %02X %s %s CK\n" % (event_index + 1, seq_pos, " ".join(a+b for a,b in zip(("%08X" % light_num)[::2], ("%08X" % light_num)[1::2])), " ".join(a+b for a,b in zip(("%04X" % seq_time)[::2], ("%04X" % seq_time)[1::2])))

        debug_print(output)
        self.txtSend_set(output.strip())

    def btnLightSeq_click(self):
        debug_print("AVR_IBus_Settings.btnLightSeq_click")
        value = 0
        if self.tgLightSeq_value.get():
            value = set_bit(value, 0, self.tgLightSeq_value.get())
            value = set_bit(value, 1, self.tgLightSeqWel_value.get())
            value = set_bit(value, 2, self.tgLightSeqLev_value.get())

        if self.avr_mode.get() == 0:
            self.txtSend_set("SET:LIGHT:SEQ:%s" % value)
        else:
            self.txtSend_set("FB LL FA 09 0C %02X CK" % value)

    def tgLightBeamHigh_click(self):
        debug_print("AVR_IBus_Settings.tgLightBeamHigh_click")

    def tgLightBeamLow_click(self):
        debug_print("AVR_IBus_Settings.tgLightBeamLow_click")

    def tgLightOtherAmbient_click(self):
        debug_print("AVR_IBus_Settings.tgLightOtherAmbient_click")

    def tgLightOtherBrake_click(self):
        debug_print("AVR_IBus_Settings.tgLightOtherBrake_click")

    def tgLightOtherFogBack_click(self):
        debug_print("AVR_IBus_Settings.tgLightOtherFogBack_click")

    def tgLightOtherFogFront_click(self):
        debug_print("AVR_IBus_Settings.tgLightOtherFogFront_click")

    def tgLightOtherLicence_click(self):
        debug_print("AVR_IBus_Settings.tgLightOtherLicence_click")

    def tgLightOtherReverse_click(self):
        debug_print("AVR_IBus_Settings.tgLightOtherReverse_click")

    def tgLightParkBackInside_click(self):
        debug_print("AVR_IBus_Settings.tgLightParkBackInside_click")

    def tgLightParkBack_click(self):
        debug_print("AVR_IBus_Settings.tgLightParkBack_click")

    def tgLightParkFront_click(self):
        debug_print("AVR_IBus_Settings.tgLightParkFront_click")

    def tgLightTurnBack_click(self):
        debug_print("AVR_IBus_Settings.tgLightTurnBack_click")

    def tgLightTurnFront_click(self):
        debug_print("AVR_IBus_Settings.tgLightTurnFront_click")

    def tgLightTurnSide_click(self):
        debug_print("AVR_IBus_Settings.tgLightTurnSide_click")

    def tgLockSpeed_click(self):
        debug_print("AVR_IBus_Settings.tgLockSpeed_click")

    def tgLogTime_click(self):
        debug_print("AVR_IBus_Settings.tgLogTime_click")

    def tgLogSend_click(self):
        debug_print("AVR_IBus_Settings.tgLogTime_click")

    def tgLog_click(self):
        debug_print("AVR_IBus_Settings.tgLog_click")
        if self.tgLog_value.get():
            self._log_enable()
        else:
            self._log_disable()

    def tgNavZoom_click(self):
        debug_print("AVR_IBus_Settings.tgNavZoom_click")

    def tgObcDispCoolant_click(self):
        debug_print("AVR_IBus_Settings.tgObcDispCoolant_click")
        if self.tgObcDispCoolant_value.get():
            # self.tgObcDispCoolant_value.set(False)
            self.tgObcDispSpeed_value.set(False)
            self.tgObcDispOil_value.set(False)
            self.tgObcDispVolt_value.set(False)
            self.tgObcDispFive_value.set(False)
            self.tgObcDispSix_value.set(False)
            self.tgObcDispSeven_value.set(False)
            self.tgObcDispEight_value.set(False)

    def tgObcDispEight_click(self):
        debug_print("AVR_IBus_Settings.tgObcDispEight_click")
        if self.tgObcDispEight_value.get():
            self.tgObcDispCoolant_value.set(False)
            self.tgObcDispSpeed_value.set(False)
            self.tgObcDispOil_value.set(False)
            self.tgObcDispVolt_value.set(False)
            self.tgObcDispFive_value.set(False)
            self.tgObcDispSix_value.set(False)
            self.tgObcDispSeven_value.set(False)
            # self.tgObcDispEight_value.set(False)

    def tgObcDispFive_click(self):
        debug_print("AVR_IBus_Settings.tgObcDispFive_click")
        if self.tgObcDispFive_value.get():
            self.tgObcDispCoolant_value.set(False)
            self.tgObcDispSpeed_value.set(False)
            self.tgObcDispOil_value.set(False)
            self.tgObcDispVolt_value.set(False)
            # self.tgObcDispFive_value.set(False)
            self.tgObcDispSix_value.set(False)
            self.tgObcDispSeven_value.set(False)
            self.tgObcDispEight_value.set(False)

    def tgObcDispOil_click(self):
        debug_print("AVR_IBus_Settings.tgObcDispOil_click")
        if self.tgObcDispOil_value.get():
            self.tgObcDispCoolant_value.set(False)
            self.tgObcDispSpeed_value.set(False)
            # self.tgObcDispOil_value.set(False)
            self.tgObcDispVolt_value.set(False)
            self.tgObcDispFive_value.set(False)
            self.tgObcDispSix_value.set(False)
            self.tgObcDispSeven_value.set(False)
            self.tgObcDispEight_value.set(False)

    def tgObcDispSeven_click(self):
        debug_print("AVR_IBus_Settings.tgObcDispSeven_click")
        if self.tgObcDispSeven_value.get():
            self.tgObcDispCoolant_value.set(False)
            self.tgObcDispSpeed_value.set(False)
            self.tgObcDispOil_value.set(False)
            self.tgObcDispVolt_value.set(False)
            self.tgObcDispFive_value.set(False)
            self.tgObcDispSix_value.set(False)
            # self.tgObcDispSeven_value.set(False)
            self.tgObcDispEight_value.set(False)

    def tgObcDispSix_click(self):
        debug_print("AVR_IBus_Settings.tgObcDispSix_click")
        if self.tgObcDispSix_value.get():
            self.tgObcDispCoolant_value.set(False)
            self.tgObcDispSpeed_value.set(False)
            self.tgObcDispOil_value.set(False)
            self.tgObcDispVolt_value.set(False)
            self.tgObcDispFive_value.set(False)
            # self.tgObcDispSix_value.set(False)
            self.tgObcDispSeven_value.set(False)
            self.tgObcDispEight_value.set(False)

    def tgObcDispSpeed_click(self):
        debug_print("AVR_IBus_Settings.tgObcDispSpeed_click")
        if self.tgObcDispSpeed_value.get():
            self.tgObcDispCoolant_value.set(False)
            # self.tgObcDispSpeed_value.set(False)
            self.tgObcDispOil_value.set(False)
            self.tgObcDispVolt_value.set(False)
            self.tgObcDispFive_value.set(False)
            self.tgObcDispSix_value.set(False)
            self.tgObcDispSeven_value.set(False)
            self.tgObcDispEight_value.set(False)

    def tgObcDispVolt_click(self):
        debug_print("AVR_IBus_Settings.tgObcDispVolt_click")
        if self.tgObcDispVolt_value.get():
            self.tgObcDispCoolant_value.set(False)
            self.tgObcDispSpeed_value.set(False)
            self.tgObcDispOil_value.set(False)
            # self.tgObcDispVolt_value.set(False)
            self.tgObcDispFive_value.set(False)
            self.tgObcDispSix_value.set(False)
            self.tgObcDispSeven_value.set(False)
            self.tgObcDispEight_value.set(False)

    def tgObcDisp_click(self):
        debug_print("AVR_IBus_Settings.tgObcDisp_click")

    def tgRCam_click(self):
        debug_print("AVR_IBus_Settings.tgRCam_click")

    def tgRelock_click(self):
        debug_print("AVR_IBus_Settings.tgRelock_click")

    def tgRxTx_click(self):
        debug_print("AVR_IBus_Settings.tgRxTx_click")

    def tgRxTxRx_click(self):
        debug_print("AVR_IBus_Settings.tgRxTxRx_click")

    def tgRxTxTx_click(self):
        debug_print("AVR_IBus_Settings.tgRxTxTx_click")

    def tgSenVal_click(self):
        debug_print("AVR_IBus_Settings.tgSenVal_click")

    def tgUnlockBrake_click(self):
        debug_print("AVR_IBus_Settings.tgUnlockBrake_click")

    def tgUnlockDoor_click(self):
        debug_print("AVR_IBus_Settings.tgUnlockDoor_click")

    def tgUnlockGearP_click(self):
        debug_print("AVR_IBus_Settings.tgUnlockGearP_click")

    def tgUnlockIgn1_click(self):
        debug_print("AVR_IBus_Settings.tgUnlockIgn1_click")

    def tgUpload_click(self):
        debug_print("AVR_IBus_Settings.tgUpload_click")

    def _tgWelLightCancel_set(self):
        if self.tgWelLightCancelIgn1_value.get() or self.tgWelLightCancelDoor_value.get() or self.tgWelLightCancelKeyIn_value.get():
            self.tgWelLightCancelIgn3_value.set(False)
        else:
            self.tgWelLightCancelIgn3_value.set(True)

    def tgWelLightCancelDoor_click(self):
        debug_print("AVR_IBus_Settings.tgWelLightCancelDoor_click")
        self._tgWelLightCancel_set()

    def tgWelLightCancelIgn1_click(self):
        debug_print("AVR_IBus_Settings.tgWelLightCancelIgn1_click")
        self._tgWelLightCancel_set()

    def tgWelLightCancelIgn3_click(self):
        debug_print("AVR_IBus_Settings.tgWelLightCancelIgn3_click")

    def tgWelLightCancelKeyIn_click(self):
        debug_print("AVR_IBus_Settings.tgWelLightCancelKeyIn_click")
        self._tgWelLightCancel_set()

    def tgWelLight_click(self):
        debug_print("AVR_IBus_Settings.tgWelLight_click")

    def tgWelMsg_click(self):
        debug_print("AVR_IBus_Settings.tgWelMsg_click")

    def spnBFDTime_change(self, *args):
        debug_print("AVR_IBus_Settings.spnBFDTime_change")
        #for arg in args:
        #    print ("another arg:", arg)
        #return True

    def txtWelMsg_change(self, *args):
        debug_print("AVR_IBus_Settings.txtWelMsg_change")
        #for arg in args:
        #    debug_print("another arg: %s" % arg)
        self.txtWelMsg_value.set(self.txtWelMsg_value.get()[:20])
        self.lblWelMsgLen_value.set("(%s)" % len(self.txtWelMsg_value.get()))
        #return True

    def txtHexSelected_change(self, *args):
        debug_print("AVR_IBus_Settings.txtHexSelected_change")
        for arg in args:
            debug_print("another arg:", arg)

        return True

    def rdLayoutDefault_click(self):
        self._window_layout_refresh()

    def rdLayoutTerminal_click(self):
        self._window_layout_refresh()

    def rdLayoutSend_click(self):
        self._window_layout_refresh()

    def load_app_settings(self):
        if ini_read(APP_INI_FILE, "APP", "modeavr", True):
            self.avr_mode.set(0)
        else:
            self.avr_mode.set(1)

        self.tgUpload_value.set(ini_read(APP_INI_FILE, "APP", "toSerial", False))

        self.tgLog_value.set(ini_read(APP_INI_FILE, "APP", "logging", False))
        self.tgLogTime_value.set(ini_read(APP_INI_FILE, "APP", "logtime", False))
        self.tgLogSend_value.set(ini_read(APP_INI_FILE, "APP", "logsend", False))
        self.tgAutScroll_value.set(ini_read(APP_INI_FILE, "APP", "autoscroll", False))
        self.rdLayout_value.set(ini_read(APP_INI_FILE, "APP", "layout", 0))

    def save_app_settings(self):
        ini_write(APP_INI_FILE, "APP", "modeavr", "true" if self.avr_mode.get() == 0 else "false")

        ini_write(APP_INI_FILE, "APP", "toSerial", "true" if self.tgUpload_value.get() else "false")

        ini_write(APP_INI_FILE, "APP", "logging", "true" if self.tgLog_value.get() else "false")

        ini_write(APP_INI_FILE, "APP", "logtime", "true" if self.tgLogTime_value.get() else "false")

        ini_write(APP_INI_FILE, "APP", "logsend", "true" if self.tgLogSend_value.get() else "false")

        ini_write(APP_INI_FILE, "APP", "autoscroll", "true" if self.tgAutScroll_value.get() else "false")

        ini_write(APP_INI_FILE, "APP", "layout", self.rdLayout_value.get())

    def configuration_set(self, setting, value):
        setting = int(setting)
        if setting == 1: # CDC EMU
            self.tgCdcEmu_value.set(int(value))
        elif setting == 2: # WEL_LIGHT
            value = int(value)
            if value > 0:
                self.tgWelLight_value.set(1)
                self.spnWelLightTime_value.set(value)
            else:
                self.tgWelLight_value.set(0)
        elif setting == 3: # WEL_LIGHT_OFF
            value = int(value)
            self.tgWelLightCancelKeyIn_value.set(get_bit(value, 0))
            self.tgWelLightCancelDoor_value.set(get_bit(value, 1))
            self.tgWelLightCancelIgn1_value.set(get_bit(value, 2))
            self._tgWelLightCancel_set()
        elif setting == 4: # LEV_LIGHT
            value = int(value)
            if value > 0:
                self.tgLevLight_value.set(1)
                self.spnLevLightTime_value.set(value)
            else:
                self.tgLevLight_value.set(0)
        elif setting == 5: # MIR_FOLD_1
            value = int(value)
            self.tgMirFoldInLev_value.set(get_bit(value, 0))
            self.tgMirFoldOutWel_value.set(get_bit(value, 1))

            self.tgMirFoldInIgn_value.set(get_bit(value, 2))
            self.tgMirFoldOutIgn_value.set(get_bit(value, 3))

            self.tgMirFoldInFFBDouble_value.set(get_bit(value, 4))
            self.tgMirFoldOutFFBDouble_value.set(get_bit(value, 5))

            self.tgMirFoldInFFBHold_value.set(get_bit(value, 6))
            self.tgMirFoldOutDoor_value.set(get_bit(value, 7))
        elif setting == 9: # MIR_FOLD_2
            value = int(value)
            self.tgMirFoldInKeyRemove_value.set(get_bit(value, 0))
            self.tgMirFoldOutKeyInsert_value.set(get_bit(value, 1))
            self.tgMirFoldOutEngineStart_value.set(get_bit(value, 2))

        elif setting == 6: # LIGHT_SEN_VAL
            value = int(value)
            if value < 255:
                self.tgSenVal_value.set(1)
                self.spnSenVal_value.set(value)
            else:
                self.tgSenVal_value.set(0)
        elif setting == 7: # FLASH2PASS
            value = int(value)
            if value > 0:
                self.tgF2P_value.set(1)
                if value != 4:
                    self.tgF2PLow_value.set(get_bit(value, 0))
                    self.tgF2PFogFront_value.set(get_bit(value, 1))
                    self.tgF2PSeq_value.set(0)
                else:
                    self.tgF2PLow_value.set(0)
                    self.tgF2PFogFront_value.set(0)
                    self.tgF2PSeq_value.set(1)
            else:
                self.tgLevLight_value.set(0)
        elif setting == 8: # LIGHT_PARK
            value = int(value)
            self.tgLightParkFront_value.set(get_bit(value, 0))
            self.tgLightParkBack_value.set(get_bit(value, 1))
            self.tgLightParkBackInside_value.set(get_bit(value, 2))
        elif setting == 10: # LIGHT_BEAM
            value = int(value)
            self.tgLightBeamLow_value.set(get_bit(value, 0))
            self.tgLightBeamHigh_value.set(get_bit(value, 1))
        elif setting == 11: # LIGHT_OTHER
            value = int(value)
            self.tgLightOtherFogFront_value.set(get_bit(value, 0))
            self.tgLightOtherLicence_value.set(get_bit(value, 1))
            self.tgLightOtherReverse_value.set(get_bit(value, 2))
            self.tgLightOtherBrake_value.set(get_bit(value, 3))
            self.tgLightOtherAmbient_value.set(get_bit(value, 4))
            self.tgLightOtherFogBack_value.set(get_bit(value, 5))
        elif setting == 12: # LIGHT_SEQUENZ
            value = int(value)
            self.tgLightSeq_value.set(get_bit(value, 0))
            self.tgLightSeqWel_value.set(get_bit(value, 1))
            self.tgLightSeqLev_value.set(get_bit(value, 2))
            pass
        elif setting == 13: # LIGHT_TURN
            value = int(value)
            self.tgLightTurnFront_value.set(get_bit(value, 0))
            self.tgLightTurnBack_value.set(get_bit(value, 1))
            self.tgLightTurnSide_value.set(get_bit(value, 2))
        elif setting == 16: # WEL MSG
            self.tgWelMsg_value.set(int(value))
        elif setting == 17: # BLINK
            value = int(value)
            if value > 0:
                self.tgBlink_value.set(1)
                self.spnBlink_value.set(value)
            else:
                self.tgBlink_value.set(0)
        elif setting == 18: # LOCK SPEED
            value = int(value)
            if value > 0:
                self.tgLockSpeed_value.set(1)
                self.spnLockSpeed_value.set(value)
            else:
                self.tgLockSpeed_value.set(0)
        elif setting == 19: # FOG TURN SPEED / CORNER LIGHT
            value = int(value)
            if value > 0:
                self.tgFogTurn_value.set(1)
                self.spnFogTurnSpeed_value.set(value)
            else:
                self.tgFogTurn_value.set(0)
        elif setting == 20: # RXTX
            value = int(value)
            self.tgRxTxRx_value.set(get_bit(value, 0))
            self.tgRxTxTx_value.set(get_bit(value, 1))
        elif setting == 21: # FOG_TURN_TIMEOUT
            self.spnFogTurnTime_value.set(int(value))
        elif setting == 22: # DRL
            value = int(value)
            if value > 0:
                self.tgDrl_value.set(1)
                self.tgDrlParkFront_value.set(get_bit(value, 0))
                self.tgDrlFogFront_value.set(get_bit(value, 1))
                self.tgDrlParkTail_value.set(get_bit(value, 2))
            else:
                self.tgDrl_value.set(0)
        elif setting == 24: # NETWORK_MODE
            self.spnNtwkMode_value.set(int(value))
        elif setting == 25: # TIME_OFF
            self.spnTimeOff_value.set(int(value))
        elif setting == 26: # OBC_DISPLAY
            value = int(value)
            if value > 0:
                self.tgObcDisp_value.set(1)
                self.tgObcDispCoolant_value.set(1 if value == 1 else 0)
                self.tgObcDispSpeed_value.set(1 if value == 2 else 0)
                self.tgObcDispOil_value.set(1 if value == 3 else 0)
                self.tgObcDispVolt_value.set(1 if value == 4 else 0)
                self.tgObcDispFive_value.set(1 if value == 5 else 0)
                self.tgObcDispSix_value.set(1 if value == 6 else 0)
                self.tgObcDispSeven_value.set(1 if value == 7 else 0)
                self.tgObcDispEight_value.set(1 if value == 8 else 0)
            else:
                self.tgObcDisp_value.set(0)
        elif setting == 27: # HEAT FFB
            self.tgHeatFFB_value.set(int(value))
        elif setting == 28: # CVM FOLD
            self.tgCVMFold_value.set(int(value))
        elif setting == 30: # BFD_TIME
            value = int(value)
            if value > 0:
                self.tgBFD_value.set(1)
                self.spnBFDTime_value.set(value)
            else:
                self.tgBFD_value.set(0)
        elif setting == 31: # UNLOCK
            value = int(value)
            self.tgUnlockDoor_value.set(get_bit(value, 0))
            self.tgUnlockBrake_value.set(get_bit(value, 1))
            self.tgUnlockGearP_value.set(get_bit(value, 2))
            self.tgUnlockIgn1_value.set(get_bit(value, 3))
        elif setting == 32: # RCAM_SPEED
            value = int(value)
            if value > 0:
                self.tgRCam_value.set(1)
                self.spnRCamSpeed_value.set(value)
            else:
                self.tgRCam_value.set(0)
        elif setting == 33: # RCAM_TIMEOUT
            self.spnRCamTime_value.set(int(value))
        elif setting == 34: # TX_GAP
            self.spnRxTxTime_value.set(int(value))
        elif setting == 35: # ZV_RELOCK
            value = int(value)
            if value > 0:
                self.tgRelock_value.set(1)
                self.spnRelockTime_value.set(value)
            else:
                self.tgRelock_value.set(0)
        elif setting == 36: # NAV ZOOM
            self.tgNavZoom_value.set(int(value))
        elif setting == 37: # PDC_SCR
            value = int(value)
            if value > 0:
                self.tgPdcScr_value.set(1)
                self.tgPdcScrFrontBack_value.set(1 if value == 1 else 0)
                self.tgPdcScrBack_value.set(1 if value == 2 else 0)
            else:
                self.tgPdcScr_value.set(0)
        elif setting == 38: # REQUESTS
            value = int(value)
            self.tgReqsGmState_value.set(get_bit(value, 0))
            self.tgReqsLcmDim_value.set(get_bit(value, 1))
        elif setting == 40:
            self.txtWelMsg_value.set(value)


    def configuration_import(self):
        cfg_file = filedialog.askopenfilename(title="Select file", filetypes=(("Settings File", "*.cfg"), ("all files", "*.*")))
        if cfg_file == "":
            return

        self.tgCdcEmu_value.set(ini_read(cfg_file, "SETTINGS", "CDC_EMU", False))

        self.tgF2P_value.set(ini_read(cfg_file, "SETTINGS", "F2P_EN", False))
        self.tgF2PLow_value.set(ini_read(cfg_file, "SETTINGS", "F2P_LOW", False))
        self.tgF2PFogFront_value.set(ini_read(cfg_file, "SETTINGS", "F2P_FOG_FRONT", False))
        self.tgF2PSeq_value.set(ini_read(cfg_file, "SETTINGS", "F2P_SEQ", False))

        self.tgBlink_value.set(ini_read(cfg_file, "SETTINGS", "BLINK_EN", False))
        self.spnBlink_value.set(ini_read(cfg_file, "SETTINGS", "BLINK_VAL", "3"))

        self.tgFogTurn_value.set(ini_read(cfg_file, "SETTINGS", "FOG_TURN_EN", False))
        self.spnFogTurnSpeed_value.set(ini_read(cfg_file, "SETTINGS", "FOG_TURN_SPEED_VAL", "30"))
        self.spnFogTurnTime_value.set(ini_read(cfg_file, "SETTINGS", "FOG_TURN_TIME_VAL", "15"))

        self.tgDrl_value.set(ini_read(cfg_file, "SETTINGS", "DRL_EN", False))
        self.tgDrlParkFront_value.set(ini_read(cfg_file, "SETTINGS", "DRL_PARK_FRONT", False))
        self.tgDrlFogFront_value.set(ini_read(cfg_file, "SETTINGS", "DRL_FOG_FRONT", False))
        self.tgDrlParkTail_value.set(ini_read(cfg_file, "SETTINGS", "DRL_PARK_TAIL", False))

        self.tgObcDisp_value.set(ini_read(cfg_file, "SETTINGS", "OBC_EN", False))
        self.tgObcDispCoolant_value.set(ini_read(cfg_file, "SETTINGS", "OBC_COOLANT", False))
        self.tgObcDispSpeed_value.set(ini_read(cfg_file, "SETTINGS", "OBC_SPEED", False))
        self.tgObcDispOil_value.set(ini_read(cfg_file, "SETTINGS", "OBC_OIL", False))
        self.tgObcDispVolt_value.set(ini_read(cfg_file, "SETTINGS", "OBC_VOLT", False))

        self.tgHeatFFB_value.set(ini_read(cfg_file, "SETTINGS", "HEAT_FFB_EN", False))

        self.tgCVMFold_value.set(ini_read(cfg_file, "SETTINGS", "CVM_FOLD_EN", False))

        self.tgBFD_value.set(ini_read(cfg_file, "SETTINGS", "BFD_EN", False))
        self.spnBFDTime_value.set(ini_read(cfg_file, "SETTINGS", "BFD_VAL", "3"))

        self.tgRCam_value.set(ini_read(cfg_file, "SETTINGS", "RCAM_EN", False))
        self.spnRCamSpeed_value.set(ini_read(cfg_file, "SETTINGS", "RCAM_SPEED_VAL", "15"))
        self.spnRCamTime_value.set(ini_read(cfg_file, "SETTINGS", "RCAM_TIME_VAL", "10"))

        self.tgNavZoom_value.set(ini_read(cfg_file, "SETTINGS", "NAVZ_EN", False))

        self.tgRxTxRx_value.set(ini_read(cfg_file, "SETTINGS", "RXTX_RX", False))
        self.tgRxTxTx_value.set(ini_read(cfg_file, "SETTINGS", "RXTX_TX", False))
        #self.spnRxTxTime_value.set(ini_read(cfg_file, "SETTINGS", "RXTX_MS", "12"))

        self.spnNtwkMode_value.set(ini_read(cfg_file, "SETTINGS", "NTWM", "1"))

        self.spnTimeOff_value.set(ini_read(cfg_file, "SETTINGS", "TIME_OFF", "3"))

        self.tgReqsGmState_value.set(ini_read(cfg_file, "SETTINGS", "REQS_GMSTATE", False))
        self.tgReqsLcmDim_value.set(ini_read(cfg_file, "SETTINGS", "REQS_LCMDIM", False))

        self.tgWelMsg_value.set(ini_read(cfg_file, "SETTINGS", "WEL_MSG", False))
        self.txtWelMsg_value.set(ini_read(cfg_file, "SETTINGS", "WEL_MSG_T", "AVR~IBus"))

        self.tgWelLight_value.set(ini_read(cfg_file, "SETTINGS", "WEL_LIGHT_EN", False))
        self.spnWelLightTime_value.set(ini_read(cfg_file, "SETTINGS", "WEL_LIGHT_TIME", "45"))

        self.tgWelLightCancelKeyIn_value.set(ini_read(cfg_file, "SETTINGS", "WEL_LIGHT_CANCEL_KEYIN", False))
        self.tgWelLightCancelDoor_value.set(ini_read(cfg_file, "SETTINGS", "WEL_LIGHT_CANCEL_DOOR", False))
        self.tgWelLightCancelIgn1_value.set(ini_read(cfg_file, "SETTINGS", "WEL_LIGHT_CANCEL_IGN1", False))
        self.tgWelLightCancelIgn3_value.set(ini_read(cfg_file, "SETTINGS", "WEL_LIGHT_CANCEL_IGN3", False))
        self._tgWelLightCancel_set()

        self.tgLevLight_value.set(ini_read(cfg_file, "SETTINGS", "LEV_LIGHT_EN", False))
        self.spnLevLightTime_value.set(ini_read(cfg_file, "SETTINGS", "LEV_LIGHT_TIME", "15"))

        self.tgSenVal_value.set(ini_read(cfg_file, "SETTINGS", "LIGHT_SEN_EN", False))
        self.spnSenVal_value.set(ini_read(cfg_file, "SETTINGS", "LIGHT_SEN_VAL", "40"))

        self.tgLightBeamLow_value.set(ini_read(cfg_file, "SETTINGS", "LIGHT_BEAM_LOW", False))
        self.tgLightBeamHigh_value.set(ini_read(cfg_file, "SETTINGS", "LIGHT_BEAM_HIGH", False))

        self.tgLightTurnFront_value.set(ini_read(cfg_file, "SETTINGS", "LIGHT_TURN_FRONT", False))
        self.tgLightTurnBack_value.set(ini_read(cfg_file, "SETTINGS", "LIGHT_TURN_BACK", False))
        self.tgLightTurnSide_value.set(ini_read(cfg_file, "SETTINGS", "LIGHT_TURN_SIDE", False))

        self.tgLightOtherFogFront_value.set(ini_read(cfg_file, "SETTINGS", "LIGHT_OTHER_FOG_FRONT", False))
        self.tgLightOtherLicence_value.set(ini_read(cfg_file, "SETTINGS", "LIGHT_OTHER_LICENCE", False))
        self.tgLightOtherReverse_value.set(ini_read(cfg_file, "SETTINGS", "LIGHT_OTHER_REVERSE", False))
        self.tgLightOtherBrake_value.set(ini_read(cfg_file, "SETTINGS", "LIGHT_OTHER_BRAKE", False))
        self.tgLightOtherAmbient_value.set(ini_read(cfg_file, "SETTINGS", "LIGHT_OTHER_AMBIENT", False))
        self.tgLightOtherFogBack_value.set(ini_read(cfg_file, "SETTINGS", "LIGHT_OTHER_FOG_BACK", False))

        self.tgMirFoldInLev_value.set(ini_read(cfg_file, "SETTINGS", "MIR_FOLD_IN", False))
        self.tgMirFoldOutWel_value.set(ini_read(cfg_file, "SETTINGS", "MIR_FOLD_OUT", False))

        # MIR_FOLD_EXT
        self.tgMirFoldInIgn_value.set(ini_read(cfg_file, "SETTINGS", "MIR_FOLD_IN_IGN", False))                
        self.tgMirFoldOutIgn_value.set(ini_read(cfg_file, "SETTINGS", "MIR_FOLD_OUT_IGN", False))

        self.tgMirFoldInFFBDouble_value.set(ini_read(cfg_file, "SETTINGS", "MIR_FOLD_IN_FFB_DBL", False))
        self.tgMirFoldOutFFBDouble_value.set(ini_read(cfg_file, "SETTINGS", "MIR_FOLD_OUT_FFB_DBL", False))

        self.tgMirFoldInFFBHold_value.set(ini_read(cfg_file, "SETTINGS", "MIR_FOLD_IN_FFB_HOLD", False))
        self.tgMirFoldOutDoor_value.set(ini_read(cfg_file, "SETTINGS", "MIR_FOLD_OUT_DOOR", False))

        self.tgMirFoldInKeyRemove_value.set(ini_read(cfg_file, "SETTINGS", "MIR_FOLD_IN_KEY_REM", False))
        self.tgMirFoldOutKeyInsert_value.set(ini_read(cfg_file, "SETTINGS", "MIR_FOLD_OUT_KEY_INS", False))

        self.tgMirFoldOutEngineStart_value.set(ini_read(cfg_file, "SETTINGS", "MIR_FOLD_OUT_ENG_START", False))


        self.tgLockSpeed_value.set(ini_read(cfg_file, "SETTINGS", "LOCK_EN", False))
        self.spnLockSpeed_value.set(ini_read(cfg_file, "SETTINGS", "LOCK_SPEED", "6"))

        self.tgUnlockDoor_value.set(ini_read(cfg_file, "SETTINGS", "UNLOCK_DOOR", False))
        self.tgUnlockBrake_value.set(ini_read(cfg_file, "SETTINGS", "UNLOCK_BRAKE", False))
        self.tgUnlockGearP_value.set(ini_read(cfg_file, "SETTINGS", "UNLOCK_GEARP", False))
        self.tgUnlockIgn1_value.set(ini_read(cfg_file, "SETTINGS", "UNLOCK_IGN1", False))

        self.tgRelock_value.set(ini_read(cfg_file, "SETTINGS", "RELOCK_EN", False))
        self.spnRelockTime_value.set(ini_read(cfg_file, "SETTINGS", "RELOCK_TIME", "1"))

        self.tgPdcScr_value.set(ini_read(cfg_file, "SETTINGS", "PDCSCR", False))
        self.tgPdcScrFrontBack_value.set(ini_read(cfg_file, "SETTINGS", "PDCSCR_FRONT_BACK", False))
        self.tgPdcScrBack_value.set(ini_read(cfg_file, "SETTINGS", "PDCSCR_BACK", False))

        self.tgReqsGmState_value.set(ini_read(cfg_file, "SETTINGS", "REQS_GM_STATE", True))
        self.tgReqsLcmDim_value.set(ini_read(cfg_file, "SETTINGS", "REQS_LCM_DIM", True))


    def configuration_export(self):
        cfg_file = filedialog.asksaveasfilename(title="Select file", filetypes=(("Settings File", "*.cfg"), ("all files", "*.*")))
        if cfg_file == "":
            return

        if not cfg_file.endswith(".cfg"):
            cfg_file = cfg_file + ".cfg"
            
        ini_write(cfg_file, "SETTINGS", "CDC_EMU", "true" if self.tgCdcEmu_value.get() else "false")

        ini_write(cfg_file, "SETTINGS", "F2P_EN", "true" if self.tgF2P_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "F2P_LOW", "true" if self.tgF2PLow_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "F2P_FOG_FRONT", "true" if self.tgF2PFogFront_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "F2P_SEQ", "true" if self.tgF2PSeq_value.get() else "false")

        ini_write(cfg_file, "SETTINGS", "BLINK_EN", "true" if self.tgBlink_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "BLINK_VAL", self.spnBlink.get())

        ini_write(cfg_file, "SETTINGS", "FOG_TURN_EN", "true" if self.tgFogTurn_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "FOG_TURN_SPEED_VAL", self.spnFogTurnSpeed.get())
        ini_write(cfg_file, "SETTINGS", "FOG_TURN_TIME_VAL", self.spnFogTurnSpeed.get())

        ini_write(cfg_file, "SETTINGS", "DRL_EN", "true" if self.tgDrl_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "DRL_PARK_FRONT", "true" if self.tgDrlParkFront_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "DRL_FOG_FRONT", "true" if self.tgDrlFogFront_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "DRL_PARK_TAIL", "true" if self.tgDrlParkTail_value.get() else "false")

        ini_write(cfg_file, "SETTINGS", "OBC_EN", "true" if self.tgObcDisp_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "OBC_COOLANT", "true" if self.tgObcDispCoolant_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "OBC_SPEED", "true" if self.tgObcDispSpeed_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "OBC_OIL", "true" if self.tgObcDispOil_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "OBC_VOLT", "true" if self.tgObcDispVolt_value.get() else "false")

        ini_write(cfg_file, "SETTINGS", "HEAT_FFB_EN", "true" if self.tgHeatFFB_value.get() else "false")

        ini_write(cfg_file, "SETTINGS", "CVM_FOLD_EN", "true" if self.tgCVMFold_value.get() else "false")

        ini_write(cfg_file, "SETTINGS", "BFD_EN", "true" if self.tgBFD_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "BFD_VAL", self.spnBFDTime.get())

        ini_write(cfg_file, "SETTINGS", "RCAM_EN", "true" if self.tgRCam_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "RCAM_SPEED_VAL", self.spnRCamSpeed.get())
        ini_write(cfg_file, "SETTINGS", "RCAM_TIME_VAL", self.spnRCamTime.get())

        ini_write(cfg_file, "SETTINGS", "NAVZ_EN", "true" if self.tgNavZoom_value.get() else "false")

        ini_write(cfg_file, "SETTINGS", "RXTX_RX", "true" if self.tgRxTxRx_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "RXTX_TX", "true" if self.tgRxTxTx_value.get() else "false")
        #ini_write(cfg_file, "SETTINGS", "RXTX_MS", self.spnRxTxTime.get())

        ini_write(cfg_file, "SETTINGS", "NTWM", self.spnNtwkMode.get())

        ini_write(cfg_file, "SETTINGS", "TIME_OFF", self.spnTimeOff.get())

        ini_write(cfg_file, "SETTINGS", "REQS_GMSTATE", "true" if self.tgReqsGmState_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "REQS_LCMDIM", "true" if self.tgReqsLcmDim_value.get() else "false")

        ini_write(cfg_file, "SETTINGS", "WEL_MSG", "true" if self.tgWelMsg_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "WEL_MSG_T", self.txtWelMsg_value.get())

        ini_write(cfg_file, "SETTINGS", "WEL_LIGHT_EN", "true" if self.tgWelLight_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "WEL_LIGHT_TIME", self.spnWelLightTime.get())

        ini_write(cfg_file, "SETTINGS", "WEL_LIGHT_CANCEL_KEYIN", "true" if self.tgWelLightCancelKeyIn_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "WEL_LIGHT_CANCEL_DOOR", "true" if self.tgWelLightCancelDoor_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "WEL_LIGHT_CANCEL_IGN1", "true" if self.tgWelLightCancelIgn1_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "WEL_LIGHT_CANCEL_IGN3", "true" if self.tgWelLightCancelIgn3_value.get() else "false")

        ini_write(cfg_file, "SETTINGS", "LEV_LIGHT_EN", "true" if self.tgLevLight_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "LEV_LIGHT_TIME", self.spnLevLightTime.get())

        ini_write(cfg_file, "SETTINGS", "LIGHT_SEN_EN", "true" if self.tgSenVal_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "LIGHT_SEN_VAL", self.spnSenVal.get())

        ini_write(cfg_file, "SETTINGS", "LIGHT_BEAM_LOW", "true" if self.tgLightBeamLow_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "LIGHT_BEAM_HIGH", "true" if self.tgLightBeamHigh_value.get() else "false")

        ini_write(cfg_file, "SETTINGS", "LIGHT_TURN_FRONT", "true" if self.tgLightTurnFront_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "LIGHT_TURN_BACK", "true" if self.tgLightTurnBack_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "LIGHT_TURN_SIDE", "true" if self.tgLightTurnSide_value.get() else "false")

        ini_write(cfg_file, "SETTINGS", "LIGHT_OTHER_FOG_FRONT", "true" if self.tgLightOtherFogFront_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "LIGHT_OTHER_LICENCE", "true" if self.tgLightOtherLicence_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "LIGHT_OTHER_REVERSE", "true" if self.tgLightOtherReverse_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "LIGHT_OTHER_BRAKE", "true" if self.tgLightOtherBrake_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "LIGHT_OTHER_AMBIENT", "true" if self.tgLightOtherAmbient_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "LIGHT_OTHER_FOG_BACK", "true" if self.tgLightOtherFogBack_value.get() else "false")

        ini_write(cfg_file, "SETTINGS", "MIR_FOLD_IN", "true" if self.tgMirFoldInLev_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "MIR_FOLD_OUT", "true" if self.tgMirFoldOutWel_value.get() else "false")
        
        # MIR_FOLD_EXT
        ini_write(cfg_file, "SETTINGS", "MIR_FOLD_IN_IGN", "true" if self.tgMirFoldInIgn_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "MIR_FOLD_OUT_IGN", "true" if self.tgMirFoldOutIgn_value.get() else "false")

        ini_write(cfg_file, "SETTINGS", "MIR_FOLD_IN_FFB_DBL", "true" if self.tgMirFoldInFFBDouble_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "MIR_FOLD_OUT_FFB_DBL", "true" if self.tgMirFoldOutFFBDouble_value.get() else "false")
        
        ini_write(cfg_file, "SETTINGS", "MIR_FOLD_IN_FFB_HOLD", "true" if self.tgMirFoldInFFBHold_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "MIR_FOLD_OUT_DOOR", "true" if self.tgMirFoldOutDoor_value.get() else "false")

        ini_write(cfg_file, "SETTINGS", "MIR_FOLD_IN_KEY_REM", "true" if self.tgMirFoldInKeyRemove_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "MIR_FOLD_OUT_KEY_INS", "true" if self.tgMirFoldOutKeyInsert_value.get() else "false")
        
        ini_write(cfg_file, "SETTINGS", "MIR_FOLD_OUT_ENG_START", "true" if self.tgMirFoldOutEngineStart_value.get() else "false")
        
        
        
        ini_write(cfg_file, "SETTINGS", "LOCK_EN", "true" if self.tgLockSpeed_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "LOCK_SPEED", self.spnLockSpeed.get())

        ini_write(cfg_file, "SETTINGS", "UNLOCK_DOOR", "true" if self.tgUnlockDoor_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "UNLOCK_BRAKE", "true" if self.tgUnlockBrake_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "UNLOCK_GEARP", "true" if self.tgUnlockGearP_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "UNLOCK_IGN1", "true" if self.tgUnlockIgn1_value.get() else "false")

        ini_write(cfg_file, "SETTINGS", "RELOCK_EN", "true" if self.tgRelock_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "RELOCK_TIME", self.spnRelockTime.get())

        ini_write(cfg_file, "SETTINGS", "PDCSCR", "true" if self.tgPdcScr_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "PDCSCR_FRONT_BACK", "true" if self.tgPdcScrFrontBack_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "PDCSCR_BACK", "true" if self.tgPdcScrBack_value.get() else "false")

        ini_write(cfg_file, "SETTINGS", "REQS_GM_STATE", "true" if self.tgReqsGmState_value.get() else "false")
        ini_write(cfg_file, "SETTINGS", "REQS_LCM_DIM", "true" if self.tgReqsLcmDim_value.get() else "false")

    def btnMenuFileOpen_click(self):
        debug_print("AVR_IBus_Settings_btnMenuFileOpen_click")



    def btnMenuAbout_click(self):
        debug_print("AVR_IBus_Settings_btnMenuAbout_click")
        About(self)


    def btnMenuMapPicker_click(self):
        debug_print("AVR_IBus_Settings_btnMenuMapPicker_click")
        if PY2:
            return
        else:
            self.map_picker = MapPicker(self)
            result = self.map_picker.show()
            if result == None:
                return
            #messagebox.showerror(title="Firmware upload", message="Lat:%s \n\n Lon:%s" % (result[0], result[1]))
            if self.avr_mode.get() == 0:
                self.txtSend_set("SET:TIME:LAT:%s\nSET:TIME:LON:%s" % (result[0], result[1]))


    def progressBar_set(self, percent, text="", mode=0):
        if mode == 0:
            self.progressBar.configure(mode="determinate")
        else:
            self.progressBar.configure(mode="indeterminate")

        self.lblFirmwareStatus.configure(text="%s" % text)

        #percent = int(value * 100 / max_value * 100 / 100)

        # debug_print("val:%s,maxval:%s,per:%s" % (value, max_value, percent))

        # percent_val = percent_cur * 100 / percent_max * 100 / 100
        if percent < 1:
            self.lblProgressBar.configure(text="")
        else:
            self.lblProgressBar.configure(text="%s%%" % percent)

        try:
            if self.progressbar_percent_old != percent:
                self.progressBar_value.set(percent)
                # self.progressBar_maxvalue.set(max_value)
                # self.lblProgressBar.update()
                #if PY2:
                #    self.update()
                #else:
                #    self.update_idletasks()
        except:
            pass
        self.progressbar_percent_old = percent

        # try:
        #    self.progressBar.after_cancel(self.progressBar_after_cancel_id)
        # except AttributeError:
        #    debug_print("no ID")
        # self.progressBar_after_cancel_id = self.progressBar.after(200, self.progressBar.update_idletasks)

        # self.update_idletasks()

    def progressBar_reset(self):
        self.progressBar_set(0, "")

    def firmwareStatus_set(self, text):
        self.lblFirmwareStatus.configure(text="%s" % text)
        self.lblFirmwareStatus.update_idletasks()

    def firmware_importhex(self, data, buf):
        ih = intelhex.IntelHex()
        return ih.tobinarray()

    def firmware_ihex2b(self, data, buf):
        bufsize = len(buf)
        baseaddr = 0
        maxaddr = 0
        offsetaddr = 0
        nextaddr = 0

        for lineno, line in enumerate(data.splitlines()):
            if not line.startswith(str_to_bstr(":")):
                continue
            rec = self.firmware_ihex_readrec(line)
            if not rec:
                debug_print("Error reading hex file")
                return False
            if rec["rectype"] == 0:
                # data record
                nextaddr = rec["loadofs"] + baseaddr
                if (nextaddr + rec["reclen"]) > (bufsize + offsetaddr):
                    debug_print("ERROR: address 0x{:04x} out of range at line {}".format(
                        nextaddr + rec["reclen"], lineno + 1
                    ))
                    return -1
                for i in range(rec["reclen"]):
                    buf[nextaddr + i - offsetaddr] = rec["data"][i]
                if nextaddr + rec["reclen"] > maxaddr:
                    maxaddr = nextaddr + rec["reclen"]

            elif rec["rectype"] == 1:
                # end of file record
                return maxaddr - offsetaddr

            elif rec["rectype"] == 2:
                # extended sgment address record
                baseaddr = rec["data"][0] << 8 | rec["data"][1] << 4

            elif rec["rectype"] == 3:
                # start segment record
                pass

            elif rec["rectype"] == 4:
                # extended linear address record
                baseaddr = rec["data"][0] << 8 | rec["data"][1] << 16
                if nextaddr == 0:
                    offsetaddr = baseaddr
            elif rec["rectype"] == 5:
                # start linear address record
                pass

            else:
                raise Exception("Unknown rectype {}".format(ihex["rectype"]))

    def firmware_ihex_readrec(self, rec):
        ihex = {
            "reclen": None,
            "loadofs": None,
            "rectype": None,
            "data": bytearray(16),  # should be 256 as avrdude define
            "cksum": None
        }
        buf = bytearray(8)
        rlen = len(rec)
        offset = 1
        cksum = 0

        # reclen
        if offset + 2 > rlen:
            return
        ihex["reclen"] = int(rec[offset:offset + 2], 16)
        offset += 2

        # load offset
        if offset + 4 > rlen:
            return
        ihex["loadofs"] = int(rec[offset:offset + 4], 16)
        offset += 4

        # record type
        if offset + 2 > rlen:
            return
        ihex["rectype"] = int(rec[offset:offset + 2], 16)
        offset += 2

        # checksum
        cksum = (
                ihex["reclen"] +
                ((ihex["loadofs"] >> 8) & 0x0ff) +
                (ihex["loadofs"] & 0x0ff) +
                ihex["rectype"])

        # data
        for j in range(ihex["reclen"]):
            if offset + 2 > rlen:
                return
            ihex["data"][j] = c = int(rec[offset:offset + 2], 16)
            cksum += c
            offset += 2

        # validate checksum
        if offset + 2 > rlen:
            return
        ihex["cksum"] = int(rec[offset:offset + 2], 16)
        rc = -cksum & 0x000000ff
        if rc < 0:
            debug_print("checksum issue")
            return
        if rc != ihex["cksum"]:
            debug_print("checksum mismatch")
            return
        return ihex

    def firmware_load_addr(self, addr):
        debug_print("[STK500] Load address {:06x}".format(addr))
        addr = int(addr / 2)
        #
        debug_print("\naddr %s" % addr)
        self.serial.flushInput()
        self.serial.flushOutput()

        pkt = struct.pack(
            "BBBB",
            STK_LOAD_ADDRESS,
            addr & 0xff,
            (addr >> 8) & 0xff,
            Sync_CRC_EOP)

        if PY2:
            debug_print("pkt %02X%02X%02X%02X" % (ord(pkt[0]), ord(pkt[1]), ord(pkt[2]), ord(pkt[3])))
        else:
            debug_print("pkt %2X%2X%2X%2X" % (pkt[0], pkt[1], pkt[2], pkt[3]))
        self.firmware_write(pkt)

        #self.serial.flush()
        
        if DEBUG:
            if PY2:
                print(ord(pkt[0]))
                print(ord(pkt[1]))
                print(ord(pkt[2]))
                print(ord(pkt[3]))
            else:
                print(pkt[0])
                print(pkt[1])
                print(pkt[2])
                print(pkt[3])
            new_byte1 = self.firmware_readbyte()
            new_byte2 = self.firmware_readbyte()
            print("Byte1:0x{:02x}".format(new_byte1))
            print("Byte2:0x{:02x}".format(new_byte2))
            if new_byte1 != Resp_STK_INSYNC:
                raise Exception("load_addr() can't get into sync")
            if new_byte2 != Resp_STK_OK:
                raise Exception("load_addr() protocol error")
        else:
            if self.firmware_readbyte() != Resp_STK_INSYNC:
                raise Exception("load_addr() can't get into sync")
            if self.firmware_readbyte() != Resp_STK_OK:
                raise Exception("load_addr() protocol error")

    def firmware_prog_page(self, memtype, data, verify=False):
        debug_print("[STK500] Prog page")
        assert (memtype == "flash")
        block_size = len(data)
        pkt = struct.pack(
            "BBBB",
            STK_PROG_PAGE,
            (block_size >> 8) & 0xff,
            block_size & 0xff,
            ord("F"),  # because flash, othersize E for eeprom
        )
        pkt += data
        pkt += struct.pack("B", Sync_CRC_EOP)
        self.firmware_write(pkt)
        if self.firmware_readbyte() != Resp_STK_INSYNC:
            raise Exception("prog_page() can't get into sync")
        if self.firmware_readbyte() != Resp_STK_OK:
            raise Exception("prog_page() protocol error")

        if not verify:
            return

        temp_data = data
        if PY2:
            temp_data[0] = " "
        else:
            temp_data[0] = 0x20
        self.firmware_read_page(memtype, temp_data)
        debug_print("SENT:{}".format("".join(["{:02X}".format(x) for x in data])))
        debug_print("READ:{}".format("".join(["{:02X}".format(x) for x in temp_data])))

        if data != temp_data:
            raise Exception("Mismatch read and written Bytes of progpage")

    def firmware_read_page(self, memtype, data):
        debug_print("[STK500] Read page")
        assert (memtype == "flash")
        block_size = len(data)
        pkt = struct.pack(
            "BBBBB",
            STK_READ_PAGE,
            (block_size >> 8) & 0xff,
            block_size & 0xff,
            ord("F"),  # because flash, othersize E for eeprom
            Sync_CRC_EOP
        )
        self.firmware_write(pkt)
        if self.firmware_readbyte() != Resp_STK_INSYNC:
            raise Exception("read_page() can't get into sync")
        data[:] = self.firmware_read(block_size)
        if self.firmware_readbyte() != Resp_STK_OK:
            raise Exception("read_page() protocol error")

    def firmware_readbyte(self):
        # output = struct.unpack("B", self.firmware_read(1))[0]
        # print(output)
        # return output
        return struct.unpack("B", self.firmware_read(1))[0]

    def firmware_read(self, size):
        read = 0
        buf = bytearray(b"\x00" * size)
        while read < size:
            # self.serial = Serial()
            try:
                ret = self.serial.read(size - read)
            except serial.SerialTimeoutException:
                raise Exception("no data read, timeout")
            debug_print("firmware_read: {!r} ({})".format(ret, size - read))
            if ret == b"":
                debug_print("no data read, timeout?")
                raise Exception("no data read, timeout?")
            buf[read:read + len(ret)] = ret
            read += len(ret)
        return bytes(buf[:read])

    def firmware_write(self, pkt):
        # debug_print("[STK500] Packet {}".format(" ".join(["{:02x}".format(x) for x in pkt])))
        self.serial.write(pkt)

    def firmware_read_sign(self):
        sign_int = 0
        debug_print("[STK500] Read signature")
        self.firmware_write(struct.pack("BB", STK_READ_SIGN, Sync_CRC_EOP))
        if self.firmware_readbyte() != Resp_STK_INSYNC:
            raise Exception("read_sign() can't get into sync")
        sign = struct.unpack("BBB", self.firmware_read(3))
        if self.firmware_readbyte() != Resp_STK_OK:
            raise Exception("read_sign() protocol error")

        for byte in sign:
            debug_print("%02x" % byte)
            sign_int = sign_int << 8
            sign_int += byte

            debug_print("%02x" % sign_int)
        self.firmware_signature = sign_int
        return sign_int

    def firmware_get_sync(self):
        if self.serial is None:
            return

        self.firmware_mode_on()

        debug_print("[STK500] Get sync")

        self.serial.setDTR(False)
        self.serial.setDTR(True)

        pkt = struct.pack("BB", STK_GET_SYNC, Sync_CRC_EOP) # 0x30 0x20

        for i in range(5):

            # self.serial = Serial()
            while self.serial.in_waiting:
                self.serial.read(1)
                sleep(0.001)

            """
            if PY2:
                while self.serial.read(1) != "":
                    pass
            else:
                while self.serial.read(1) != ord(""):
                    pass
            """

            self.serial.flushInput()
            self.serial.flushOutput()
            debug_print("[%s]" % pkt)

            self.firmware_write(pkt)
            #self.serial.write(b"0 ")
            #debug_print("out:%s" % self.serial.out_waiting)
            self.serial.flush()
            try:
                if self.firmware_readbyte() != Resp_STK_INSYNC:
                    raise Exception("read_page() can't get into sync")
                if self.firmware_readbyte() != Resp_STK_OK:
                    raise Exception("read_page() protocol error")

                self.firmwareStatus_set("Connected to bootloader")
                return
            except:
                pass
            sleep(.1)
        raise Exception("STK500: cannot get sync")

    def firmware_get_signature(self):
        try:
            self.lblAvrTyp_value.set("REQ")
            self.firmware_get_sync()
            self.firmware_read_sign()
            debug_print("Signature: 0x%02x" % self.firmware_signature)
            if self.firmware_signature == MEM_PARTS_328P["signature"]["value"]:
                self.firmware_mem_part = MEM_PARTS_328P
                self.lblAvrTyp_value.set("V1.x")
            elif self.firmware_signature == MEM_PARTS_328PB["signature"]["value"]:
                self.firmware_mem_part = MEM_PARTS_328PB
                self.lblAvrTyp_value.set("V1.x")
            elif self.firmware_signature == MEM_PARTS_2560["signature"]["value"]:
                self.firmware_mem_part = MEM_PARTS_2560
                self.lblAvrTyp_value.set("V2.x")
            else:
                raise Exception("unknown Signature [%02x]" % self.firmware_signature)
        except Exception:
            self.firmware_mem_part = MEM_PARTS_UNKNOWN
            self.lblAvrTyp_value.set("Unknown")
            # print("Unknown Signature [%02x]" % self.signature)
        self.firmware_mode_off()
        debug_print("AVR-IBus Version: %s" % self.firmware_mem_part["signature"]["avr-ibus"])

    def firmware_upload(self):
        self.event_queue.put((self.progressBar_reset))

        self.event_queue.put((self.progressBar_set, (0, "Upload starting...", 0)))

        #try:
        if self.firmware_file == "":

            self.event_queue.put((self.progressBar_set, (0, "No Hex-File selected", 0)))
            return

        with open(self.firmware_file, "rb") as fd:
            data = fd.read()

        # check it"s an hex file
        assert (len(data) >= 11)

        if PY2:
            assert (data[0] == ":")
        else:
            assert (data[0] == ord(":"))

        if not "#%s" % self.firmware_mem_part["signature"]["avr-ibus"] in bstr_to_ustr(data):
            self.event_queue.put((self.progressBar_set, (0, "wrong file selected", 0)))
            return

        with open(self.firmware_file, "rb") as hex_file:
            hex_file_temp = hex_file.read().decode("unicode_escape")
            for line in hex_file_temp.split("\n"):
                if "#build:" in line:
                    self.lblHexBuild_value.set(line[8:].strip())
            if "#IBUS-IF" in hex_file_temp:
                self.avr_mode_selected = True
            else:
                self.avr_mode_selected = False

        memtype = "flash"
        mem = self.firmware_mem_part[memtype]
        assert (mem["paged"] == True)
        assert (mem["pagesize"] != 0)

        # convert hex to binary stored in memory
        #buf = bytearray(mem["size"])
        #prog_size = self.firmware_ihex2b(data, buf)

        buf = bytearray(intelhex.IntelHex(self.firmware_file).tobinstr())
        prog_size = len(buf)

        """# print prog_size
        # print buf
        # print ("BUF:{}".format("".join(["{:02x}".format(x) for x in buf])).upper())
        # flash the device
        """
        assert (mem["pagesize"] * mem["pagecount"] == mem["size"])
        debug_print("Uploading: %s" % os.path.split(self.firmware_file)[1])

        self.firmware_get_sync()

        self.event_queue.put((self.progressBar_set, (0, "Flashing...", 0)))
        self.btnUpdateOff.configure(state="disabled")

        self.serial.timeout = 0.3

        try:
            for addr in range(0, mem["size"], mem["pagesize"]):
                if addr > prog_size:
                    break
                page = buf[addr:addr + mem["pagesize"]]

                # cancel if page is empty
                if len(page) == 0:
                    #messagebox.showerror(title="Firmware upload", message="Page length is Zero")
                    break

                # fill page with 0xFF to pagesize
                while len(page) < mem["pagesize"]:
                    page.append(0xFF)

                self.firmware_load_addr(addr)
                self.firmware_prog_page(memtype, page, verify=True)

                percent_max = int(prog_size / mem["pagesize"])
                percent_cur = int(addr / mem["pagesize"])
                percent_val = int(percent_cur * 100 / percent_max * 100 / 100)
                #self.progressBar_set(percent_cur, percent_max, 0)
                self.event_queue.put((self.progressBar_set, (percent_val, "Flashing...", 0)))


            self.event_queue.put((self.btnUpdateOff_doubleclick))
            sleep(0.2)

            self.event_queue.put(self.firmware_uploaded)

            #self.progressBar_set(0, percent_max, 0)
            #self.firmwareStatus_set("Upload finished")
            self.event_queue.put((self.progressBar_set, (0, "Upload finished", 0)))


        except Exception as e:
            if PY2:
                debug_print(e.message)
            else:
                debug_print(''.join(e.args))
            messagebox.showerror(title="Firmware upload", message="Error during upload! Try again.")
        finally:
            self.event_queue.put((self.firmware_mode_off))

            #except Exception:
            #    self.event_queue.put((self.progressBar_set, (0, """Error during Upload. Try again.""", 0)))

            self.btnUpload.configure(state="normal")
            #self.btnUpload.update_idletasks()

    def firmware_uploaded(self):
        if self.avr_mode_selected:
            #self.serial_close()
            self.avr_mode.set(1)

            self.avr_mode_selected = False
            sleep(0.1)
            self.after_idle(self.serial_reconfig)


        #self.event_queue.put((self.btnReset_click))
        self.after_idle(self.btnReset_click)


    def firmware_mode_on(self):
        self.firmware_mode = True

        # self.serial = Serial()

    def firmware_mode_off(self):
        try:
            while self.serial.in_waiting:
                self.serial.read()
            self.serial.timeout = 1.0
            # self.serial.flushInput()
            self.serial_rx_buffer = []
        except:
            pass
        self.firmware_mode = False


def img_to_txt(filename):
    msg = b"<plain_txt_msg:img>"
    with open(filename, "rb") as imageFile:
        msg = msg + base64.b64encode(imageFile.read())
    msg = msg + b"<!plain_txt_msg>"
    return msg


def decode_img(msg, size=(None, None)):
    # msg = msg[msg.find(b"<plain_txt_msg:img>")+len(b"<plain_txt_msg:img>"):
    #          msg.find(b"<!plain_txt_msg>")]
    msg = base64.b64decode(msg)
    buf = io.BytesIO(msg)
    img = Image.open(buf)
    if not None in size:
        img = img.resize(size, Image.BICUBIC)  # .ANTIALIAS
    return img


def img_from_base64(str_base64, size=(None, None)):
    decoded_img = decode_img(str_base64, size)
    decoded_img = ImageTk.PhotoImage(decoded_img)
    return decoded_img


def ini_read(ini_file, section, key, default=""):
    default = "%s" % default
    read_config = ConfigParser.ConfigParser()
    read_config.read(ini_file)
    try:
        value = read_config.get(section, key)
        # print("VALUE:%s" % value)
    except ConfigParser.NoOptionError:
        value = default
    except ConfigParser.NoSectionError:
        value = default

    if value.lower() == "true":
        return True
    elif value.lower() == "false":
        return False
    else:
        return value


def ini_write(ini_file, section, key, value):
    value = "%s" % value
    read_config = ConfigParser.ConfigParser()
    read_config.read(ini_file)

    if not read_config.has_section(section):
        read_config.add_section(section)
    read_config.set(section, key, value)

    with open(ini_file, "w") as configfile:
        read_config.write(configfile)


def str_to_bstr(s):
    if not PY2 and isinstance(s, str):
        # s = b"%s" % s
        # return s.encode("utf-8")
        # if PLATFORM_WINDOWS:
        #    return bytes(s, "cp1252")
        # else:
        s = bytes(s, "unicode_escape") # s = bytes(s, "utf-8")
    return s


def bstr_to_ustr(s):
    if not PY2 and isinstance(s, (bytes, bytearray)):
        # s = b"%s" % s
        # return s.encode("utf-8")
        # return str(s, "utf-8")
        if platform.system() == "Windows":
            s = str(s, "cp1252")
        else:
            s = str(s, "unicode_escape") #s = str(s, "utf-8")
    return s


def as_thread(cmd, *args):
    t = Thread(target=cmd, args=args)
    t.daemon = True
    t.start()


def get_bit(value, bit):
    return value & 1 << bit != 0


def set_bit(value, bit, state):
    if state:
        value |= (1 << bit)
    else:
        value &= ~(1 << bit)
    return value


def invert_bit(value, pos):
    bit_value = get_bit(value, pos)
    value = set_bit(value, pos, not bit_value)
    return value


def RequestTimefromNtp(addr='0.de.pool.ntp.org'):
    import socket
    import struct
    import sys
    
    REF_TIME_1970 = 2208988800  # Reference time
    client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    data = b'\x1b' + 47 * b'\0'
    client.sendto(data, (addr, 123))
    data, address = client.recvfrom(1024)
    if data:
        t = struct.unpack('!12I', data)[10]
        t -= REF_TIME_1970
    return ctime(t), t


def makeTime(year, month, day, hour, minute, second):
    # assemble time elements into time_t
    # note year argument is offset from 1970 (see macros in time.h to convert to other formats)
    # previous version used full four digit year (or digits since 2000),i.e. 2009 was 2009 or 9

    # i = 0
    seconds = 0
    def LEAP_YEAR(Y):
        return ( ((1970+(Y))>0) and not((1970+(Y))%4) and ( ((1970+(Y))%100) or not((1970+(Y))%400) ) )

    SECS_PER_MIN = 60
    SECS_PER_HOUR = SECS_PER_MIN * 60
    SECS_PER_DAY = SECS_PER_HOUR * 24



    monthDays = [31,28,31,30,31,30,31,31,30,31,30,31]

    # seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds = (year-2000) * (SECS_PER_DAY * 365);
    # for (i = 0; i < tm.Year; i++) {
    for i in range(0, year-2000):
        if LEAP_YEAR(i):
            seconds += SECS_PER_DAY  # add extra days for leap years

    # add days for this year, months start from 1
    # for (i = 1; i < tm.Month; i++) {
    for i in range(0, month):
        if i == 2 and LEAP_YEAR(year):
            seconds += SECS_PER_DAY * 29
        else:
            seconds += SECS_PER_DAY * monthDays[i - 1];  # monthDay array starts from 0

    seconds += (day - 1) * SECS_PER_DAY
    seconds += hour * SECS_PER_HOUR
    seconds += minute * SECS_PER_MIN
    seconds += second
    return seconds


def getSeconds(year, month, day, hour, minute, second):
    now = datetime(year, month, day, hour, minute, second)
    delta = (now - datetime(1970, 1, 1, 0, 0, 0))
    return delta.total_seconds()

if __name__ == "__main__":
    #print(RequestTimefromNtp())
    #print(datetime.now().strftime("%Y.%m.%d %H:%M:%S"))
    #import serial.tools.list_ports

    #print([port for port in serial.tools.list_ports.comports() if port[2] != 'n/a'])

    if DEBUG:
        debug_date_prefix = datetime.now().strftime("%Y%m%d_%H%M%S")
        debug_logfile = os.path.join(APP_PATH, "logs", "%s_debug_%s.log" % (APP_TITLE, debug_date_prefix))
        debug_logfile = Logger(debug_logfile)
    try:
        app = App()
        app.mainloop()
    except KeyboardInterrupt:
        sys.exit(0)
